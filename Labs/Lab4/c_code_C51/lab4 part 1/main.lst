                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Nov 10 21:24:19 2018
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _External10_ISR
                             13 	.globl _write_i2c
                             14 	.globl _read_i2c
                             15 	.globl _main
                             16 	.globl _TF1
                             17 	.globl _TR1
                             18 	.globl _TF0
                             19 	.globl _TR0
                             20 	.globl _IE1
                             21 	.globl _IT1
                             22 	.globl _IE0
                             23 	.globl _IT0
                             24 	.globl _SM0
                             25 	.globl _SM1
                             26 	.globl _SM2
                             27 	.globl _REN
                             28 	.globl _TB8
                             29 	.globl _RB8
                             30 	.globl _TI
                             31 	.globl _RI
                             32 	.globl _CY
                             33 	.globl _AC
                             34 	.globl _F0
                             35 	.globl _RS1
                             36 	.globl _RS0
                             37 	.globl _OV
                             38 	.globl _F1
                             39 	.globl _P
                             40 	.globl _RD
                             41 	.globl _WR
                             42 	.globl _T1
                             43 	.globl _T0
                             44 	.globl _INT1
                             45 	.globl _INT0
                             46 	.globl _TXD0
                             47 	.globl _TXD
                             48 	.globl _RXD0
                             49 	.globl _RXD
                             50 	.globl _P3_7
                             51 	.globl _P3_6
                             52 	.globl _P3_5
                             53 	.globl _P3_4
                             54 	.globl _P3_3
                             55 	.globl _P3_2
                             56 	.globl _P3_1
                             57 	.globl _P3_0
                             58 	.globl _P2_7
                             59 	.globl _P2_6
                             60 	.globl _P2_5
                             61 	.globl _P2_4
                             62 	.globl _P2_3
                             63 	.globl _P2_2
                             64 	.globl _P2_1
                             65 	.globl _P2_0
                             66 	.globl _P1_7
                             67 	.globl _P1_6
                             68 	.globl _P1_5
                             69 	.globl _P1_4
                             70 	.globl _P1_3
                             71 	.globl _P1_2
                             72 	.globl _P1_1
                             73 	.globl _P1_0
                             74 	.globl _P0_7
                             75 	.globl _P0_6
                             76 	.globl _P0_5
                             77 	.globl _P0_4
                             78 	.globl _P0_3
                             79 	.globl _P0_2
                             80 	.globl _P0_1
                             81 	.globl _P0_0
                             82 	.globl _PS
                             83 	.globl _PT1
                             84 	.globl _PX1
                             85 	.globl _PT0
                             86 	.globl _PX0
                             87 	.globl _EA
                             88 	.globl _ES
                             89 	.globl _ET1
                             90 	.globl _EX1
                             91 	.globl _ET0
                             92 	.globl _EX0
                             93 	.globl _BREG_F7
                             94 	.globl _BREG_F6
                             95 	.globl _BREG_F5
                             96 	.globl _BREG_F4
                             97 	.globl _BREG_F3
                             98 	.globl _BREG_F2
                             99 	.globl _BREG_F1
                            100 	.globl _BREG_F0
                            101 	.globl _P5_7
                            102 	.globl _P5_6
                            103 	.globl _P5_5
                            104 	.globl _P5_4
                            105 	.globl _P5_3
                            106 	.globl _P5_2
                            107 	.globl _P5_1
                            108 	.globl _P5_0
                            109 	.globl _P4_7
                            110 	.globl _P4_6
                            111 	.globl _P4_5
                            112 	.globl _P4_4
                            113 	.globl _P4_3
                            114 	.globl _P4_2
                            115 	.globl _P4_1
                            116 	.globl _P4_0
                            117 	.globl _PX0L
                            118 	.globl _PT0L
                            119 	.globl _PX1L
                            120 	.globl _PT1L
                            121 	.globl _PLS
                            122 	.globl _PT2L
                            123 	.globl _PPCL
                            124 	.globl _EC
                            125 	.globl _CCF0
                            126 	.globl _CCF1
                            127 	.globl _CCF2
                            128 	.globl _CCF3
                            129 	.globl _CCF4
                            130 	.globl _CR
                            131 	.globl _CF
                            132 	.globl _TF2
                            133 	.globl _EXF2
                            134 	.globl _RCLK
                            135 	.globl _TCLK
                            136 	.globl _EXEN2
                            137 	.globl _TR2
                            138 	.globl _C_T2
                            139 	.globl _CP_RL2
                            140 	.globl _T2CON_7
                            141 	.globl _T2CON_6
                            142 	.globl _T2CON_5
                            143 	.globl _T2CON_4
                            144 	.globl _T2CON_3
                            145 	.globl _T2CON_2
                            146 	.globl _T2CON_1
                            147 	.globl _T2CON_0
                            148 	.globl _PT2
                            149 	.globl _ET2
                            150 	.globl _TMOD
                            151 	.globl _TL1
                            152 	.globl _TL0
                            153 	.globl _TH1
                            154 	.globl _TH0
                            155 	.globl _TCON
                            156 	.globl _SP
                            157 	.globl _SCON
                            158 	.globl _SBUF0
                            159 	.globl _SBUF
                            160 	.globl _PSW
                            161 	.globl _PCON
                            162 	.globl _P3
                            163 	.globl _P2
                            164 	.globl _P1
                            165 	.globl _P0
                            166 	.globl _IP
                            167 	.globl _IE
                            168 	.globl _DP0L
                            169 	.globl _DPL
                            170 	.globl _DP0H
                            171 	.globl _DPH
                            172 	.globl _B
                            173 	.globl _ACC
                            174 	.globl _EECON
                            175 	.globl _KBF
                            176 	.globl _KBE
                            177 	.globl _KBLS
                            178 	.globl _BRL
                            179 	.globl _BDRCON
                            180 	.globl _T2MOD
                            181 	.globl _SPDAT
                            182 	.globl _SPSTA
                            183 	.globl _SPCON
                            184 	.globl _SADEN
                            185 	.globl _SADDR
                            186 	.globl _WDTPRG
                            187 	.globl _WDTRST
                            188 	.globl _P5
                            189 	.globl _P4
                            190 	.globl _IPH1
                            191 	.globl _IPL1
                            192 	.globl _IPH0
                            193 	.globl _IPL0
                            194 	.globl _IEN1
                            195 	.globl _IEN0
                            196 	.globl _CMOD
                            197 	.globl _CL
                            198 	.globl _CH
                            199 	.globl _CCON
                            200 	.globl _CCAPM4
                            201 	.globl _CCAPM3
                            202 	.globl _CCAPM2
                            203 	.globl _CCAPM1
                            204 	.globl _CCAPM0
                            205 	.globl _CCAP4L
                            206 	.globl _CCAP3L
                            207 	.globl _CCAP2L
                            208 	.globl _CCAP1L
                            209 	.globl _CCAP0L
                            210 	.globl _CCAP4H
                            211 	.globl _CCAP3H
                            212 	.globl _CCAP2H
                            213 	.globl _CCAP1H
                            214 	.globl _CCAP0H
                            215 	.globl _CKCKON1
                            216 	.globl _CKCKON0
                            217 	.globl _CKRL
                            218 	.globl _AUXR1
                            219 	.globl _AUXR
                            220 	.globl _TH2
                            221 	.globl _TL2
                            222 	.globl _RCAP2H
                            223 	.globl _RCAP2L
                            224 	.globl _T2CON
                            225 	.globl _read_cont_PARM_2
                            226 	.globl _write_eeprom_PARM_2
                            227 	.globl _Start
                            228 	.globl _Stop
                            229 	.globl _write_eeprom
                            230 	.globl _read_eeprom
                            231 	.globl _read_cont
                            232 	.globl _reset
                            233 	.globl _ack
                            234 	.globl _Sendnack
                            235 	.globl _SendAck
                            236 	.globl _Delay
                            237 	.globl _serial_init
                            238 	.globl _putchar
                            239 	.globl _getchar
                            240 	.globl _get_num
                            241 ;--------------------------------------------------------
                            242 ; special function registers
                            243 ;--------------------------------------------------------
                            244 	.area RSEG    (DATA)
                    00C8    245 _T2CON	=	0x00c8
                    00CA    246 _RCAP2L	=	0x00ca
                    00CB    247 _RCAP2H	=	0x00cb
                    00CC    248 _TL2	=	0x00cc
                    00CD    249 _TH2	=	0x00cd
                    008E    250 _AUXR	=	0x008e
                    00A2    251 _AUXR1	=	0x00a2
                    0097    252 _CKRL	=	0x0097
                    008F    253 _CKCKON0	=	0x008f
                    008F    254 _CKCKON1	=	0x008f
                    00FA    255 _CCAP0H	=	0x00fa
                    00FB    256 _CCAP1H	=	0x00fb
                    00FC    257 _CCAP2H	=	0x00fc
                    00FD    258 _CCAP3H	=	0x00fd
                    00FE    259 _CCAP4H	=	0x00fe
                    00EA    260 _CCAP0L	=	0x00ea
                    00EB    261 _CCAP1L	=	0x00eb
                    00EC    262 _CCAP2L	=	0x00ec
                    00ED    263 _CCAP3L	=	0x00ed
                    00EE    264 _CCAP4L	=	0x00ee
                    00DA    265 _CCAPM0	=	0x00da
                    00DB    266 _CCAPM1	=	0x00db
                    00DC    267 _CCAPM2	=	0x00dc
                    00DD    268 _CCAPM3	=	0x00dd
                    00DE    269 _CCAPM4	=	0x00de
                    00D8    270 _CCON	=	0x00d8
                    00F9    271 _CH	=	0x00f9
                    00E9    272 _CL	=	0x00e9
                    00D9    273 _CMOD	=	0x00d9
                    00A8    274 _IEN0	=	0x00a8
                    00B1    275 _IEN1	=	0x00b1
                    00B8    276 _IPL0	=	0x00b8
                    00B7    277 _IPH0	=	0x00b7
                    00B2    278 _IPL1	=	0x00b2
                    00B3    279 _IPH1	=	0x00b3
                    00C0    280 _P4	=	0x00c0
                    00D8    281 _P5	=	0x00d8
                    00A6    282 _WDTRST	=	0x00a6
                    00A7    283 _WDTPRG	=	0x00a7
                    00A9    284 _SADDR	=	0x00a9
                    00B9    285 _SADEN	=	0x00b9
                    00C3    286 _SPCON	=	0x00c3
                    00C4    287 _SPSTA	=	0x00c4
                    00C5    288 _SPDAT	=	0x00c5
                    00C9    289 _T2MOD	=	0x00c9
                    009B    290 _BDRCON	=	0x009b
                    009A    291 _BRL	=	0x009a
                    009C    292 _KBLS	=	0x009c
                    009D    293 _KBE	=	0x009d
                    009E    294 _KBF	=	0x009e
                    00D2    295 _EECON	=	0x00d2
                    00E0    296 _ACC	=	0x00e0
                    00F0    297 _B	=	0x00f0
                    0083    298 _DPH	=	0x0083
                    0083    299 _DP0H	=	0x0083
                    0082    300 _DPL	=	0x0082
                    0082    301 _DP0L	=	0x0082
                    00A8    302 _IE	=	0x00a8
                    00B8    303 _IP	=	0x00b8
                    0080    304 _P0	=	0x0080
                    0090    305 _P1	=	0x0090
                    00A0    306 _P2	=	0x00a0
                    00B0    307 _P3	=	0x00b0
                    0087    308 _PCON	=	0x0087
                    00D0    309 _PSW	=	0x00d0
                    0099    310 _SBUF	=	0x0099
                    0099    311 _SBUF0	=	0x0099
                    0098    312 _SCON	=	0x0098
                    0081    313 _SP	=	0x0081
                    0088    314 _TCON	=	0x0088
                    008C    315 _TH0	=	0x008c
                    008D    316 _TH1	=	0x008d
                    008A    317 _TL0	=	0x008a
                    008B    318 _TL1	=	0x008b
                    0089    319 _TMOD	=	0x0089
                            320 ;--------------------------------------------------------
                            321 ; special function bits
                            322 ;--------------------------------------------------------
                            323 	.area RSEG    (DATA)
                    00AD    324 _ET2	=	0x00ad
                    00BD    325 _PT2	=	0x00bd
                    00C8    326 _T2CON_0	=	0x00c8
                    00C9    327 _T2CON_1	=	0x00c9
                    00CA    328 _T2CON_2	=	0x00ca
                    00CB    329 _T2CON_3	=	0x00cb
                    00CC    330 _T2CON_4	=	0x00cc
                    00CD    331 _T2CON_5	=	0x00cd
                    00CE    332 _T2CON_6	=	0x00ce
                    00CF    333 _T2CON_7	=	0x00cf
                    00C8    334 _CP_RL2	=	0x00c8
                    00C9    335 _C_T2	=	0x00c9
                    00CA    336 _TR2	=	0x00ca
                    00CB    337 _EXEN2	=	0x00cb
                    00CC    338 _TCLK	=	0x00cc
                    00CD    339 _RCLK	=	0x00cd
                    00CE    340 _EXF2	=	0x00ce
                    00CF    341 _TF2	=	0x00cf
                    00DF    342 _CF	=	0x00df
                    00DE    343 _CR	=	0x00de
                    00DC    344 _CCF4	=	0x00dc
                    00DB    345 _CCF3	=	0x00db
                    00DA    346 _CCF2	=	0x00da
                    00D9    347 _CCF1	=	0x00d9
                    00D8    348 _CCF0	=	0x00d8
                    00AE    349 _EC	=	0x00ae
                    00BE    350 _PPCL	=	0x00be
                    00BD    351 _PT2L	=	0x00bd
                    00BC    352 _PLS	=	0x00bc
                    00BB    353 _PT1L	=	0x00bb
                    00BA    354 _PX1L	=	0x00ba
                    00B9    355 _PT0L	=	0x00b9
                    00B8    356 _PX0L	=	0x00b8
                    00C0    357 _P4_0	=	0x00c0
                    00C1    358 _P4_1	=	0x00c1
                    00C2    359 _P4_2	=	0x00c2
                    00C3    360 _P4_3	=	0x00c3
                    00C4    361 _P4_4	=	0x00c4
                    00C5    362 _P4_5	=	0x00c5
                    00C6    363 _P4_6	=	0x00c6
                    00C7    364 _P4_7	=	0x00c7
                    00D8    365 _P5_0	=	0x00d8
                    00D9    366 _P5_1	=	0x00d9
                    00DA    367 _P5_2	=	0x00da
                    00DB    368 _P5_3	=	0x00db
                    00DC    369 _P5_4	=	0x00dc
                    00DD    370 _P5_5	=	0x00dd
                    00DE    371 _P5_6	=	0x00de
                    00DF    372 _P5_7	=	0x00df
                    00F0    373 _BREG_F0	=	0x00f0
                    00F1    374 _BREG_F1	=	0x00f1
                    00F2    375 _BREG_F2	=	0x00f2
                    00F3    376 _BREG_F3	=	0x00f3
                    00F4    377 _BREG_F4	=	0x00f4
                    00F5    378 _BREG_F5	=	0x00f5
                    00F6    379 _BREG_F6	=	0x00f6
                    00F7    380 _BREG_F7	=	0x00f7
                    00A8    381 _EX0	=	0x00a8
                    00A9    382 _ET0	=	0x00a9
                    00AA    383 _EX1	=	0x00aa
                    00AB    384 _ET1	=	0x00ab
                    00AC    385 _ES	=	0x00ac
                    00AF    386 _EA	=	0x00af
                    00B8    387 _PX0	=	0x00b8
                    00B9    388 _PT0	=	0x00b9
                    00BA    389 _PX1	=	0x00ba
                    00BB    390 _PT1	=	0x00bb
                    00BC    391 _PS	=	0x00bc
                    0080    392 _P0_0	=	0x0080
                    0081    393 _P0_1	=	0x0081
                    0082    394 _P0_2	=	0x0082
                    0083    395 _P0_3	=	0x0083
                    0084    396 _P0_4	=	0x0084
                    0085    397 _P0_5	=	0x0085
                    0086    398 _P0_6	=	0x0086
                    0087    399 _P0_7	=	0x0087
                    0090    400 _P1_0	=	0x0090
                    0091    401 _P1_1	=	0x0091
                    0092    402 _P1_2	=	0x0092
                    0093    403 _P1_3	=	0x0093
                    0094    404 _P1_4	=	0x0094
                    0095    405 _P1_5	=	0x0095
                    0096    406 _P1_6	=	0x0096
                    0097    407 _P1_7	=	0x0097
                    00A0    408 _P2_0	=	0x00a0
                    00A1    409 _P2_1	=	0x00a1
                    00A2    410 _P2_2	=	0x00a2
                    00A3    411 _P2_3	=	0x00a3
                    00A4    412 _P2_4	=	0x00a4
                    00A5    413 _P2_5	=	0x00a5
                    00A6    414 _P2_6	=	0x00a6
                    00A7    415 _P2_7	=	0x00a7
                    00B0    416 _P3_0	=	0x00b0
                    00B1    417 _P3_1	=	0x00b1
                    00B2    418 _P3_2	=	0x00b2
                    00B3    419 _P3_3	=	0x00b3
                    00B4    420 _P3_4	=	0x00b4
                    00B5    421 _P3_5	=	0x00b5
                    00B6    422 _P3_6	=	0x00b6
                    00B7    423 _P3_7	=	0x00b7
                    00B0    424 _RXD	=	0x00b0
                    00B0    425 _RXD0	=	0x00b0
                    00B1    426 _TXD	=	0x00b1
                    00B1    427 _TXD0	=	0x00b1
                    00B2    428 _INT0	=	0x00b2
                    00B3    429 _INT1	=	0x00b3
                    00B4    430 _T0	=	0x00b4
                    00B5    431 _T1	=	0x00b5
                    00B6    432 _WR	=	0x00b6
                    00B7    433 _RD	=	0x00b7
                    00D0    434 _P	=	0x00d0
                    00D1    435 _F1	=	0x00d1
                    00D2    436 _OV	=	0x00d2
                    00D3    437 _RS0	=	0x00d3
                    00D4    438 _RS1	=	0x00d4
                    00D5    439 _F0	=	0x00d5
                    00D6    440 _AC	=	0x00d6
                    00D7    441 _CY	=	0x00d7
                    0098    442 _RI	=	0x0098
                    0099    443 _TI	=	0x0099
                    009A    444 _RB8	=	0x009a
                    009B    445 _TB8	=	0x009b
                    009C    446 _REN	=	0x009c
                    009D    447 _SM2	=	0x009d
                    009E    448 _SM1	=	0x009e
                    009F    449 _SM0	=	0x009f
                    0088    450 _IT0	=	0x0088
                    0089    451 _IE0	=	0x0089
                    008A    452 _IT1	=	0x008a
                    008B    453 _IE1	=	0x008b
                    008C    454 _TR0	=	0x008c
                    008D    455 _TF0	=	0x008d
                    008E    456 _TR1	=	0x008e
                    008F    457 _TF1	=	0x008f
                            458 ;--------------------------------------------------------
                            459 ; overlayable register banks
                            460 ;--------------------------------------------------------
                            461 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     462 	.ds 8
                            463 ;--------------------------------------------------------
                            464 ; internal ram data
                            465 ;--------------------------------------------------------
                            466 	.area DSEG    (DATA)
                            467 ;--------------------------------------------------------
                            468 ; overlayable items in internal ram 
                            469 ;--------------------------------------------------------
                            470 	.area OSEG    (OVR,DATA)
                            471 ;--------------------------------------------------------
                            472 ; Stack segment in internal ram 
                            473 ;--------------------------------------------------------
                            474 	.area	SSEG	(DATA)
   0000                     475 __start__stack:
   0000                     476 	.ds	1
                            477 
                            478 ;--------------------------------------------------------
                            479 ; indirectly addressable internal ram data
                            480 ;--------------------------------------------------------
                            481 	.area ISEG    (DATA)
                            482 ;--------------------------------------------------------
                            483 ; bit data
                            484 ;--------------------------------------------------------
                            485 	.area BSEG    (BIT)
                            486 ;--------------------------------------------------------
                            487 ; paged external ram data
                            488 ;--------------------------------------------------------
                            489 	.area PSEG    (PAG,XDATA)
                            490 ;--------------------------------------------------------
                            491 ; external ram data
                            492 ;--------------------------------------------------------
                            493 	.area XSEG    (XDATA)
   0000                     494 _main_a1_1_1:
   0000                     495 	.ds 2
   0002                     496 _read_i2c_rxdata_1_1:
   0002                     497 	.ds 1
   0003                     498 _write_i2c_byte_1_1:
   0003                     499 	.ds 1
   0004                     500 _write_eeprom_PARM_2:
   0004                     501 	.ds 1
   0005                     502 _write_eeprom_a_1_1:
   0005                     503 	.ds 2
   0007                     504 _read_eeprom_add_1_1:
   0007                     505 	.ds 2
   0009                     506 _read_cont_PARM_2:
   0009                     507 	.ds 2
   000B                     508 _read_cont_start_add_1_1:
   000B                     509 	.ds 2
   000D                     510 _read_cont_ctr_1_1:
   000D                     511 	.ds 2
   000F                     512 _putchar_c_1_1:
   000F                     513 	.ds 1
   0010                     514 _get_num_val_1_1:
   0010                     515 	.ds 10
   001A                     516 _get_num_i_1_1:
   001A                     517 	.ds 2
   001C                     518 _get_num_val1_1_1:
   001C                     519 	.ds 2
                            520 ;--------------------------------------------------------
                            521 ; external initialized ram data
                            522 ;--------------------------------------------------------
                            523 	.area XISEG   (XDATA)
                            524 	.area HOME    (CODE)
                            525 	.area GSINIT0 (CODE)
                            526 	.area GSINIT1 (CODE)
                            527 	.area GSINIT2 (CODE)
                            528 	.area GSINIT3 (CODE)
                            529 	.area GSINIT4 (CODE)
                            530 	.area GSINIT5 (CODE)
                            531 	.area GSINIT  (CODE)
                            532 	.area GSFINAL (CODE)
                            533 	.area CSEG    (CODE)
                            534 ;--------------------------------------------------------
                            535 ; interrupt vector 
                            536 ;--------------------------------------------------------
                            537 	.area HOME    (CODE)
   0000                     538 __interrupt_vect:
   0000 02s00r00            539 	ljmp	__sdcc_gsinit_startup
   0003 02s08r20            540 	ljmp	_External10_ISR
                            541 ;--------------------------------------------------------
                            542 ; global & static initialisations
                            543 ;--------------------------------------------------------
                            544 	.area HOME    (CODE)
                            545 	.area GSINIT  (CODE)
                            546 	.area GSFINAL (CODE)
                            547 	.area GSINIT  (CODE)
                            548 	.globl __sdcc_gsinit_startup
                            549 	.globl __sdcc_program_startup
                            550 	.globl __start__stack
                            551 	.globl __mcs51_genXINIT
                            552 	.globl __mcs51_genXRAMCLEAR
                            553 	.globl __mcs51_genRAMCLEAR
                            554 	.area GSFINAL (CODE)
   0000 02s00r00            555 	ljmp	__sdcc_program_startup
                            556 ;--------------------------------------------------------
                            557 ; Home
                            558 ;--------------------------------------------------------
                            559 	.area HOME    (CODE)
                            560 	.area CSEG    (CODE)
   0000                     561 __sdcc_program_startup:
   0000 12s00r05            562 	lcall	_main
                            563 ;	return from main will lock up
   0003 80 FE               564 	sjmp .
                            565 ;--------------------------------------------------------
                            566 ; code
                            567 ;--------------------------------------------------------
                            568 	.area CSEG    (CODE)
                            569 ;------------------------------------------------------------
                            570 ;Allocation info for local variables in function 'main'
                            571 ;------------------------------------------------------------
                            572 ;a1                        Allocated with name '_main_a1_1_1'
                            573 ;c                         Allocated with name '_main_c_1_1'
                            574 ;d                         Allocated with name '_main_d_1_1'
                            575 ;e                         Allocated with name '_main_e_1_1'
                            576 ;choice                    Allocated with name '_main_choice_1_1'
                            577 ;b                         Allocated with name '_main_b_1_1'
                            578 ;------------------------------------------------------------
                            579 ;	main.c:22: void main()
                            580 ;	-----------------------------------------
                            581 ;	 function main
                            582 ;	-----------------------------------------
   0005                     583 _main:
                    0002    584 	ar2 = 0x02
                    0003    585 	ar3 = 0x03
                    0004    586 	ar4 = 0x04
                    0005    587 	ar5 = 0x05
                    0006    588 	ar6 = 0x06
                    0007    589 	ar7 = 0x07
                    0000    590 	ar0 = 0x00
                    0001    591 	ar1 = 0x01
                            592 ;	main.c:26: uint16_t a1=0,c,d,e,choice;
                            593 ;	genAssign
   0005 90s00r00            594 	mov	dptr,#_main_a1_1_1
   0008 E4                  595 	clr	a
   0009 F0                  596 	movx	@dptr,a
   000A A3                  597 	inc	dptr
   000B F0                  598 	movx	@dptr,a
                            599 ;	main.c:28: serial_init();
                            600 ;	genCall
   000C 12s05rBD            601 	lcall	_serial_init
                            602 ;	main.c:29: IT0=1;
                            603 ;	genAssign
   000F D2 88               604 	setb	_IT0
                            605 ;	main.c:30: EX0=1;
                            606 ;	genAssign
   0011 D2 A8               607 	setb	_EX0
                            608 ;	main.c:31: EA=1; // Calling serial communication
                            609 ;	genAssign
   0013 D2 AF               610 	setb	_EA
                            611 ;	main.c:32: while(1)
   0015                     612 00132$:
                            613 ;	main.c:34: printf_tiny("\n\rPLEASE ENTER AMONGST FOLLOWING OPTIONS (JUST PRESS OPTION NUMBER):--\n\r1>READ\n\r2>WRITE\n\r3>READ CONTINOUS\n\r4>RESET\n\r"); // asking user to choose from the following options
                            614 ;	genIpush
   0015 74r00               615 	mov	a,#__str_0
   0017 C0 E0               616 	push	acc
   0019 74s00               617 	mov	a,#(__str_0 >> 8)
   001B C0 E0               618 	push	acc
                            619 ;	genCall
   001D 12s00r00            620 	lcall	_printf_tiny
   0020 15 81               621 	dec	sp
   0022 15 81               622 	dec	sp
                            623 ;	main.c:35: printf_tiny("entered choice: ");
                            624 ;	genIpush
   0024 74r75               625 	mov	a,#__str_1
   0026 C0 E0               626 	push	acc
   0028 74s00               627 	mov	a,#(__str_1 >> 8)
   002A C0 E0               628 	push	acc
                            629 ;	genCall
   002C 12s00r00            630 	lcall	_printf_tiny
   002F 15 81               631 	dec	sp
   0031 15 81               632 	dec	sp
                            633 ;	main.c:36: choice=get_num();
                            634 ;	genCall
   0033 12s05rE5            635 	lcall	_get_num
   0036 AA 82               636 	mov	r2,dpl
   0038 AB 83               637 	mov	r3,dph
                            638 ;	main.c:37: if(choice==1) // if choice is one execute read_eeprom function
                            639 ;	genCmpEq
                            640 ;	gencjneshort
                            641 ;	Peephole 112.b	changed ljmp to sjmp
                            642 ;	Peephole 198.a	optimized misc jump sequence
   003A BA 01 44            643 	cjne	r2,#0x01,00129$
   003D BB 00 41            644 	cjne	r3,#0x00,00129$
                            645 ;	Peephole 200.b	removed redundant sjmp
                            646 ;	Peephole 300	removed redundant label 00149$
                            647 ;	Peephole 300	removed redundant label 00150$
                            648 ;	main.c:39: label1: printf_tiny("\n\renter read address");
   0040                     649 00101$:
                            650 ;	genIpush
   0040 74r86               651 	mov	a,#__str_2
   0042 C0 E0               652 	push	acc
   0044 74s00               653 	mov	a,#(__str_2 >> 8)
   0046 C0 E0               654 	push	acc
                            655 ;	genCall
   0048 12s00r00            656 	lcall	_printf_tiny
   004B 15 81               657 	dec	sp
   004D 15 81               658 	dec	sp
                            659 ;	main.c:40: c=get_num();
                            660 ;	genCall
   004F 12s05rE5            661 	lcall	_get_num
   0052 AC 82               662 	mov	r4,dpl
   0054 AD 83               663 	mov	r5,dph
                            664 ;	main.c:41: if (c>0x7ff) // check if entered address is in range
                            665 ;	genCmpGt
                            666 ;	genCmp
   0056 C3                  667 	clr	c
   0057 74 FF               668 	mov	a,#0xFF
   0059 9C                  669 	subb	a,r4
   005A 74 07               670 	mov	a,#0x07
   005C 9D                  671 	subb	a,r5
                            672 ;	genIfxJump
                            673 ;	Peephole 108.a	removed ljmp by inverse jump logic
   005D 50 11               674 	jnc	00103$
                            675 ;	Peephole 300	removed redundant label 00151$
                            676 ;	main.c:43: printf_tiny("invalid address , enter again ");
                            677 ;	genIpush
   005F 74r9B               678 	mov	a,#__str_3
   0061 C0 E0               679 	push	acc
   0063 74s00               680 	mov	a,#(__str_3 >> 8)
   0065 C0 E0               681 	push	acc
                            682 ;	genCall
   0067 12s00r00            683 	lcall	_printf_tiny
   006A 15 81               684 	dec	sp
   006C 15 81               685 	dec	sp
                            686 ;	main.c:44: goto label1;
                            687 ;	Peephole 112.b	changed ljmp to sjmp
   006E 80 D0               688 	sjmp	00101$
   0070                     689 00103$:
                            690 ;	main.c:48: read_eeprom(a1);
                            691 ;	genAssign
   0070 90s00r00            692 	mov	dptr,#_main_a1_1_1
   0073 E0                  693 	movx	a,@dptr
   0074 FC                  694 	mov	r4,a
   0075 A3                  695 	inc	dptr
   0076 E0                  696 	movx	a,@dptr
   0077 FD                  697 	mov	r5,a
                            698 ;	genCall
   0078 8C 82               699 	mov	dpl,r4
   007A 8D 83               700 	mov	dph,r5
   007C 12s02rF9            701 	lcall	_read_eeprom
                            702 ;	Peephole 112.b	changed ljmp to sjmp
   007F 80 94               703 	sjmp	00132$
   0081                     704 00129$:
                            705 ;	main.c:51: else if(choice==2) //if choice is 2 execute write_eeprom function
                            706 ;	genCmpEq
                            707 ;	gencjneshort
   0081 BA 02 05            708 	cjne	r2,#0x02,00152$
   0084 BB 00 02            709 	cjne	r3,#0x00,00152$
   0087 80 03               710 	sjmp	00153$
   0089                     711 00152$:
   0089 02s01r22            712 	ljmp	00126$
   008C                     713 00153$:
                            714 ;	main.c:53: label2: printf_tiny("\n\renter address");
   008C                     715 00105$:
                            716 ;	genIpush
   008C 74rBA               717 	mov	a,#__str_4
   008E C0 E0               718 	push	acc
   0090 74s00               719 	mov	a,#(__str_4 >> 8)
   0092 C0 E0               720 	push	acc
                            721 ;	genCall
   0094 12s00r00            722 	lcall	_printf_tiny
   0097 15 81               723 	dec	sp
   0099 15 81               724 	dec	sp
                            725 ;	main.c:54: a1=get_num();
                            726 ;	genCall
   009B 12s05rE5            727 	lcall	_get_num
   009E AC 82               728 	mov	r4,dpl
   00A0 AD 83               729 	mov	r5,dph
                            730 ;	genAssign
   00A2 90s00r00            731 	mov	dptr,#_main_a1_1_1
   00A5 EC                  732 	mov	a,r4
   00A6 F0                  733 	movx	@dptr,a
   00A7 A3                  734 	inc	dptr
   00A8 ED                  735 	mov	a,r5
   00A9 F0                  736 	movx	@dptr,a
                            737 ;	main.c:55: if (a1>0x7ff) // check if entered address is in range
                            738 ;	genAssign
   00AA 8C 06               739 	mov	ar6,r4
   00AC 8D 07               740 	mov	ar7,r5
                            741 ;	genCmpGt
                            742 ;	genCmp
   00AE C3                  743 	clr	c
   00AF 74 FF               744 	mov	a,#0xFF
   00B1 9E                  745 	subb	a,r6
   00B2 74 07               746 	mov	a,#0x07
   00B4 9F                  747 	subb	a,r7
                            748 ;	genIfxJump
                            749 ;	Peephole 108.a	removed ljmp by inverse jump logic
   00B5 50 11               750 	jnc	00108$
                            751 ;	Peephole 300	removed redundant label 00154$
                            752 ;	main.c:57: printf_tiny("invalid address , enter again ");
                            753 ;	genIpush
   00B7 74r9B               754 	mov	a,#__str_3
   00B9 C0 E0               755 	push	acc
   00BB 74s00               756 	mov	a,#(__str_3 >> 8)
   00BD C0 E0               757 	push	acc
                            758 ;	genCall
   00BF 12s00r00            759 	lcall	_printf_tiny
   00C2 15 81               760 	dec	sp
   00C4 15 81               761 	dec	sp
                            762 ;	main.c:58: goto label2;
                            763 ;	main.c:61: label5: printf_tiny("\n\renter data");
                            764 ;	Peephole 112.b	changed ljmp to sjmp
   00C6 80 C4               765 	sjmp	00105$
   00C8                     766 00108$:
                            767 ;	genIpush
   00C8 C0 04               768 	push	ar4
   00CA C0 05               769 	push	ar5
   00CC 74rCA               770 	mov	a,#__str_5
   00CE C0 E0               771 	push	acc
   00D0 74s00               772 	mov	a,#(__str_5 >> 8)
   00D2 C0 E0               773 	push	acc
                            774 ;	genCall
   00D4 12s00r00            775 	lcall	_printf_tiny
   00D7 15 81               776 	dec	sp
   00D9 15 81               777 	dec	sp
   00DB D0 05               778 	pop	ar5
   00DD D0 04               779 	pop	ar4
                            780 ;	main.c:62: b=get_num();
                            781 ;	genCall
   00DF C0 04               782 	push	ar4
   00E1 C0 05               783 	push	ar5
   00E3 12s05rE5            784 	lcall	_get_num
   00E6 AE 82               785 	mov	r6,dpl
   00E8 AF 83               786 	mov	r7,dph
   00EA D0 05               787 	pop	ar5
   00EC D0 04               788 	pop	ar4
                            789 ;	main.c:63: if (b>0xff)// check if entered data is 8 bit
                            790 ;	genAssign
   00EE 8E 00               791 	mov	ar0,r6
   00F0 8F 01               792 	mov	ar1,r7
                            793 ;	genCmpGt
                            794 ;	genCmp
   00F2 C3                  795 	clr	c
   00F3 74 FF               796 	mov	a,#0xFF
   00F5 98                  797 	subb	a,r0
                            798 ;	Peephole 181	changed mov to clr
   00F6 E4                  799 	clr	a
   00F7 99                  800 	subb	a,r1
                            801 ;	genIfxJump
                            802 ;	Peephole 108.a	removed ljmp by inverse jump logic
   00F8 50 19               803 	jnc	00110$
                            804 ;	Peephole 300	removed redundant label 00155$
                            805 ;	main.c:65: printf_tiny("data out of range, enter again ");
                            806 ;	genIpush
   00FA C0 04               807 	push	ar4
   00FC C0 05               808 	push	ar5
   00FE 74rD7               809 	mov	a,#__str_6
   0100 C0 E0               810 	push	acc
   0102 74s00               811 	mov	a,#(__str_6 >> 8)
   0104 C0 E0               812 	push	acc
                            813 ;	genCall
   0106 12s00r00            814 	lcall	_printf_tiny
   0109 15 81               815 	dec	sp
   010B 15 81               816 	dec	sp
   010D D0 05               817 	pop	ar5
   010F D0 04               818 	pop	ar4
                            819 ;	main.c:66: goto label5;
                            820 ;	Peephole 112.b	changed ljmp to sjmp
   0111 80 B5               821 	sjmp	00108$
   0113                     822 00110$:
                            823 ;	main.c:68: write_eeprom(a1,b);// write to eeprom after taking adress and data
                            824 ;	genAssign
                            825 ;	genCast
   0113 90s00r04            826 	mov	dptr,#_write_eeprom_PARM_2
   0116 EE                  827 	mov	a,r6
   0117 F0                  828 	movx	@dptr,a
                            829 ;	genCall
   0118 8C 82               830 	mov	dpl,r4
   011A 8D 83               831 	mov	dph,r5
   011C 12s02r8F            832 	lcall	_write_eeprom
   011F 02s00r15            833 	ljmp	00132$
   0122                     834 00126$:
                            835 ;	main.c:71: else if(choice==3)//if choice is 3 execute read_cont function
                            836 ;	genCmpEq
                            837 ;	gencjneshort
   0122 BA 03 05            838 	cjne	r2,#0x03,00156$
   0125 BB 00 02            839 	cjne	r3,#0x00,00156$
   0128 80 03               840 	sjmp	00157$
   012A                     841 00156$:
   012A 02s01rEA            842 	ljmp	00123$
   012D                     843 00157$:
                            844 ;	main.c:73: label3: printf_tiny("\n\renter strt address");
   012D                     845 00111$:
                            846 ;	genIpush
   012D 74rF7               847 	mov	a,#__str_7
   012F C0 E0               848 	push	acc
   0131 74s00               849 	mov	a,#(__str_7 >> 8)
   0133 C0 E0               850 	push	acc
                            851 ;	genCall
   0135 12s00r00            852 	lcall	_printf_tiny
   0138 15 81               853 	dec	sp
   013A 15 81               854 	dec	sp
                            855 ;	main.c:74: d=get_num();
                            856 ;	genCall
   013C 12s05rE5            857 	lcall	_get_num
   013F AC 82               858 	mov	r4,dpl
   0141 AD 83               859 	mov	r5,dph
                            860 ;	main.c:75: if (d>0x7ff)// check if entered address is in range
                            861 ;	genAssign
   0143 8C 06               862 	mov	ar6,r4
   0145 8D 07               863 	mov	ar7,r5
                            864 ;	genCmpGt
                            865 ;	genCmp
   0147 C3                  866 	clr	c
   0148 74 FF               867 	mov	a,#0xFF
   014A 9E                  868 	subb	a,r6
   014B 74 07               869 	mov	a,#0x07
   014D 9F                  870 	subb	a,r7
                            871 ;	genIfxJump
                            872 ;	Peephole 108.a	removed ljmp by inverse jump logic
   014E 50 11               873 	jnc	00114$
                            874 ;	Peephole 300	removed redundant label 00158$
                            875 ;	main.c:77: printf_tiny("invalid address , enter again ");
                            876 ;	genIpush
   0150 74r9B               877 	mov	a,#__str_3
   0152 C0 E0               878 	push	acc
   0154 74s00               879 	mov	a,#(__str_3 >> 8)
   0156 C0 E0               880 	push	acc
                            881 ;	genCall
   0158 12s00r00            882 	lcall	_printf_tiny
   015B 15 81               883 	dec	sp
   015D 15 81               884 	dec	sp
                            885 ;	main.c:78: goto label3;
                            886 ;	main.c:80: label4: printf_tiny("\n\renter end address");
                            887 ;	Peephole 112.b	changed ljmp to sjmp
   015F 80 CC               888 	sjmp	00111$
   0161                     889 00114$:
                            890 ;	genIpush
   0161 C0 04               891 	push	ar4
   0163 C0 05               892 	push	ar5
   0165 74r0C               893 	mov	a,#__str_8
   0167 C0 E0               894 	push	acc
   0169 74s01               895 	mov	a,#(__str_8 >> 8)
   016B C0 E0               896 	push	acc
                            897 ;	genCall
   016D 12s00r00            898 	lcall	_printf_tiny
   0170 15 81               899 	dec	sp
   0172 15 81               900 	dec	sp
   0174 D0 05               901 	pop	ar5
   0176 D0 04               902 	pop	ar4
                            903 ;	main.c:81: e=get_num();
                            904 ;	genCall
   0178 C0 04               905 	push	ar4
   017A C0 05               906 	push	ar5
   017C 12s05rE5            907 	lcall	_get_num
   017F AE 82               908 	mov	r6,dpl
   0181 AF 83               909 	mov	r7,dph
   0183 D0 05               910 	pop	ar5
   0185 D0 04               911 	pop	ar4
                            912 ;	main.c:82: if (e>0x7ff)// check if entered address is in range
                            913 ;	genAssign
   0187 8E 00               914 	mov	ar0,r6
   0189 8F 01               915 	mov	ar1,r7
                            916 ;	genCmpGt
                            917 ;	genCmp
   018B C3                  918 	clr	c
   018C 74 FF               919 	mov	a,#0xFF
   018E 98                  920 	subb	a,r0
   018F 74 07               921 	mov	a,#0x07
   0191 99                  922 	subb	a,r1
                            923 ;	genIfxJump
                            924 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0192 50 19               925 	jnc	00116$
                            926 ;	Peephole 300	removed redundant label 00159$
                            927 ;	main.c:84: printf_tiny("invalid address , enter again ");
                            928 ;	genIpush
   0194 C0 04               929 	push	ar4
   0196 C0 05               930 	push	ar5
   0198 74r9B               931 	mov	a,#__str_3
   019A C0 E0               932 	push	acc
   019C 74s00               933 	mov	a,#(__str_3 >> 8)
   019E C0 E0               934 	push	acc
                            935 ;	genCall
   01A0 12s00r00            936 	lcall	_printf_tiny
   01A3 15 81               937 	dec	sp
   01A5 15 81               938 	dec	sp
   01A7 D0 05               939 	pop	ar5
   01A9 D0 04               940 	pop	ar4
                            941 ;	main.c:85: goto label4;
                            942 ;	Peephole 112.b	changed ljmp to sjmp
   01AB 80 B4               943 	sjmp	00114$
   01AD                     944 00116$:
                            945 ;	main.c:87: if(d>e)
                            946 ;	genAssign
   01AD 8C 00               947 	mov	ar0,r4
   01AF 8D 01               948 	mov	ar1,r5
                            949 ;	genIpush
   01B1 C0 04               950 	push	ar4
   01B3 C0 05               951 	push	ar5
                            952 ;	genAssign
   01B5 8E 04               953 	mov	ar4,r6
   01B7 8F 05               954 	mov	ar5,r7
                            955 ;	genCmpGt
                            956 ;	genCmp
   01B9 C3                  957 	clr	c
   01BA EC                  958 	mov	a,r4
   01BB 98                  959 	subb	a,r0
   01BC ED                  960 	mov	a,r5
   01BD 99                  961 	subb	a,r1
   01BE E4                  962 	clr	a
   01BF 33                  963 	rlc	a
                            964 ;	genIpop
   01C0 D0 05               965 	pop	ar5
   01C2 D0 04               966 	pop	ar4
                            967 ;	genIfx
                            968 ;	genIfxJump
                            969 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C4 60 12               970 	jz	00118$
                            971 ;	Peephole 300	removed redundant label 00160$
                            972 ;	main.c:89: printf_tiny("invalid!");
                            973 ;	genIpush
   01C6 74r20               974 	mov	a,#__str_9
   01C8 C0 E0               975 	push	acc
   01CA 74s01               976 	mov	a,#(__str_9 >> 8)
   01CC C0 E0               977 	push	acc
                            978 ;	genCall
   01CE 12s00r00            979 	lcall	_printf_tiny
   01D1 15 81               980 	dec	sp
   01D3 15 81               981 	dec	sp
                            982 ;	main.c:90: goto label3;
   01D5 02s01r2D            983 	ljmp	00111$
   01D8                     984 00118$:
                            985 ;	main.c:93: read_cont(d,e);// reading continuously from start adress to end address in the memory
                            986 ;	genAssign
   01D8 90s00r09            987 	mov	dptr,#_read_cont_PARM_2
   01DB EE                  988 	mov	a,r6
   01DC F0                  989 	movx	@dptr,a
   01DD A3                  990 	inc	dptr
   01DE EF                  991 	mov	a,r7
   01DF F0                  992 	movx	@dptr,a
                            993 ;	genCall
   01E0 8C 82               994 	mov	dpl,r4
   01E2 8D 83               995 	mov	dph,r5
   01E4 12s03rA1            996 	lcall	_read_cont
   01E7 02s00r15            997 	ljmp	00132$
   01EA                     998 00123$:
                            999 ;	main.c:95: else if(choice==4)//if choice is 4 reset function
                           1000 ;	genCmpEq
                           1001 ;	gencjneshort
                           1002 ;	Peephole 112.b	changed ljmp to sjmp
                           1003 ;	Peephole 198.a	optimized misc jump sequence
   01EA BA 04 09           1004 	cjne	r2,#0x04,00120$
   01ED BB 00 06           1005 	cjne	r3,#0x00,00120$
                           1006 ;	Peephole 200.b	removed redundant sjmp
                           1007 ;	Peephole 300	removed redundant label 00161$
                           1008 ;	Peephole 300	removed redundant label 00162$
                           1009 ;	main.c:97: reset(); // software reset
                           1010 ;	genCall
   01F0 12s05r48           1011 	lcall	_reset
   01F3 02s00r15           1012 	ljmp	00132$
   01F6                    1013 00120$:
                           1014 ;	main.c:101: printf_tiny("\n\n\rPLEASE ENTER VALID OPTION!!\n\n\n\n\n");
                           1015 ;	genIpush
   01F6 74r29              1016 	mov	a,#__str_10
   01F8 C0 E0              1017 	push	acc
   01FA 74s01              1018 	mov	a,#(__str_10 >> 8)
   01FC C0 E0              1019 	push	acc
                           1020 ;	genCall
   01FE 12s00r00           1021 	lcall	_printf_tiny
   0201 15 81              1022 	dec	sp
   0203 15 81              1023 	dec	sp
   0205 02s00r15           1024 	ljmp	00132$
                           1025 ;	Peephole 259.b	removed redundant label 00134$ and ret
                           1026 ;
                           1027 ;------------------------------------------------------------
                           1028 ;Allocation info for local variables in function 'Start'
                           1029 ;------------------------------------------------------------
                           1030 ;------------------------------------------------------------
                           1031 ;	main.c:105: void Start() //function to start i2c
                           1032 ;	-----------------------------------------
                           1033 ;	 function Start
                           1034 ;	-----------------------------------------
   0208                    1035 _Start:
                           1036 ;	main.c:107: SCL=0;
                           1037 ;	genAssign
   0208 C2 95              1038 	clr	_P1_5
                           1039 ;	main.c:108: SDA = 1; // make sda line high
                           1040 ;	genAssign
   020A D2 96              1041 	setb	_P1_6
                           1042 ;	main.c:109: SCL = 1; //toggling scl line from 0 to 1
                           1043 ;	genAssign
   020C D2 95              1044 	setb	_P1_5
                           1045 ;	main.c:110: Delay(); // delay of 10us
                           1046 ;	genCall
   020E 12s05rAA           1047 	lcall	_Delay
                           1048 ;	main.c:111: SDA = 0;
                           1049 ;	genAssign
   0211 C2 96              1050 	clr	_P1_6
                           1051 ;	Peephole 300	removed redundant label 00101$
   0213 22                 1052 	ret
                           1053 ;------------------------------------------------------------
                           1054 ;Allocation info for local variables in function 'Stop'
                           1055 ;------------------------------------------------------------
                           1056 ;------------------------------------------------------------
                           1057 ;	main.c:114: void Stop()
                           1058 ;	-----------------------------------------
                           1059 ;	 function Stop
                           1060 ;	-----------------------------------------
   0214                    1061 _Stop:
                           1062 ;	main.c:116: SCL=0;
                           1063 ;	genAssign
   0214 C2 95              1064 	clr	_P1_5
                           1065 ;	main.c:117: SDA = 0;
                           1066 ;	genAssign
   0216 C2 96              1067 	clr	_P1_6
                           1068 ;	main.c:118: SCL = 1;
                           1069 ;	genAssign
   0218 D2 95              1070 	setb	_P1_5
                           1071 ;	main.c:119: Delay();
                           1072 ;	genCall
   021A 12s05rAA           1073 	lcall	_Delay
                           1074 ;	main.c:120: SDA = 1;
                           1075 ;	genAssign
   021D D2 96              1076 	setb	_P1_6
                           1077 ;	Peephole 300	removed redundant label 00101$
   021F 22                 1078 	ret
                           1079 ;------------------------------------------------------------
                           1080 ;Allocation info for local variables in function 'read_i2c'
                           1081 ;------------------------------------------------------------
                           1082 ;i                         Allocated with name '_read_i2c_i_1_1'
                           1083 ;rxdata                    Allocated with name '_read_i2c_rxdata_1_1'
                           1084 ;------------------------------------------------------------
                           1085 ;	main.c:124: uint8_t read_i2c()
                           1086 ;	-----------------------------------------
                           1087 ;	 function read_i2c
                           1088 ;	-----------------------------------------
   0220                    1089 _read_i2c:
                           1090 ;	main.c:127: uint8_t rxdata=0;
                           1091 ;	genAssign
   0220 90s00r02           1092 	mov	dptr,#_read_i2c_rxdata_1_1
                           1093 ;	Peephole 181	changed mov to clr
   0223 E4                 1094 	clr	a
   0224 F0                 1095 	movx	@dptr,a
                           1096 ;	main.c:128: while(i<=7)
                           1097 ;	genAssign
   0225 7A 00              1098 	mov	r2,#0x00
   0227                    1099 00101$:
                           1100 ;	genCmpGt
                           1101 ;	genCmp
   0227 C3                 1102 	clr	c
                           1103 ;	Peephole 159	avoided xrl during execution
   0228 74 87              1104 	mov	a,#(0x07 ^ 0x80)
   022A 8A F0              1105 	mov	b,r2
   022C 63 F0 80           1106 	xrl	b,#0x80
   022F 95 F0              1107 	subb	a,b
                           1108 ;	genIfxJump
                           1109 ;	Peephole 112.b	changed ljmp to sjmp
                           1110 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0231 40 21              1111 	jc	00103$
                           1112 ;	Peephole 300	removed redundant label 00109$
                           1113 ;	main.c:130: SCL = 0;
                           1114 ;	genAssign
   0233 C2 95              1115 	clr	_P1_5
                           1116 ;	main.c:131: SDA=1;
                           1117 ;	genAssign
   0235 D2 96              1118 	setb	_P1_6
                           1119 ;	main.c:132: SCL=1;
                           1120 ;	genAssign
   0237 D2 95              1121 	setb	_P1_5
                           1122 ;	main.c:133: Delay();
                           1123 ;	genCall
   0239 C0 02              1124 	push	ar2
   023B 12s05rAA           1125 	lcall	_Delay
   023E D0 02              1126 	pop	ar2
                           1127 ;	main.c:134: rxdata=((rxdata<<1)|SDA);
                           1128 ;	genAssign
   0240 90s00r02           1129 	mov	dptr,#_read_i2c_rxdata_1_1
   0243 E0                 1130 	movx	a,@dptr
                           1131 ;	genLeftShift
                           1132 ;	genLeftShiftLiteral
                           1133 ;	genlshOne
                           1134 ;	Peephole 105	removed redundant mov
                           1135 ;	Peephole 204	removed redundant mov
   0244 25 E0              1136 	add	a,acc
   0246 FB                 1137 	mov	r3,a
                           1138 ;	genAssign
   0247 E4                 1139 	clr	a
   0248 A2 96              1140 	mov	c,_P1_6
   024A 33                 1141 	rlc	a
                           1142 ;	genOr
   024B FC                 1143 	mov	r4,a
   024C 90s00r02           1144 	mov	dptr,#_read_i2c_rxdata_1_1
                           1145 ;	Peephole 177.d	removed redundant move
   024F 4B                 1146 	orl	a,r3
   0250 F0                 1147 	movx	@dptr,a
                           1148 ;	main.c:135: i++;
                           1149 ;	genPlus
                           1150 ;     genPlusIncr
   0251 0A                 1151 	inc	r2
                           1152 ;	Peephole 112.b	changed ljmp to sjmp
   0252 80 D3              1153 	sjmp	00101$
   0254                    1154 00103$:
                           1155 ;	main.c:137: return rxdata;
                           1156 ;	genAssign
   0254 90s00r02           1157 	mov	dptr,#_read_i2c_rxdata_1_1
   0257 E0                 1158 	movx	a,@dptr
                           1159 ;	genRet
                           1160 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   0258 F5 82              1161 	mov	dpl,a
                           1162 ;	Peephole 300	removed redundant label 00104$
   025A 22                 1163 	ret
                           1164 ;------------------------------------------------------------
                           1165 ;Allocation info for local variables in function 'write_i2c'
                           1166 ;------------------------------------------------------------
                           1167 ;byte                      Allocated with name '_write_i2c_byte_1_1'
                           1168 ;i                         Allocated with name '_write_i2c_i_1_1'
                           1169 ;------------------------------------------------------------
                           1170 ;	main.c:143: void write_i2c(unsigned char byte)
                           1171 ;	-----------------------------------------
                           1172 ;	 function write_i2c
                           1173 ;	-----------------------------------------
   025B                    1174 _write_i2c:
                           1175 ;	genReceive
   025B E5 82              1176 	mov	a,dpl
   025D 90s00r03           1177 	mov	dptr,#_write_i2c_byte_1_1
   0260 F0                 1178 	movx	@dptr,a
                           1179 ;	main.c:146: while(i>=0)
                           1180 ;	genAssign
   0261 90s00r03           1181 	mov	dptr,#_write_i2c_byte_1_1
   0264 E0                 1182 	movx	a,@dptr
   0265 FA                 1183 	mov	r2,a
                           1184 ;	genAssign
   0266 7B 07              1185 	mov	r3,#0x07
   0268                    1186 00101$:
                           1187 ;	genCmpLt
                           1188 ;	genCmp
   0268 EB                 1189 	mov	a,r3
                           1190 ;	genIfxJump
                           1191 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0269 20 E7 22           1192 	jb	acc.7,00104$
                           1193 ;	Peephole 300	removed redundant label 00109$
                           1194 ;	main.c:148: SCL=0;
                           1195 ;	genAssign
   026C C2 95              1196 	clr	_P1_5
                           1197 ;	main.c:149: SDA=((byte>>i)&0x01);
                           1198 ;	genRightShift
   026E 8B F0              1199 	mov	b,r3
   0270 05 F0              1200 	inc	b
   0272 EA                 1201 	mov	a,r2
   0273 80 02              1202 	sjmp	00111$
   0275                    1203 00110$:
   0275 C3                 1204 	clr	c
   0276 13                 1205 	rrc	a
   0277                    1206 00111$:
   0277 D5 F0 FB           1207 	djnz	b,00110$
                           1208 ;	genGetAbit
   027A FC                 1209 	mov	r4,a
                           1210 ;	Peephole 105	removed redundant mov
   027B 13                 1211 	rrc	a
   027C 92 96              1212 	mov	_P1_6,c
                           1213 ;	main.c:150: SCL=1;
                           1214 ;	genAssign
   027E D2 95              1215 	setb	_P1_5
                           1216 ;	main.c:151: Delay();
                           1217 ;	genCall
   0280 C0 02              1218 	push	ar2
   0282 C0 03              1219 	push	ar3
   0284 12s05rAA           1220 	lcall	_Delay
   0287 D0 03              1221 	pop	ar3
   0289 D0 02              1222 	pop	ar2
                           1223 ;	main.c:152: i--;
                           1224 ;	genMinus
                           1225 ;	genMinusDec
   028B 1B                 1226 	dec	r3
                           1227 ;	Peephole 112.b	changed ljmp to sjmp
   028C 80 DA              1228 	sjmp	00101$
   028E                    1229 00104$:
   028E 22                 1230 	ret
                           1231 ;------------------------------------------------------------
                           1232 ;Allocation info for local variables in function 'write_eeprom'
                           1233 ;------------------------------------------------------------
                           1234 ;byt                       Allocated with name '_write_eeprom_PARM_2'
                           1235 ;a                         Allocated with name '_write_eeprom_a_1_1'
                           1236 ;ack_check                 Allocated with name '_write_eeprom_ack_check_1_1'
                           1237 ;vola                      Allocated with name '_write_eeprom_vola_1_1'
                           1238 ;------------------------------------------------------------
                           1239 ;	main.c:156: void write_eeprom(uint16_t a,uint8_t byt)
                           1240 ;	-----------------------------------------
                           1241 ;	 function write_eeprom
                           1242 ;	-----------------------------------------
   028F                    1243 _write_eeprom:
                           1244 ;	genReceive
   028F AA 83              1245 	mov	r2,dph
   0291 E5 82              1246 	mov	a,dpl
   0293 90s00r05           1247 	mov	dptr,#_write_eeprom_a_1_1
   0296 F0                 1248 	movx	@dptr,a
   0297 A3                 1249 	inc	dptr
   0298 EA                 1250 	mov	a,r2
   0299 F0                 1251 	movx	@dptr,a
                           1252 ;	main.c:160: Start();
                           1253 ;	genCall
   029A 12s02r08           1254 	lcall	_Start
                           1255 ;	main.c:161: vola=(0xA0|((a>>7)&0x0e));
                           1256 ;	genAssign
   029D 90s00r05           1257 	mov	dptr,#_write_eeprom_a_1_1
   02A0 E0                 1258 	movx	a,@dptr
   02A1 FA                 1259 	mov	r2,a
   02A2 A3                 1260 	inc	dptr
   02A3 E0                 1261 	movx	a,@dptr
                           1262 ;	genRightShift
                           1263 ;	genRightShiftLiteral
                           1264 ;	genrshTwo
   02A4 FB                 1265 	mov	r3,a
   02A5 8A 04              1266 	mov	ar4,r2
                           1267 ;	Peephole 177.d	removed redundant move
   02A7 A2 E7              1268 	mov	c,acc.7
   02A9 CC                 1269 	xch	a,r4
   02AA 33                 1270 	rlc	a
   02AB CC                 1271 	xch	a,r4
   02AC 33                 1272 	rlc	a
   02AD CC                 1273 	xch	a,r4
   02AE 54 01              1274 	anl	a,#0x01
   02B0 FD                 1275 	mov	r5,a
                           1276 ;	genAnd
   02B1 53 04 0E           1277 	anl	ar4,#0x0E
   02B4 7D 00              1278 	mov	r5,#0x00
                           1279 ;	genOr
   02B6 43 04 A0           1280 	orl	ar4,#0xA0
                           1281 ;	genCast
                           1282 ;	main.c:162: write_i2c(vola);
                           1283 ;	genCall
   02B9 8C 82              1284 	mov	dpl,r4
   02BB C0 02              1285 	push	ar2
   02BD C0 03              1286 	push	ar3
   02BF 12s02r5B           1287 	lcall	_write_i2c
   02C2 D0 03              1288 	pop	ar3
   02C4 D0 02              1289 	pop	ar2
                           1290 ;	main.c:163: ack_check=ack();
                           1291 ;	genCall
   02C6 C0 02              1292 	push	ar2
   02C8 C0 03              1293 	push	ar3
   02CA 12s05r78           1294 	lcall	_ack
   02CD AC 82              1295 	mov	r4,dpl
   02CF AD 83              1296 	mov	r5,dph
   02D1 D0 03              1297 	pop	ar3
   02D3 D0 02              1298 	pop	ar2
                           1299 ;	genCast
                           1300 ;	main.c:164: vola=a&0xff;
                           1301 ;	genAnd
   02D5 7B 00              1302 	mov	r3,#0x00
                           1303 ;	genCast
                           1304 ;	main.c:165: if (ack_check==1)
                           1305 ;	genCmpEq
                           1306 ;	gencjneshort
                           1307 ;	Peephole 112.b	changed ljmp to sjmp
                           1308 ;	Peephole 198.b	optimized misc jump sequence
   02D7 BC 01 05           1309 	cjne	r4,#0x01,00102$
                           1310 ;	Peephole 200.b	removed redundant sjmp
                           1311 ;	Peephole 300	removed redundant label 00109$
                           1312 ;	Peephole 300	removed redundant label 00110$
                           1313 ;	main.c:167: write_i2c(vola);
                           1314 ;	genCall
   02DA 8A 82              1315 	mov	dpl,r2
   02DC 12s02r5B           1316 	lcall	_write_i2c
   02DF                    1317 00102$:
                           1318 ;	main.c:169: ack_check=ack();
                           1319 ;	genCall
   02DF 12s05r78           1320 	lcall	_ack
   02E2 AA 82              1321 	mov	r2,dpl
   02E4 AB 83              1322 	mov	r3,dph
                           1323 ;	genCast
                           1324 ;	main.c:170: vola=byt;
                           1325 ;	genAssign
   02E6 90s00r04           1326 	mov	dptr,#_write_eeprom_PARM_2
   02E9 E0                 1327 	movx	a,@dptr
   02EA FB                 1328 	mov	r3,a
                           1329 ;	main.c:171: if (ack_check==1)
                           1330 ;	genCmpEq
                           1331 ;	gencjneshort
                           1332 ;	Peephole 112.b	changed ljmp to sjmp
                           1333 ;	Peephole 198.b	optimized misc jump sequence
   02EB BA 01 05           1334 	cjne	r2,#0x01,00104$
                           1335 ;	Peephole 200.b	removed redundant sjmp
                           1336 ;	Peephole 300	removed redundant label 00111$
                           1337 ;	Peephole 300	removed redundant label 00112$
                           1338 ;	main.c:173: write_i2c(vola);
                           1339 ;	genCall
   02EE 8B 82              1340 	mov	dpl,r3
   02F0 12s02r5B           1341 	lcall	_write_i2c
   02F3                    1342 00104$:
                           1343 ;	main.c:175: ack_check=ack();
                           1344 ;	genCall
   02F3 12s05r78           1345 	lcall	_ack
                           1346 ;	main.c:176: Stop();
                           1347 ;	genCall
                           1348 ;	Peephole 253.b	replaced lcall/ret with ljmp
   02F6 02s02r14           1349 	ljmp	_Stop
                           1350 ;
                           1351 ;------------------------------------------------------------
                           1352 ;Allocation info for local variables in function 'read_eeprom'
                           1353 ;------------------------------------------------------------
                           1354 ;add                       Allocated with name '_read_eeprom_add_1_1'
                           1355 ;ack_check                 Allocated with name '_read_eeprom_ack_check_1_1'
                           1356 ;vola                      Allocated with name '_read_eeprom_vola_1_1'
                           1357 ;------------------------------------------------------------
                           1358 ;	main.c:179: void read_eeprom(uint16_t add)
                           1359 ;	-----------------------------------------
                           1360 ;	 function read_eeprom
                           1361 ;	-----------------------------------------
   02F9                    1362 _read_eeprom:
                           1363 ;	genReceive
   02F9 AA 83              1364 	mov	r2,dph
   02FB E5 82              1365 	mov	a,dpl
   02FD 90s00r07           1366 	mov	dptr,#_read_eeprom_add_1_1
   0300 F0                 1367 	movx	@dptr,a
   0301 A3                 1368 	inc	dptr
   0302 EA                 1369 	mov	a,r2
   0303 F0                 1370 	movx	@dptr,a
                           1371 ;	main.c:183: Start();
                           1372 ;	genCall
   0304 12s02r08           1373 	lcall	_Start
                           1374 ;	main.c:184: vola=(0xA0|((add>>7)&0x0e));
                           1375 ;	genAssign
   0307 90s00r07           1376 	mov	dptr,#_read_eeprom_add_1_1
   030A E0                 1377 	movx	a,@dptr
   030B FA                 1378 	mov	r2,a
   030C A3                 1379 	inc	dptr
   030D E0                 1380 	movx	a,@dptr
                           1381 ;	genRightShift
                           1382 ;	genRightShiftLiteral
                           1383 ;	genrshTwo
   030E FB                 1384 	mov	r3,a
   030F 8A 04              1385 	mov	ar4,r2
                           1386 ;	Peephole 177.d	removed redundant move
   0311 A2 E7              1387 	mov	c,acc.7
   0313 CC                 1388 	xch	a,r4
   0314 33                 1389 	rlc	a
   0315 CC                 1390 	xch	a,r4
   0316 33                 1391 	rlc	a
   0317 CC                 1392 	xch	a,r4
   0318 54 01              1393 	anl	a,#0x01
   031A FD                 1394 	mov	r5,a
                           1395 ;	genAnd
   031B 53 04 0E           1396 	anl	ar4,#0x0E
   031E 7D 00              1397 	mov	r5,#0x00
                           1398 ;	genOr
   0320 43 04 A0           1399 	orl	ar4,#0xA0
                           1400 ;	genCast
                           1401 ;	main.c:185: write_i2c(vola);
                           1402 ;	genCall
   0323 8C 82              1403 	mov	dpl,r4
   0325 C0 02              1404 	push	ar2
   0327 C0 03              1405 	push	ar3
   0329 12s02r5B           1406 	lcall	_write_i2c
   032C D0 03              1407 	pop	ar3
   032E D0 02              1408 	pop	ar2
                           1409 ;	main.c:186: ack_check=ack();
                           1410 ;	genCall
   0330 C0 02              1411 	push	ar2
   0332 C0 03              1412 	push	ar3
   0334 12s05r78           1413 	lcall	_ack
   0337 AC 82              1414 	mov	r4,dpl
   0339 AD 83              1415 	mov	r5,dph
   033B D0 03              1416 	pop	ar3
   033D D0 02              1417 	pop	ar2
                           1418 ;	genCast
                           1419 ;	main.c:187: vola=add&0xff;
                           1420 ;	genAnd
   033F 7B 00              1421 	mov	r3,#0x00
                           1422 ;	genCast
                           1423 ;	main.c:188: if (ack_check==1)
                           1424 ;	genCmpEq
                           1425 ;	gencjneshort
                           1426 ;	Peephole 112.b	changed ljmp to sjmp
                           1427 ;	Peephole 198.b	optimized misc jump sequence
   0341 BC 01 05           1428 	cjne	r4,#0x01,00102$
                           1429 ;	Peephole 200.b	removed redundant sjmp
                           1430 ;	Peephole 300	removed redundant label 00112$
                           1431 ;	Peephole 300	removed redundant label 00113$
                           1432 ;	main.c:190: write_i2c(vola);
                           1433 ;	genCall
   0344 8A 82              1434 	mov	dpl,r2
   0346 12s02r5B           1435 	lcall	_write_i2c
   0349                    1436 00102$:
                           1437 ;	main.c:192: ack_check=ack();
                           1438 ;	genCall
   0349 12s05r78           1439 	lcall	_ack
   034C AA 82              1440 	mov	r2,dpl
   034E AB 83              1441 	mov	r3,dph
                           1442 ;	genCast
                           1443 ;	main.c:193: if(ack_check==1)
                           1444 ;	genCmpEq
                           1445 ;	gencjneshort
                           1446 ;	Peephole 112.b	changed ljmp to sjmp
                           1447 ;	Peephole 198.b	optimized misc jump sequence
   0350 BA 01 22           1448 	cjne	r2,#0x01,00104$
                           1449 ;	Peephole 200.b	removed redundant sjmp
                           1450 ;	Peephole 300	removed redundant label 00114$
                           1451 ;	Peephole 300	removed redundant label 00115$
                           1452 ;	main.c:195: Start();
                           1453 ;	genCall
   0353 12s02r08           1454 	lcall	_Start
                           1455 ;	main.c:196: vola=(0xA0|(((add>>7)&0x0e)|0x01));
                           1456 ;	genAssign
   0356 90s00r07           1457 	mov	dptr,#_read_eeprom_add_1_1
   0359 E0                 1458 	movx	a,@dptr
   035A FA                 1459 	mov	r2,a
   035B A3                 1460 	inc	dptr
   035C E0                 1461 	movx	a,@dptr
                           1462 ;	genRightShift
                           1463 ;	genRightShiftLiteral
                           1464 ;	genrshTwo
   035D FB                 1465 	mov	r3,a
                           1466 ;	Peephole 105	removed redundant mov
   035E A2 E7              1467 	mov	c,acc.7
   0360 CA                 1468 	xch	a,r2
   0361 33                 1469 	rlc	a
   0362 CA                 1470 	xch	a,r2
   0363 33                 1471 	rlc	a
   0364 CA                 1472 	xch	a,r2
   0365 54 01              1473 	anl	a,#0x01
   0367 FB                 1474 	mov	r3,a
                           1475 ;	genAnd
   0368 53 02 0E           1476 	anl	ar2,#0x0E
   036B 7B 00              1477 	mov	r3,#0x00
                           1478 ;	genOr
   036D 43 02 A1           1479 	orl	ar2,#0xA1
                           1480 ;	genCast
                           1481 ;	main.c:197: write_i2c(vola);
                           1482 ;	genCall
   0370 8A 82              1483 	mov	dpl,r2
   0372 12s02r5B           1484 	lcall	_write_i2c
   0375                    1485 00104$:
                           1486 ;	main.c:200: ack_check=ack();
                           1487 ;	genCall
   0375 12s05r78           1488 	lcall	_ack
   0378 AA 82              1489 	mov	r2,dpl
   037A AB 83              1490 	mov	r3,dph
                           1491 ;	genCast
                           1492 ;	main.c:201: if(ack_check==1)
                           1493 ;	genCmpEq
                           1494 ;	gencjneshort
                           1495 ;	Peephole 112.b	changed ljmp to sjmp
                           1496 ;	Peephole 198.b	optimized misc jump sequence
   037C BA 01 1C           1497 	cjne	r2,#0x01,00106$
                           1498 ;	Peephole 200.b	removed redundant sjmp
                           1499 ;	Peephole 300	removed redundant label 00116$
                           1500 ;	Peephole 300	removed redundant label 00117$
                           1501 ;	main.c:203: printf_tiny("value is : %x ",read_i2c());
                           1502 ;	genCall
   037F 12s02r20           1503 	lcall	_read_i2c
   0382 AA 82              1504 	mov	r2,dpl
                           1505 ;	genCast
   0384 7B 00              1506 	mov	r3,#0x00
                           1507 ;	genIpush
   0386 C0 02              1508 	push	ar2
   0388 C0 03              1509 	push	ar3
                           1510 ;	genIpush
   038A 74r4D              1511 	mov	a,#__str_11
   038C C0 E0              1512 	push	acc
   038E 74s01              1513 	mov	a,#(__str_11 >> 8)
   0390 C0 E0              1514 	push	acc
                           1515 ;	genCall
   0392 12s00r00           1516 	lcall	_printf_tiny
   0395 E5 81              1517 	mov	a,sp
   0397 24 FC              1518 	add	a,#0xfc
   0399 F5 81              1519 	mov	sp,a
   039B                    1520 00106$:
                           1521 ;	main.c:205: Sendnack();
                           1522 ;	genCall
   039B 12s05r98           1523 	lcall	_Sendnack
                           1524 ;	main.c:206: Stop();
                           1525 ;	genCall
                           1526 ;	Peephole 253.b	replaced lcall/ret with ljmp
   039E 02s02r14           1527 	ljmp	_Stop
                           1528 ;
                           1529 ;------------------------------------------------------------
                           1530 ;Allocation info for local variables in function 'read_cont'
                           1531 ;------------------------------------------------------------
                           1532 ;end_add                   Allocated with name '_read_cont_PARM_2'
                           1533 ;start_add                 Allocated with name '_read_cont_start_add_1_1'
                           1534 ;ack_check                 Allocated with name '_read_cont_ack_check_1_1'
                           1535 ;vola                      Allocated with name '_read_cont_vola_1_1'
                           1536 ;i                         Allocated with name '_read_cont_i_1_1'
                           1537 ;offset                    Allocated with name '_read_cont_offset_1_1'
                           1538 ;ctr                       Allocated with name '_read_cont_ctr_1_1'
                           1539 ;------------------------------------------------------------
                           1540 ;	main.c:208: void read_cont(uint16_t start_add,uint16_t end_add)
                           1541 ;	-----------------------------------------
                           1542 ;	 function read_cont
                           1543 ;	-----------------------------------------
   03A1                    1544 _read_cont:
                           1545 ;	genReceive
   03A1 AA 83              1546 	mov	r2,dph
   03A3 E5 82              1547 	mov	a,dpl
   03A5 90s00r0B           1548 	mov	dptr,#_read_cont_start_add_1_1
   03A8 F0                 1549 	movx	@dptr,a
   03A9 A3                 1550 	inc	dptr
   03AA EA                 1551 	mov	a,r2
   03AB F0                 1552 	movx	@dptr,a
                           1553 ;	main.c:213: uint16_t ctr=0;
                           1554 ;	genAssign
   03AC 90s00r0D           1555 	mov	dptr,#_read_cont_ctr_1_1
   03AF E4                 1556 	clr	a
   03B0 F0                 1557 	movx	@dptr,a
   03B1 A3                 1558 	inc	dptr
   03B2 F0                 1559 	movx	@dptr,a
                           1560 ;	main.c:214: Start();
                           1561 ;	genCall
   03B3 12s02r08           1562 	lcall	_Start
                           1563 ;	main.c:216: vola=(0xA0|((start_add>>7)&0x0e));
                           1564 ;	genAssign
   03B6 90s00r0B           1565 	mov	dptr,#_read_cont_start_add_1_1
   03B9 E0                 1566 	movx	a,@dptr
   03BA FA                 1567 	mov	r2,a
   03BB A3                 1568 	inc	dptr
   03BC E0                 1569 	movx	a,@dptr
                           1570 ;	genRightShift
                           1571 ;	genRightShiftLiteral
                           1572 ;	genrshTwo
   03BD FB                 1573 	mov	r3,a
   03BE 8A 04              1574 	mov	ar4,r2
                           1575 ;	Peephole 177.d	removed redundant move
   03C0 A2 E7              1576 	mov	c,acc.7
   03C2 CC                 1577 	xch	a,r4
   03C3 33                 1578 	rlc	a
   03C4 CC                 1579 	xch	a,r4
   03C5 33                 1580 	rlc	a
   03C6 CC                 1581 	xch	a,r4
   03C7 54 01              1582 	anl	a,#0x01
   03C9 FD                 1583 	mov	r5,a
                           1584 ;	genAnd
   03CA 53 04 0E           1585 	anl	ar4,#0x0E
   03CD 7D 00              1586 	mov	r5,#0x00
                           1587 ;	genOr
   03CF 43 04 A0           1588 	orl	ar4,#0xA0
                           1589 ;	genCast
                           1590 ;	main.c:217: write_i2c(vola);
                           1591 ;	genCall
   03D2 8C 82              1592 	mov	dpl,r4
   03D4 C0 02              1593 	push	ar2
   03D6 C0 03              1594 	push	ar3
   03D8 12s02r5B           1595 	lcall	_write_i2c
   03DB D0 03              1596 	pop	ar3
   03DD D0 02              1597 	pop	ar2
                           1598 ;	main.c:218: ack_check=ack();
                           1599 ;	genCall
   03DF C0 02              1600 	push	ar2
   03E1 C0 03              1601 	push	ar3
   03E3 12s05r78           1602 	lcall	_ack
   03E6 AC 82              1603 	mov	r4,dpl
   03E8 AD 83              1604 	mov	r5,dph
   03EA D0 03              1605 	pop	ar3
   03EC D0 02              1606 	pop	ar2
                           1607 ;	genCast
                           1608 ;	main.c:219: vola=start_add&0xff;
                           1609 ;	genAnd
   03EE 7B 00              1610 	mov	r3,#0x00
                           1611 ;	genCast
                           1612 ;	main.c:220: if (ack_check==1)// checking the value returned by ack function  , if it is true send next address
                           1613 ;	genCmpEq
                           1614 ;	gencjneshort
                           1615 ;	Peephole 112.b	changed ljmp to sjmp
                           1616 ;	Peephole 198.b	optimized misc jump sequence
   03F0 BC 01 05           1617 	cjne	r4,#0x01,00102$
                           1618 ;	Peephole 200.b	removed redundant sjmp
                           1619 ;	Peephole 300	removed redundant label 00124$
                           1620 ;	Peephole 300	removed redundant label 00125$
                           1621 ;	main.c:222: write_i2c(vola);
                           1622 ;	genCall
   03F3 8A 82              1623 	mov	dpl,r2
   03F5 12s02r5B           1624 	lcall	_write_i2c
   03F8                    1625 00102$:
                           1626 ;	main.c:224: ack_check=ack();
                           1627 ;	genCall
   03F8 12s05r78           1628 	lcall	_ack
   03FB AA 82              1629 	mov	r2,dpl
   03FD AB 83              1630 	mov	r3,dph
                           1631 ;	genCast
                           1632 ;	main.c:225: if(ack_check==1)
                           1633 ;	genCmpEq
                           1634 ;	gencjneshort
                           1635 ;	Peephole 112.b	changed ljmp to sjmp
                           1636 ;	Peephole 198.b	optimized misc jump sequence
   03FF BA 01 22           1637 	cjne	r2,#0x01,00104$
                           1638 ;	Peephole 200.b	removed redundant sjmp
                           1639 ;	Peephole 300	removed redundant label 00126$
                           1640 ;	Peephole 300	removed redundant label 00127$
                           1641 ;	main.c:227: Start();
                           1642 ;	genCall
   0402 12s02r08           1643 	lcall	_Start
                           1644 ;	main.c:228: vola=(0xA0|(((start_add>>7)&0x0e)|0x01));
                           1645 ;	genAssign
   0405 90s00r0B           1646 	mov	dptr,#_read_cont_start_add_1_1
   0408 E0                 1647 	movx	a,@dptr
   0409 FA                 1648 	mov	r2,a
   040A A3                 1649 	inc	dptr
   040B E0                 1650 	movx	a,@dptr
                           1651 ;	genRightShift
                           1652 ;	genRightShiftLiteral
                           1653 ;	genrshTwo
   040C FB                 1654 	mov	r3,a
                           1655 ;	Peephole 105	removed redundant mov
   040D A2 E7              1656 	mov	c,acc.7
   040F CA                 1657 	xch	a,r2
   0410 33                 1658 	rlc	a
   0411 CA                 1659 	xch	a,r2
   0412 33                 1660 	rlc	a
   0413 CA                 1661 	xch	a,r2
   0414 54 01              1662 	anl	a,#0x01
   0416 FB                 1663 	mov	r3,a
                           1664 ;	genAnd
   0417 53 02 0E           1665 	anl	ar2,#0x0E
   041A 7B 00              1666 	mov	r3,#0x00
                           1667 ;	genOr
   041C 43 02 A1           1668 	orl	ar2,#0xA1
                           1669 ;	genCast
                           1670 ;	main.c:229: write_i2c(vola);
                           1671 ;	genCall
   041F 8A 82              1672 	mov	dpl,r2
   0421 12s02r5B           1673 	lcall	_write_i2c
   0424                    1674 00104$:
                           1675 ;	main.c:231: ack_check=ack();
                           1676 ;	genCall
   0424 12s05r78           1677 	lcall	_ack
   0427 AA 82              1678 	mov	r2,dpl
   0429 AB 83              1679 	mov	r3,dph
                           1680 ;	genCast
                           1681 ;	main.c:232: if(ack_check==1)
                           1682 ;	genCmpEq
                           1683 ;	gencjneshort
   042B BA 01 02           1684 	cjne	r2,#0x01,00128$
   042E 80 03              1685 	sjmp	00129$
   0430                    1686 00128$:
   0430 02s05r42           1687 	ljmp	00113$
   0433                    1688 00129$:
                           1689 ;	main.c:234: i=start_add;offset=start_add;
                           1690 ;	genAssign
   0433 90s00r0B           1691 	mov	dptr,#_read_cont_start_add_1_1
   0436 E0                 1692 	movx	a,@dptr
   0437 FA                 1693 	mov	r2,a
   0438 A3                 1694 	inc	dptr
   0439 E0                 1695 	movx	a,@dptr
   043A FB                 1696 	mov	r3,a
                           1697 ;	main.c:235: printf_tiny("%x:",start_add);
                           1698 ;	genIpush
   043B C0 02              1699 	push	ar2
   043D C0 03              1700 	push	ar3
   043F C0 02              1701 	push	ar2
   0441 C0 03              1702 	push	ar3
                           1703 ;	genIpush
   0443 74r5C              1704 	mov	a,#__str_12
   0445 C0 E0              1705 	push	acc
   0447 74s01              1706 	mov	a,#(__str_12 >> 8)
   0449 C0 E0              1707 	push	acc
                           1708 ;	genCall
   044B 12s00r00           1709 	lcall	_printf_tiny
   044E E5 81              1710 	mov	a,sp
   0450 24 FC              1711 	add	a,#0xfc
   0452 F5 81              1712 	mov	sp,a
   0454 D0 03              1713 	pop	ar3
   0456 D0 02              1714 	pop	ar2
                           1715 ;	main.c:236: while(i<=end_add)
                           1716 ;	genAssign
   0458 90s00r09           1717 	mov	dptr,#_read_cont_PARM_2
   045B E0                 1718 	movx	a,@dptr
   045C FC                 1719 	mov	r4,a
   045D A3                 1720 	inc	dptr
   045E E0                 1721 	movx	a,@dptr
   045F FD                 1722 	mov	r5,a
                           1723 ;	genAssign
   0460 8A 06              1724 	mov	ar6,r2
   0462 8B 07              1725 	mov	ar7,r3
                           1726 ;	genAssign
   0464                    1727 00109$:
                           1728 ;	genCmpGt
                           1729 ;	genCmp
   0464 C3                 1730 	clr	c
   0465 EC                 1731 	mov	a,r4
   0466 9A                 1732 	subb	a,r2
   0467 ED                 1733 	mov	a,r5
   0468 9B                 1734 	subb	a,r3
                           1735 ;	genIfxJump
   0469 50 03              1736 	jnc	00130$
   046B 02s05r42           1737 	ljmp	00113$
   046E                    1738 00130$:
                           1739 ;	main.c:238: ctr++;
                           1740 ;	genAssign
   046E 90s00r0D           1741 	mov	dptr,#_read_cont_ctr_1_1
   0471 E0                 1742 	movx	a,@dptr
   0472 F8                 1743 	mov	r0,a
   0473 A3                 1744 	inc	dptr
   0474 E0                 1745 	movx	a,@dptr
   0475 F9                 1746 	mov	r1,a
                           1747 ;	genPlus
   0476 90s00r0D           1748 	mov	dptr,#_read_cont_ctr_1_1
                           1749 ;     genPlusIncr
   0479 74 01              1750 	mov	a,#0x01
                           1751 ;	Peephole 236.a	used r0 instead of ar0
   047B 28                 1752 	add	a,r0
   047C F0                 1753 	movx	@dptr,a
                           1754 ;	Peephole 181	changed mov to clr
   047D E4                 1755 	clr	a
                           1756 ;	Peephole 236.b	used r1 instead of ar1
   047E 39                 1757 	addc	a,r1
   047F A3                 1758 	inc	dptr
   0480 F0                 1759 	movx	@dptr,a
                           1760 ;	main.c:239: if(ctr==17)
                           1761 ;	genAssign
   0481 90s00r0D           1762 	mov	dptr,#_read_cont_ctr_1_1
   0484 E0                 1763 	movx	a,@dptr
   0485 F8                 1764 	mov	r0,a
   0486 A3                 1765 	inc	dptr
   0487 E0                 1766 	movx	a,@dptr
   0488 F9                 1767 	mov	r1,a
                           1768 ;	genCmpEq
                           1769 ;	gencjneshort
                           1770 ;	Peephole 112.b	changed ljmp to sjmp
                           1771 ;	Peephole 198.a	optimized misc jump sequence
   0489 B8 11 40           1772 	cjne	r0,#0x11,00106$
   048C B9 00 3D           1773 	cjne	r1,#0x00,00106$
                           1774 ;	Peephole 200.b	removed redundant sjmp
                           1775 ;	Peephole 300	removed redundant label 00131$
                           1776 ;	Peephole 300	removed redundant label 00132$
                           1777 ;	main.c:241: offset=offset+16;
                           1778 ;	genPlus
                           1779 ;     genPlusIncr
   048F 74 10              1780 	mov	a,#0x10
                           1781 ;	Peephole 236.a	used r6 instead of ar6
   0491 2E                 1782 	add	a,r6
   0492 FE                 1783 	mov	r6,a
                           1784 ;	Peephole 181	changed mov to clr
   0493 E4                 1785 	clr	a
                           1786 ;	Peephole 236.b	used r7 instead of ar7
   0494 3F                 1787 	addc	a,r7
   0495 FF                 1788 	mov	r7,a
                           1789 ;	main.c:242: printf_tiny("\n\r %x:",offset);ctr=1;
                           1790 ;	genIpush
   0496 C0 02              1791 	push	ar2
   0498 C0 03              1792 	push	ar3
   049A C0 04              1793 	push	ar4
   049C C0 05              1794 	push	ar5
   049E C0 06              1795 	push	ar6
   04A0 C0 07              1796 	push	ar7
   04A2 C0 06              1797 	push	ar6
   04A4 C0 07              1798 	push	ar7
                           1799 ;	genIpush
   04A6 74r60              1800 	mov	a,#__str_13
   04A8 C0 E0              1801 	push	acc
   04AA 74s01              1802 	mov	a,#(__str_13 >> 8)
   04AC C0 E0              1803 	push	acc
                           1804 ;	genCall
   04AE 12s00r00           1805 	lcall	_printf_tiny
   04B1 E5 81              1806 	mov	a,sp
   04B3 24 FC              1807 	add	a,#0xfc
   04B5 F5 81              1808 	mov	sp,a
   04B7 D0 07              1809 	pop	ar7
   04B9 D0 06              1810 	pop	ar6
   04BB D0 05              1811 	pop	ar5
   04BD D0 04              1812 	pop	ar4
   04BF D0 03              1813 	pop	ar3
   04C1 D0 02              1814 	pop	ar2
                           1815 ;	genAssign
   04C3 90s00r0D           1816 	mov	dptr,#_read_cont_ctr_1_1
   04C6 74 01              1817 	mov	a,#0x01
   04C8 F0                 1818 	movx	@dptr,a
   04C9 E4                 1819 	clr	a
   04CA A3                 1820 	inc	dptr
   04CB F0                 1821 	movx	@dptr,a
   04CC                    1822 00106$:
                           1823 ;	main.c:244: printf_tiny("  %x  ",read_i2c());
                           1824 ;	genCall
   04CC C0 02              1825 	push	ar2
   04CE C0 03              1826 	push	ar3
   04D0 C0 04              1827 	push	ar4
   04D2 C0 05              1828 	push	ar5
   04D4 C0 06              1829 	push	ar6
   04D6 C0 07              1830 	push	ar7
   04D8 12s02r20           1831 	lcall	_read_i2c
   04DB A8 82              1832 	mov	r0,dpl
   04DD D0 07              1833 	pop	ar7
   04DF D0 06              1834 	pop	ar6
   04E1 D0 05              1835 	pop	ar5
   04E3 D0 04              1836 	pop	ar4
   04E5 D0 03              1837 	pop	ar3
   04E7 D0 02              1838 	pop	ar2
                           1839 ;	genCast
   04E9 79 00              1840 	mov	r1,#0x00
                           1841 ;	genIpush
   04EB C0 02              1842 	push	ar2
   04ED C0 03              1843 	push	ar3
   04EF C0 04              1844 	push	ar4
   04F1 C0 05              1845 	push	ar5
   04F3 C0 06              1846 	push	ar6
   04F5 C0 07              1847 	push	ar7
   04F7 C0 00              1848 	push	ar0
   04F9 C0 01              1849 	push	ar1
                           1850 ;	genIpush
   04FB 74r67              1851 	mov	a,#__str_14
   04FD C0 E0              1852 	push	acc
   04FF 74s01              1853 	mov	a,#(__str_14 >> 8)
   0501 C0 E0              1854 	push	acc
                           1855 ;	genCall
   0503 12s00r00           1856 	lcall	_printf_tiny
   0506 E5 81              1857 	mov	a,sp
   0508 24 FC              1858 	add	a,#0xfc
   050A F5 81              1859 	mov	sp,a
   050C D0 07              1860 	pop	ar7
   050E D0 06              1861 	pop	ar6
   0510 D0 05              1862 	pop	ar5
   0512 D0 04              1863 	pop	ar4
   0514 D0 03              1864 	pop	ar3
   0516 D0 02              1865 	pop	ar2
                           1866 ;	main.c:245: if(i<end_add)
                           1867 ;	genCmpLt
                           1868 ;	genCmp
   0518 C3                 1869 	clr	c
   0519 EA                 1870 	mov	a,r2
   051A 9C                 1871 	subb	a,r4
   051B EB                 1872 	mov	a,r3
   051C 9D                 1873 	subb	a,r5
                           1874 ;	genIfxJump
                           1875 ;	Peephole 108.a	removed ljmp by inverse jump logic
   051D 50 1B              1876 	jnc	00108$
                           1877 ;	Peephole 300	removed redundant label 00133$
                           1878 ;	main.c:247: SendAck();
                           1879 ;	genCall
   051F C0 02              1880 	push	ar2
   0521 C0 03              1881 	push	ar3
   0523 C0 04              1882 	push	ar4
   0525 C0 05              1883 	push	ar5
   0527 C0 06              1884 	push	ar6
   0529 C0 07              1885 	push	ar7
   052B 12s05rA1           1886 	lcall	_SendAck
   052E D0 07              1887 	pop	ar7
   0530 D0 06              1888 	pop	ar6
   0532 D0 05              1889 	pop	ar5
   0534 D0 04              1890 	pop	ar4
   0536 D0 03              1891 	pop	ar3
   0538 D0 02              1892 	pop	ar2
   053A                    1893 00108$:
                           1894 ;	main.c:249: i++;
                           1895 ;	genPlus
                           1896 ;     genPlusIncr
   053A 0A                 1897 	inc	r2
   053B BA 00 01           1898 	cjne	r2,#0x00,00134$
   053E 0B                 1899 	inc	r3
   053F                    1900 00134$:
   053F 02s04r64           1901 	ljmp	00109$
   0542                    1902 00113$:
                           1903 ;	main.c:252: Sendnack();
                           1904 ;	genCall
   0542 12s05r98           1905 	lcall	_Sendnack
                           1906 ;	main.c:253: Stop();
                           1907 ;	genCall
                           1908 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0545 02s02r14           1909 	ljmp	_Stop
                           1910 ;
                           1911 ;------------------------------------------------------------
                           1912 ;Allocation info for local variables in function 'reset'
                           1913 ;------------------------------------------------------------
                           1914 ;i                         Allocated with name '_reset_i_1_1'
                           1915 ;------------------------------------------------------------
                           1916 ;	main.c:256: void reset()
                           1917 ;	-----------------------------------------
                           1918 ;	 function reset
                           1919 ;	-----------------------------------------
   0548                    1920 _reset:
                           1921 ;	main.c:258: Start();
                           1922 ;	genCall
   0548 12s02r08           1923 	lcall	_Start
                           1924 ;	main.c:259: SCL=0;
                           1925 ;	genAssign
   054B C2 95              1926 	clr	_P1_5
                           1927 ;	main.c:260: SDA=1;
                           1928 ;	genAssign
   054D D2 96              1929 	setb	_P1_6
                           1930 ;	main.c:261: for (i=0;i<=8;i++)
                           1931 ;	genAssign
   054F 7A 00              1932 	mov	r2,#0x00
   0551                    1933 00101$:
                           1934 ;	genCmpGt
                           1935 ;	genCmp
   0551 C3                 1936 	clr	c
                           1937 ;	Peephole 159	avoided xrl during execution
   0552 74 88              1938 	mov	a,#(0x08 ^ 0x80)
   0554 8A F0              1939 	mov	b,r2
   0556 63 F0 80           1940 	xrl	b,#0x80
   0559 95 F0              1941 	subb	a,b
                           1942 ;	genIfxJump
                           1943 ;	Peephole 112.b	changed ljmp to sjmp
                           1944 ;	Peephole 160.a	removed sjmp by inverse jump logic
   055B 40 15              1945 	jc	00104$
                           1946 ;	Peephole 300	removed redundant label 00110$
                           1947 ;	main.c:263: SCL=1;
                           1948 ;	genAssign
   055D D2 95              1949 	setb	_P1_5
                           1950 ;	main.c:264: Delay();
                           1951 ;	genCall
   055F C0 02              1952 	push	ar2
   0561 12s05rAA           1953 	lcall	_Delay
   0564 D0 02              1954 	pop	ar2
                           1955 ;	main.c:265: SCL=0;
                           1956 ;	genAssign
   0566 C2 95              1957 	clr	_P1_5
                           1958 ;	main.c:266: Delay();
                           1959 ;	genCall
   0568 C0 02              1960 	push	ar2
   056A 12s05rAA           1961 	lcall	_Delay
   056D D0 02              1962 	pop	ar2
                           1963 ;	main.c:261: for (i=0;i<=8;i++)
                           1964 ;	genPlus
                           1965 ;     genPlusIncr
   056F 0A                 1966 	inc	r2
                           1967 ;	Peephole 112.b	changed ljmp to sjmp
   0570 80 DF              1968 	sjmp	00101$
   0572                    1969 00104$:
                           1970 ;	main.c:269: Start();
                           1971 ;	genCall
   0572 12s02r08           1972 	lcall	_Start
                           1973 ;	main.c:270: Stop();
                           1974 ;	genCall
                           1975 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0575 02s02r14           1976 	ljmp	_Stop
                           1977 ;
                           1978 ;------------------------------------------------------------
                           1979 ;Allocation info for local variables in function 'ack'
                           1980 ;------------------------------------------------------------
                           1981 ;------------------------------------------------------------
                           1982 ;	main.c:273: int ack()
                           1983 ;	-----------------------------------------
                           1984 ;	 function ack
                           1985 ;	-----------------------------------------
   0578                    1986 _ack:
                           1987 ;	main.c:275: SCL=0;
                           1988 ;	genAssign
   0578 C2 95              1989 	clr	_P1_5
                           1990 ;	main.c:276: SDA=1;
                           1991 ;	genAssign
   057A D2 96              1992 	setb	_P1_6
                           1993 ;	main.c:277: SCL=1;
                           1994 ;	genAssign
   057C D2 95              1995 	setb	_P1_5
                           1996 ;	main.c:278: TH0=0xFF;
                           1997 ;	genAssign
   057E 75 8C FF           1998 	mov	_TH0,#0xFF
                           1999 ;	main.c:279: TL0=0xF6;
                           2000 ;	genAssign
   0581 75 8A F6           2001 	mov	_TL0,#0xF6
                           2002 ;	main.c:280: TR0 = 1;
                           2003 ;	genAssign
   0584 D2 8C              2004 	setb	_TR0
                           2005 ;	main.c:281: while (TF0 == 0);
   0586                    2006 00101$:
                           2007 ;	genIfx
                           2008 ;	genIfxJump
                           2009 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0586 30 8D FD           2010 	jnb	_TF0,00101$
                           2011 ;	Peephole 300	removed redundant label 00111$
                           2012 ;	main.c:290: return 0;
                           2013 ;	genIfx
                           2014 ;	genIfxJump
                           2015 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0589 20 96 08           2016 	jb	_P1_6,00105$
                           2017 ;	Peephole 300	removed redundant label 00112$
                           2018 ;	main.c:285: TR0 = 0;
                           2019 ;	genAssign
   058C C2 8C              2020 	clr	_TR0
                           2021 ;	main.c:286: TF0 = 0;
                           2022 ;	genAssign
   058E C2 8D              2023 	clr	_TF0
                           2024 ;	main.c:287: return 1;
                           2025 ;	genRet
                           2026 ;	Peephole 182.b	used 16 bit load of dptr
   0590 90 00 01           2027 	mov	dptr,#0x0001
                           2028 ;	Peephole 112.b	changed ljmp to sjmp
                           2029 ;	main.c:290: return 0;
                           2030 ;	genRet
                           2031 ;	Peephole 182.b	used 16 bit load of dptr
                           2032 ;	Peephole 237.a	removed sjmp to ret
   0593 22                 2033 	ret
   0594                    2034 00105$:
   0594 90 00 00           2035 	mov	dptr,#0x0000
                           2036 ;	Peephole 300	removed redundant label 00106$
   0597 22                 2037 	ret
                           2038 ;------------------------------------------------------------
                           2039 ;Allocation info for local variables in function 'Sendnack'
                           2040 ;------------------------------------------------------------
                           2041 ;------------------------------------------------------------
                           2042 ;	main.c:294: void Sendnack()
                           2043 ;	-----------------------------------------
                           2044 ;	 function Sendnack
                           2045 ;	-----------------------------------------
   0598                    2046 _Sendnack:
                           2047 ;	main.c:296: SCL=0;
                           2048 ;	genAssign
   0598 C2 95              2049 	clr	_P1_5
                           2050 ;	main.c:297: SDA=1;
                           2051 ;	genAssign
   059A D2 96              2052 	setb	_P1_6
                           2053 ;	main.c:298: SCL=1;
                           2054 ;	genAssign
   059C D2 95              2055 	setb	_P1_5
                           2056 ;	main.c:299: Delay();
                           2057 ;	genCall
                           2058 ;	Peephole 253.b	replaced lcall/ret with ljmp
   059E 02s05rAA           2059 	ljmp	_Delay
                           2060 ;
                           2061 ;------------------------------------------------------------
                           2062 ;Allocation info for local variables in function 'SendAck'
                           2063 ;------------------------------------------------------------
                           2064 ;------------------------------------------------------------
                           2065 ;	main.c:302: void SendAck()
                           2066 ;	-----------------------------------------
                           2067 ;	 function SendAck
                           2068 ;	-----------------------------------------
   05A1                    2069 _SendAck:
                           2070 ;	main.c:304: SCL  = 0;
                           2071 ;	genAssign
   05A1 C2 95              2072 	clr	_P1_5
                           2073 ;	main.c:305: SDA = 0;
                           2074 ;	genAssign
   05A3 C2 96              2075 	clr	_P1_6
                           2076 ;	main.c:306: SCL = 1;
                           2077 ;	genAssign
   05A5 D2 95              2078 	setb	_P1_5
                           2079 ;	main.c:307: Delay();
                           2080 ;	genCall
                           2081 ;	Peephole 253.b	replaced lcall/ret with ljmp
   05A7 02s05rAA           2082 	ljmp	_Delay
                           2083 ;
                           2084 ;------------------------------------------------------------
                           2085 ;Allocation info for local variables in function 'Delay'
                           2086 ;------------------------------------------------------------
                           2087 ;------------------------------------------------------------
                           2088 ;	main.c:311: void Delay()
                           2089 ;	-----------------------------------------
                           2090 ;	 function Delay
                           2091 ;	-----------------------------------------
   05AA                    2092 _Delay:
                           2093 ;	main.c:313: TMOD |= 0x01;           // Timer0 mode1
                           2094 ;	genOr
   05AA 43 89 01           2095 	orl	_TMOD,#0x01
                           2096 ;	main.c:314: TH0=0xFF;              //initial value for 10us
                           2097 ;	genAssign
   05AD 75 8C FF           2098 	mov	_TH0,#0xFF
                           2099 ;	main.c:315: TL0=0xF6;
                           2100 ;	genAssign
   05B0 75 8A F6           2101 	mov	_TL0,#0xF6
                           2102 ;	main.c:316: TR0 = 1;               // timer0 start
                           2103 ;	genAssign
   05B3 D2 8C              2104 	setb	_TR0
                           2105 ;	main.c:317: while (TF0 == 0);      // check overflow condition
   05B5                    2106 00101$:
                           2107 ;	genIfx
                           2108 ;	genIfxJump
                           2109 ;	Peephole 108.d	removed ljmp by inverse jump logic
   05B5 30 8D FD           2110 	jnb	_TF0,00101$
                           2111 ;	Peephole 300	removed redundant label 00108$
                           2112 ;	main.c:318: TR0 = 0;               // Stop Timer
                           2113 ;	genAssign
   05B8 C2 8C              2114 	clr	_TR0
                           2115 ;	main.c:319: TF0 = 0;               // Clear flag
                           2116 ;	genAssign
   05BA C2 8D              2117 	clr	_TF0
                           2118 ;	Peephole 300	removed redundant label 00104$
   05BC 22                 2119 	ret
                           2120 ;------------------------------------------------------------
                           2121 ;Allocation info for local variables in function 'serial_init'
                           2122 ;------------------------------------------------------------
                           2123 ;------------------------------------------------------------
                           2124 ;	main.c:322: void serial_init()
                           2125 ;	-----------------------------------------
                           2126 ;	 function serial_init
                           2127 ;	-----------------------------------------
   05BD                    2128 _serial_init:
                           2129 ;	main.c:324: TMOD = 0X20;
                           2130 ;	genAssign
   05BD 75 89 20           2131 	mov	_TMOD,#0x20
                           2132 ;	main.c:325: SCON = 0X50;
                           2133 ;	genAssign
   05C0 75 98 50           2134 	mov	_SCON,#0x50
                           2135 ;	main.c:326: TH1 = 0XFD;
                           2136 ;	genAssign
   05C3 75 8D FD           2137 	mov	_TH1,#0xFD
                           2138 ;	main.c:327: TR1 = 1;
                           2139 ;	genAssign
   05C6 D2 8E              2140 	setb	_TR1
                           2141 ;	Peephole 300	removed redundant label 00101$
   05C8 22                 2142 	ret
                           2143 ;------------------------------------------------------------
                           2144 ;Allocation info for local variables in function 'putchar'
                           2145 ;------------------------------------------------------------
                           2146 ;c                         Allocated with name '_putchar_c_1_1'
                           2147 ;------------------------------------------------------------
                           2148 ;	main.c:329: void putchar (char c)
                           2149 ;	-----------------------------------------
                           2150 ;	 function putchar
                           2151 ;	-----------------------------------------
   05C9                    2152 _putchar:
                           2153 ;	genReceive
   05C9 E5 82              2154 	mov	a,dpl
   05CB 90s00r0F           2155 	mov	dptr,#_putchar_c_1_1
   05CE F0                 2156 	movx	@dptr,a
                           2157 ;	main.c:331: SBUF = c;    // load serial port with  transmit value
                           2158 ;	genAssign
   05CF 90s00r0F           2159 	mov	dptr,#_putchar_c_1_1
   05D2 E0                 2160 	movx	a,@dptr
   05D3 F5 99              2161 	mov	_SBUF,a
                           2162 ;	main.c:332: while (!TI);
   05D5                    2163 00101$:
                           2164 ;	genIfx
                           2165 ;	genIfxJump
                           2166 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2167 ;	main.c:333: TI = 0;    // clear TI flag
                           2168 ;	genAssign
                           2169 ;	Peephole 250.a	using atomic test and clear
   05D5 10 99 02           2170 	jbc	_TI,00108$
   05D8 80 FB              2171 	sjmp	00101$
   05DA                    2172 00108$:
                           2173 ;	Peephole 300	removed redundant label 00104$
   05DA 22                 2174 	ret
                           2175 ;------------------------------------------------------------
                           2176 ;Allocation info for local variables in function 'getchar'
                           2177 ;------------------------------------------------------------
                           2178 ;r                         Allocated with name '_getchar_r_1_1'
                           2179 ;------------------------------------------------------------
                           2180 ;	main.c:335: char getchar ()
                           2181 ;	-----------------------------------------
                           2182 ;	 function getchar
                           2183 ;	-----------------------------------------
   05DB                    2184 _getchar:
                           2185 ;	main.c:338: while (!RI);
   05DB                    2186 00101$:
                           2187 ;	genIfx
                           2188 ;	genIfxJump
                           2189 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2190 ;	main.c:339: RI = 0;
                           2191 ;	genAssign
                           2192 ;	Peephole 250.a	using atomic test and clear
   05DB 10 98 02           2193 	jbc	_RI,00108$
   05DE 80 FB              2194 	sjmp	00101$
   05E0                    2195 00108$:
                           2196 ;	main.c:340: r = SBUF;  // clear RI flag
                           2197 ;	genAssign
   05E0 AA 99              2198 	mov	r2,_SBUF
                           2199 ;	main.c:341: return r;    // return character from SBUF
                           2200 ;	genRet
   05E2 8A 82              2201 	mov	dpl,r2
                           2202 ;	Peephole 300	removed redundant label 00104$
   05E4 22                 2203 	ret
                           2204 ;------------------------------------------------------------
                           2205 ;Allocation info for local variables in function 'get_num'
                           2206 ;------------------------------------------------------------
                           2207 ;val                       Allocated with name '_get_num_val_1_1'
                           2208 ;i                         Allocated with name '_get_num_i_1_1'
                           2209 ;val1                      Allocated with name '_get_num_val1_1_1'
                           2210 ;------------------------------------------------------------
                           2211 ;	main.c:346: int get_num()
                           2212 ;	-----------------------------------------
                           2213 ;	 function get_num
                           2214 ;	-----------------------------------------
   05E5                    2215 _get_num:
                           2216 ;	main.c:349: unsigned int i=0;
                           2217 ;	genAssign
   05E5 90s00r1A           2218 	mov	dptr,#_get_num_i_1_1
   05E8 E4                 2219 	clr	a
   05E9 F0                 2220 	movx	@dptr,a
   05EA A3                 2221 	inc	dptr
   05EB F0                 2222 	movx	@dptr,a
                           2223 ;	main.c:350: uint16_t val1=0;
                           2224 ;	genAssign
   05EC 90s00r1C           2225 	mov	dptr,#_get_num_val1_1_1
   05EF E4                 2226 	clr	a
   05F0 F0                 2227 	movx	@dptr,a
   05F1 A3                 2228 	inc	dptr
   05F2 F0                 2229 	movx	@dptr,a
                           2230 ;	main.c:351: while(1)
   05F3                    2231 00116$:
                           2232 ;	main.c:353: val[i]=getchar();
                           2233 ;	genAssign
   05F3 90s00r1A           2234 	mov	dptr,#_get_num_i_1_1
   05F6 E0                 2235 	movx	a,@dptr
   05F7 FA                 2236 	mov	r2,a
   05F8 A3                 2237 	inc	dptr
   05F9 E0                 2238 	movx	a,@dptr
   05FA FB                 2239 	mov	r3,a
                           2240 ;	genPlus
                           2241 ;	Peephole 236.g	used r2 instead of ar2
   05FB EA                 2242 	mov	a,r2
   05FC 24r10              2243 	add	a,#_get_num_val_1_1
   05FE FC                 2244 	mov	r4,a
                           2245 ;	Peephole 236.g	used r3 instead of ar3
   05FF EB                 2246 	mov	a,r3
   0600 34s00              2247 	addc	a,#(_get_num_val_1_1 >> 8)
   0602 FD                 2248 	mov	r5,a
                           2249 ;	genCall
   0603 C0 02              2250 	push	ar2
   0605 C0 03              2251 	push	ar3
   0607 C0 04              2252 	push	ar4
   0609 C0 05              2253 	push	ar5
   060B 12s05rDB           2254 	lcall	_getchar
   060E AE 82              2255 	mov	r6,dpl
   0610 D0 05              2256 	pop	ar5
   0612 D0 04              2257 	pop	ar4
   0614 D0 03              2258 	pop	ar3
   0616 D0 02              2259 	pop	ar2
                           2260 ;	genPointerSet
                           2261 ;     genFarPointerSet
   0618 8C 82              2262 	mov	dpl,r4
   061A 8D 83              2263 	mov	dph,r5
   061C EE                 2264 	mov	a,r6
   061D F0                 2265 	movx	@dptr,a
                           2266 ;	main.c:354: if(val[i]=='\r')
                           2267 ;	genCmpEq
                           2268 ;	gencjneshort
                           2269 ;	Peephole 112.b	changed ljmp to sjmp
                           2270 ;	Peephole 198.b	optimized misc jump sequence
   061E BE 0D 15           2271 	cjne	r6,#0x0D,00113$
                           2272 ;	Peephole 200.b	removed redundant sjmp
                           2273 ;	Peephole 300	removed redundant label 00149$
                           2274 ;	Peephole 300	removed redundant label 00150$
                           2275 ;	main.c:356: val[i]='\0';
                           2276 ;	genPointerSet
                           2277 ;     genFarPointerSet
   0621 8C 82              2278 	mov	dpl,r4
   0623 8D 83              2279 	mov	dph,r5
                           2280 ;	Peephole 181	changed mov to clr
   0625 E4                 2281 	clr	a
   0626 F0                 2282 	movx	@dptr,a
                           2283 ;	main.c:357: putchar('\n');
                           2284 ;	genCall
   0627 75 82 0A           2285 	mov	dpl,#0x0A
   062A 12s05rC9           2286 	lcall	_putchar
                           2287 ;	main.c:358: putchar('\r');
                           2288 ;	genCall
   062D 75 82 0D           2289 	mov	dpl,#0x0D
   0630 12s05rC9           2290 	lcall	_putchar
                           2291 ;	main.c:359: break;
   0633 02s07r28           2292 	ljmp	00147$
   0636                    2293 00113$:
                           2294 ;	main.c:361: else if(val[i]==0x7f)
                           2295 ;	genPointerGet
                           2296 ;	genFarPointerGet
   0636 8C 82              2297 	mov	dpl,r4
   0638 8D 83              2298 	mov	dph,r5
   063A E0                 2299 	movx	a,@dptr
   063B FE                 2300 	mov	r6,a
                           2301 ;	genCmpEq
                           2302 ;	gencjneshort
                           2303 ;	Peephole 112.b	changed ljmp to sjmp
                           2304 ;	Peephole 198.b	optimized misc jump sequence
   063C BE 7F 1D           2305 	cjne	r6,#0x7F,00110$
                           2306 ;	Peephole 200.b	removed redundant sjmp
                           2307 ;	Peephole 300	removed redundant label 00151$
                           2308 ;	Peephole 300	removed redundant label 00152$
                           2309 ;	main.c:363: putchar(0x7f);
                           2310 ;	genCall
   063F 75 82 7F           2311 	mov	dpl,#0x7F
   0642 C0 02              2312 	push	ar2
   0644 C0 03              2313 	push	ar3
   0646 12s05rC9           2314 	lcall	_putchar
   0649 D0 03              2315 	pop	ar3
   064B D0 02              2316 	pop	ar2
                           2317 ;	main.c:364: i--;
                           2318 ;	genMinus
                           2319 ;	genMinusDec
   064D 1A                 2320 	dec	r2
   064E BA FF 01           2321 	cjne	r2,#0xff,00153$
   0651 1B                 2322 	dec	r3
   0652                    2323 00153$:
                           2324 ;	genAssign
   0652 90s00r1A           2325 	mov	dptr,#_get_num_i_1_1
   0655 EA                 2326 	mov	a,r2
   0656 F0                 2327 	movx	@dptr,a
   0657 A3                 2328 	inc	dptr
   0658 EB                 2329 	mov	a,r3
   0659 F0                 2330 	movx	@dptr,a
                           2331 ;	Peephole 112.b	changed ljmp to sjmp
   065A 80 97              2332 	sjmp	00116$
   065C                    2333 00110$:
                           2334 ;	main.c:366: else if((val[i]>='0'&&val[i]<='9')|| (val[i]>='a'&&val[i]<='f')||(val[i]>='A'&&val[i]<='F'))
                           2335 ;	genPointerGet
                           2336 ;	genFarPointerGet
   065C 8C 82              2337 	mov	dpl,r4
   065E 8D 83              2338 	mov	dph,r5
   0660 E0                 2339 	movx	a,@dptr
                           2340 ;	genCmpLt
                           2341 ;	genCmp
   0661 FA                 2342 	mov	r2,a
   0662 C3                 2343 	clr	c
                           2344 ;	Peephole 106	removed redundant mov
   0663 64 80              2345 	xrl	a,#0x80
   0665 94 B0              2346 	subb	a,#0xb0
                           2347 ;	genIfxJump
                           2348 ;	Peephole 112.b	changed ljmp to sjmp
                           2349 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0667 40 12              2350 	jc	00106$
                           2351 ;	Peephole 300	removed redundant label 00154$
                           2352 ;	genPointerGet
                           2353 ;	genFarPointerGet
   0669 8C 82              2354 	mov	dpl,r4
   066B 8D 83              2355 	mov	dph,r5
   066D E0                 2356 	movx	a,@dptr
   066E FC                 2357 	mov	r4,a
                           2358 ;	genCmpGt
                           2359 ;	genCmp
   066F C3                 2360 	clr	c
                           2361 ;	Peephole 159	avoided xrl during execution
   0670 74 B9              2362 	mov	a,#(0x39 ^ 0x80)
   0672 8C F0              2363 	mov	b,r4
   0674 63 F0 80           2364 	xrl	b,#0x80
   0677 95 F0              2365 	subb	a,b
                           2366 ;	genIfxJump
                           2367 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0679 50 4C              2368 	jnc	00101$
                           2369 ;	Peephole 300	removed redundant label 00155$
   067B                    2370 00106$:
                           2371 ;	genAssign
   067B 90s00r1A           2372 	mov	dptr,#_get_num_i_1_1
   067E E0                 2373 	movx	a,@dptr
   067F FA                 2374 	mov	r2,a
   0680 A3                 2375 	inc	dptr
   0681 E0                 2376 	movx	a,@dptr
   0682 FB                 2377 	mov	r3,a
                           2378 ;	genPlus
                           2379 ;	Peephole 236.g	used r2 instead of ar2
   0683 EA                 2380 	mov	a,r2
   0684 24r10              2381 	add	a,#_get_num_val_1_1
   0686 F5 82              2382 	mov	dpl,a
                           2383 ;	Peephole 236.g	used r3 instead of ar3
   0688 EB                 2384 	mov	a,r3
   0689 34s00              2385 	addc	a,#(_get_num_val_1_1 >> 8)
   068B F5 83              2386 	mov	dph,a
                           2387 ;	genPointerGet
                           2388 ;	genFarPointerGet
   068D E0                 2389 	movx	a,@dptr
                           2390 ;	genCmpLt
                           2391 ;	genCmp
   068E FA                 2392 	mov	r2,a
   068F C3                 2393 	clr	c
                           2394 ;	Peephole 106	removed redundant mov
   0690 64 80              2395 	xrl	a,#0x80
   0692 94 E1              2396 	subb	a,#0xe1
                           2397 ;	genIfxJump
                           2398 ;	Peephole 112.b	changed ljmp to sjmp
                           2399 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2400 ;	genCmpGt
                           2401 ;	genCmp
   0694 40 0B              2402 	jc	00108$
                           2403 ;	Peephole 300	removed redundant label 00156$
                           2404 ;	Peephole 256.a	removed redundant clr c
                           2405 ;	Peephole 159	avoided xrl during execution
   0696 74 E6              2406 	mov	a,#(0x66 ^ 0x80)
   0698 8A F0              2407 	mov	b,r2
   069A 63 F0 80           2408 	xrl	b,#0x80
   069D 95 F0              2409 	subb	a,b
                           2410 ;	genIfxJump
                           2411 ;	Peephole 108.a	removed ljmp by inverse jump logic
   069F 50 26              2412 	jnc	00101$
                           2413 ;	Peephole 300	removed redundant label 00157$
   06A1                    2414 00108$:
                           2415 ;	genAssign
   06A1 90s00r1A           2416 	mov	dptr,#_get_num_i_1_1
   06A4 E0                 2417 	movx	a,@dptr
   06A5 FA                 2418 	mov	r2,a
   06A6 A3                 2419 	inc	dptr
   06A7 E0                 2420 	movx	a,@dptr
   06A8 FB                 2421 	mov	r3,a
                           2422 ;	genPlus
                           2423 ;	Peephole 236.g	used r2 instead of ar2
   06A9 EA                 2424 	mov	a,r2
   06AA 24r10              2425 	add	a,#_get_num_val_1_1
   06AC F5 82              2426 	mov	dpl,a
                           2427 ;	Peephole 236.g	used r3 instead of ar3
   06AE EB                 2428 	mov	a,r3
   06AF 34s00              2429 	addc	a,#(_get_num_val_1_1 >> 8)
   06B1 F5 83              2430 	mov	dph,a
                           2431 ;	genPointerGet
                           2432 ;	genFarPointerGet
   06B3 E0                 2433 	movx	a,@dptr
                           2434 ;	genCmpLt
                           2435 ;	genCmp
   06B4 FA                 2436 	mov	r2,a
   06B5 C3                 2437 	clr	c
                           2438 ;	Peephole 106	removed redundant mov
   06B6 64 80              2439 	xrl	a,#0x80
   06B8 94 C1              2440 	subb	a,#0xc1
                           2441 ;	genIfxJump
                           2442 ;	Peephole 112.b	changed ljmp to sjmp
                           2443 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2444 ;	genCmpGt
                           2445 ;	genCmp
   06BA 40 3A              2446 	jc	00102$
                           2447 ;	Peephole 300	removed redundant label 00158$
                           2448 ;	Peephole 256.a	removed redundant clr c
                           2449 ;	Peephole 159	avoided xrl during execution
   06BC 74 C6              2450 	mov	a,#(0x46 ^ 0x80)
   06BE 8A F0              2451 	mov	b,r2
   06C0 63 F0 80           2452 	xrl	b,#0x80
   06C3 95 F0              2453 	subb	a,b
                           2454 ;	genIfxJump
                           2455 ;	Peephole 112.b	changed ljmp to sjmp
                           2456 ;	Peephole 160.a	removed sjmp by inverse jump logic
   06C5 40 2F              2457 	jc	00102$
                           2458 ;	Peephole 300	removed redundant label 00159$
   06C7                    2459 00101$:
                           2460 ;	main.c:368: putchar(val[i]);
                           2461 ;	genAssign
   06C7 90s00r1A           2462 	mov	dptr,#_get_num_i_1_1
   06CA E0                 2463 	movx	a,@dptr
   06CB FA                 2464 	mov	r2,a
   06CC A3                 2465 	inc	dptr
   06CD E0                 2466 	movx	a,@dptr
   06CE FB                 2467 	mov	r3,a
                           2468 ;	genPlus
                           2469 ;	Peephole 236.g	used r2 instead of ar2
   06CF EA                 2470 	mov	a,r2
   06D0 24r10              2471 	add	a,#_get_num_val_1_1
   06D2 F5 82              2472 	mov	dpl,a
                           2473 ;	Peephole 236.g	used r3 instead of ar3
   06D4 EB                 2474 	mov	a,r3
   06D5 34s00              2475 	addc	a,#(_get_num_val_1_1 >> 8)
   06D7 F5 83              2476 	mov	dph,a
                           2477 ;	genPointerGet
                           2478 ;	genFarPointerGet
   06D9 E0                 2479 	movx	a,@dptr
                           2480 ;	genCall
   06DA FC                 2481 	mov	r4,a
                           2482 ;	Peephole 244.c	loading dpl from a instead of r4
   06DB F5 82              2483 	mov	dpl,a
   06DD C0 02              2484 	push	ar2
   06DF C0 03              2485 	push	ar3
   06E1 12s05rC9           2486 	lcall	_putchar
   06E4 D0 03              2487 	pop	ar3
   06E6 D0 02              2488 	pop	ar2
                           2489 ;	main.c:369: i+=1;
                           2490 ;	genPlus
   06E8 90s00r1A           2491 	mov	dptr,#_get_num_i_1_1
                           2492 ;     genPlusIncr
   06EB 74 01              2493 	mov	a,#0x01
                           2494 ;	Peephole 236.a	used r2 instead of ar2
   06ED 2A                 2495 	add	a,r2
   06EE F0                 2496 	movx	@dptr,a
                           2497 ;	Peephole 181	changed mov to clr
   06EF E4                 2498 	clr	a
                           2499 ;	Peephole 236.b	used r3 instead of ar3
   06F0 3B                 2500 	addc	a,r3
   06F1 A3                 2501 	inc	dptr
   06F2 F0                 2502 	movx	@dptr,a
   06F3 02s05rF3           2503 	ljmp	00116$
   06F6                    2504 00102$:
                           2505 ;	main.c:372: putchar(val[i]);
                           2506 ;	genAssign
   06F6 90s00r1A           2507 	mov	dptr,#_get_num_i_1_1
   06F9 E0                 2508 	movx	a,@dptr
   06FA FA                 2509 	mov	r2,a
   06FB A3                 2510 	inc	dptr
   06FC E0                 2511 	movx	a,@dptr
   06FD FB                 2512 	mov	r3,a
                           2513 ;	genPlus
                           2514 ;	Peephole 236.g	used r2 instead of ar2
   06FE EA                 2515 	mov	a,r2
   06FF 24r10              2516 	add	a,#_get_num_val_1_1
   0701 F5 82              2517 	mov	dpl,a
                           2518 ;	Peephole 236.g	used r3 instead of ar3
   0703 EB                 2519 	mov	a,r3
   0704 34s00              2520 	addc	a,#(_get_num_val_1_1 >> 8)
   0706 F5 83              2521 	mov	dph,a
                           2522 ;	genPointerGet
                           2523 ;	genFarPointerGet
   0708 E0                 2524 	movx	a,@dptr
                           2525 ;	genCall
   0709 FA                 2526 	mov	r2,a
                           2527 ;	Peephole 244.c	loading dpl from a instead of r2
   070A F5 82              2528 	mov	dpl,a
   070C 12s05rC9           2529 	lcall	_putchar
                           2530 ;	main.c:373: printf_tiny("not valid enter again \n\r");
                           2531 ;	genIpush
   070F 74r6E              2532 	mov	a,#__str_15
   0711 C0 E0              2533 	push	acc
   0713 74s01              2534 	mov	a,#(__str_15 >> 8)
   0715 C0 E0              2535 	push	acc
                           2536 ;	genCall
   0717 12s00r00           2537 	lcall	_printf_tiny
   071A 15 81              2538 	dec	sp
   071C 15 81              2539 	dec	sp
                           2540 ;	main.c:374: i=0;
                           2541 ;	genAssign
   071E 90s00r1A           2542 	mov	dptr,#_get_num_i_1_1
   0721 E4                 2543 	clr	a
   0722 F0                 2544 	movx	@dptr,a
   0723 A3                 2545 	inc	dptr
   0724 F0                 2546 	movx	@dptr,a
   0725 02s05rF3           2547 	ljmp	00116$
                           2548 ;	main.c:378: while(val[i]!='\0')
   0728                    2549 00147$:
                           2550 ;	genAssign
   0728 7A 00              2551 	mov	r2,#0x00
   072A 7B 00              2552 	mov	r3,#0x00
   072C                    2553 00129$:
                           2554 ;	genPlus
                           2555 ;	Peephole 236.g	used r2 instead of ar2
   072C EA                 2556 	mov	a,r2
   072D 24r10              2557 	add	a,#_get_num_val_1_1
   072F F5 82              2558 	mov	dpl,a
                           2559 ;	Peephole 236.g	used r3 instead of ar3
   0731 EB                 2560 	mov	a,r3
   0732 34s00              2561 	addc	a,#(_get_num_val_1_1 >> 8)
   0734 F5 83              2562 	mov	dph,a
                           2563 ;	genPointerGet
                           2564 ;	genFarPointerGet
   0736 E0                 2565 	movx	a,@dptr
   0737 FC                 2566 	mov	r4,a
                           2567 ;	genCmpEq
                           2568 ;	gencjneshort
   0738 BC 00 03           2569 	cjne	r4,#0x00,00160$
   073B 02s08r14           2570 	ljmp	00131$
   073E                    2571 00160$:
                           2572 ;	main.c:380: if(val[i]>='0'&&val[i]<='9')
                           2573 ;	genCmpLt
                           2574 ;	genCmp
   073E C3                 2575 	clr	c
   073F EC                 2576 	mov	a,r4
   0740 64 80              2577 	xrl	a,#0x80
   0742 94 B0              2578 	subb	a,#0xb0
                           2579 ;	genIfxJump
                           2580 ;	Peephole 112.b	changed ljmp to sjmp
                           2581 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2582 ;	genCmpGt
                           2583 ;	genCmp
   0744 40 3A              2584 	jc	00126$
                           2585 ;	Peephole 300	removed redundant label 00161$
                           2586 ;	Peephole 256.a	removed redundant clr c
                           2587 ;	Peephole 159	avoided xrl during execution
   0746 74 B9              2588 	mov	a,#(0x39 ^ 0x80)
   0748 8C F0              2589 	mov	b,r4
   074A 63 F0 80           2590 	xrl	b,#0x80
   074D 95 F0              2591 	subb	a,b
                           2592 ;	genIfxJump
                           2593 ;	Peephole 112.b	changed ljmp to sjmp
                           2594 ;	Peephole 160.a	removed sjmp by inverse jump logic
   074F 40 2F              2595 	jc	00126$
                           2596 ;	Peephole 300	removed redundant label 00162$
                           2597 ;	main.c:382: val1 = (val1*16)+(val[i]-48);
                           2598 ;	genAssign
   0751 90s00r1C           2599 	mov	dptr,#_get_num_val1_1_1
   0754 E0                 2600 	movx	a,@dptr
   0755 FD                 2601 	mov	r5,a
   0756 A3                 2602 	inc	dptr
   0757 E0                 2603 	movx	a,@dptr
                           2604 ;	genLeftShift
                           2605 ;	genLeftShiftLiteral
                           2606 ;	genlshTwo
   0758 FE                 2607 	mov	r6,a
                           2608 ;	Peephole 105	removed redundant mov
   0759 C4                 2609 	swap	a
   075A 54 F0              2610 	anl	a,#0xf0
   075C CD                 2611 	xch	a,r5
   075D C4                 2612 	swap	a
   075E CD                 2613 	xch	a,r5
   075F 6D                 2614 	xrl	a,r5
   0760 CD                 2615 	xch	a,r5
   0761 54 F0              2616 	anl	a,#0xf0
   0763 CD                 2617 	xch	a,r5
   0764 6D                 2618 	xrl	a,r5
   0765 FE                 2619 	mov	r6,a
                           2620 ;	genCast
   0766 EC                 2621 	mov	a,r4
   0767 33                 2622 	rlc	a
   0768 95 E0              2623 	subb	a,acc
   076A FF                 2624 	mov	r7,a
                           2625 ;	genMinus
   076B EC                 2626 	mov	a,r4
   076C 24 D0              2627 	add	a,#0xd0
   076E FC                 2628 	mov	r4,a
   076F EF                 2629 	mov	a,r7
   0770 34 FF              2630 	addc	a,#0xff
   0772 FF                 2631 	mov	r7,a
                           2632 ;	genPlus
   0773 90s00r1C           2633 	mov	dptr,#_get_num_val1_1_1
                           2634 ;	Peephole 236.g	used r4 instead of ar4
   0776 EC                 2635 	mov	a,r4
                           2636 ;	Peephole 236.a	used r5 instead of ar5
   0777 2D                 2637 	add	a,r5
   0778 F0                 2638 	movx	@dptr,a
                           2639 ;	Peephole 236.g	used r7 instead of ar7
   0779 EF                 2640 	mov	a,r7
                           2641 ;	Peephole 236.b	used r6 instead of ar6
   077A 3E                 2642 	addc	a,r6
   077B A3                 2643 	inc	dptr
   077C F0                 2644 	movx	@dptr,a
   077D 02s08r0C           2645 	ljmp	00127$
   0780                    2646 00126$:
                           2647 ;	main.c:384: else if(val[i]>='A'&&val[i]<='F')
                           2648 ;	genPlus
                           2649 ;	Peephole 236.g	used r2 instead of ar2
   0780 EA                 2650 	mov	a,r2
   0781 24r10              2651 	add	a,#_get_num_val_1_1
   0783 F5 82              2652 	mov	dpl,a
                           2653 ;	Peephole 236.g	used r3 instead of ar3
   0785 EB                 2654 	mov	a,r3
   0786 34s00              2655 	addc	a,#(_get_num_val_1_1 >> 8)
   0788 F5 83              2656 	mov	dph,a
                           2657 ;	genPointerGet
                           2658 ;	genFarPointerGet
   078A E0                 2659 	movx	a,@dptr
                           2660 ;	genCmpLt
                           2661 ;	genCmp
   078B FC                 2662 	mov	r4,a
   078C C3                 2663 	clr	c
                           2664 ;	Peephole 106	removed redundant mov
   078D 64 80              2665 	xrl	a,#0x80
   078F 94 C1              2666 	subb	a,#0xc1
                           2667 ;	genIfxJump
                           2668 ;	Peephole 112.b	changed ljmp to sjmp
                           2669 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2670 ;	genCmpGt
                           2671 ;	genCmp
   0791 40 3A              2672 	jc	00122$
                           2673 ;	Peephole 300	removed redundant label 00163$
                           2674 ;	Peephole 256.a	removed redundant clr c
                           2675 ;	Peephole 159	avoided xrl during execution
   0793 74 C6              2676 	mov	a,#(0x46 ^ 0x80)
   0795 8C F0              2677 	mov	b,r4
   0797 63 F0 80           2678 	xrl	b,#0x80
   079A 95 F0              2679 	subb	a,b
                           2680 ;	genIfxJump
                           2681 ;	Peephole 112.b	changed ljmp to sjmp
                           2682 ;	Peephole 160.a	removed sjmp by inverse jump logic
   079C 40 2F              2683 	jc	00122$
                           2684 ;	Peephole 300	removed redundant label 00164$
                           2685 ;	main.c:386: val1 = (val1*16)+(val[i]-55);
                           2686 ;	genAssign
   079E 90s00r1C           2687 	mov	dptr,#_get_num_val1_1_1
   07A1 E0                 2688 	movx	a,@dptr
   07A2 FD                 2689 	mov	r5,a
   07A3 A3                 2690 	inc	dptr
   07A4 E0                 2691 	movx	a,@dptr
                           2692 ;	genLeftShift
                           2693 ;	genLeftShiftLiteral
                           2694 ;	genlshTwo
   07A5 FE                 2695 	mov	r6,a
                           2696 ;	Peephole 105	removed redundant mov
   07A6 C4                 2697 	swap	a
   07A7 54 F0              2698 	anl	a,#0xf0
   07A9 CD                 2699 	xch	a,r5
   07AA C4                 2700 	swap	a
   07AB CD                 2701 	xch	a,r5
   07AC 6D                 2702 	xrl	a,r5
   07AD CD                 2703 	xch	a,r5
   07AE 54 F0              2704 	anl	a,#0xf0
   07B0 CD                 2705 	xch	a,r5
   07B1 6D                 2706 	xrl	a,r5
   07B2 FE                 2707 	mov	r6,a
                           2708 ;	genCast
                           2709 ;	peephole 177.h	optimized mov sequence
   07B3 EC                 2710 	mov	a,r4
                           2711 ;	Peephole 236.i	used r7 instead of ar7
   07B4 FF                 2712 	mov	r7,a
   07B5 33                 2713 	rlc	a
   07B6 95 E0              2714 	subb	a,acc
   07B8 F8                 2715 	mov	r0,a
                           2716 ;	genMinus
   07B9 EF                 2717 	mov	a,r7
   07BA 24 C9              2718 	add	a,#0xc9
   07BC FF                 2719 	mov	r7,a
   07BD E8                 2720 	mov	a,r0
   07BE 34 FF              2721 	addc	a,#0xff
   07C0 F8                 2722 	mov	r0,a
                           2723 ;	genPlus
   07C1 90s00r1C           2724 	mov	dptr,#_get_num_val1_1_1
                           2725 ;	Peephole 236.g	used r7 instead of ar7
   07C4 EF                 2726 	mov	a,r7
                           2727 ;	Peephole 236.a	used r5 instead of ar5
   07C5 2D                 2728 	add	a,r5
   07C6 F0                 2729 	movx	@dptr,a
                           2730 ;	Peephole 236.g	used r0 instead of ar0
   07C7 E8                 2731 	mov	a,r0
                           2732 ;	Peephole 236.b	used r6 instead of ar6
   07C8 3E                 2733 	addc	a,r6
   07C9 A3                 2734 	inc	dptr
   07CA F0                 2735 	movx	@dptr,a
                           2736 ;	Peephole 112.b	changed ljmp to sjmp
   07CB 80 3F              2737 	sjmp	00127$
   07CD                    2738 00122$:
                           2739 ;	main.c:388: else if(val[i]>='a'&&val[i]<='f')
                           2740 ;	genCmpLt
                           2741 ;	genCmp
   07CD C3                 2742 	clr	c
   07CE EC                 2743 	mov	a,r4
   07CF 64 80              2744 	xrl	a,#0x80
   07D1 94 E1              2745 	subb	a,#0xe1
                           2746 ;	genIfxJump
                           2747 ;	Peephole 112.b	changed ljmp to sjmp
                           2748 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2749 ;	genCmpGt
                           2750 ;	genCmp
   07D3 40 37              2751 	jc	00127$
                           2752 ;	Peephole 300	removed redundant label 00165$
                           2753 ;	Peephole 256.a	removed redundant clr c
                           2754 ;	Peephole 159	avoided xrl during execution
   07D5 74 E6              2755 	mov	a,#(0x66 ^ 0x80)
   07D7 8C F0              2756 	mov	b,r4
   07D9 63 F0 80           2757 	xrl	b,#0x80
   07DC 95 F0              2758 	subb	a,b
                           2759 ;	genIfxJump
                           2760 ;	Peephole 112.b	changed ljmp to sjmp
                           2761 ;	Peephole 160.a	removed sjmp by inverse jump logic
   07DE 40 2C              2762 	jc	00127$
                           2763 ;	Peephole 300	removed redundant label 00166$
                           2764 ;	main.c:390: val1 = (val1*16)+(val[i]-87);
                           2765 ;	genAssign
   07E0 90s00r1C           2766 	mov	dptr,#_get_num_val1_1_1
   07E3 E0                 2767 	movx	a,@dptr
   07E4 FD                 2768 	mov	r5,a
   07E5 A3                 2769 	inc	dptr
   07E6 E0                 2770 	movx	a,@dptr
                           2771 ;	genLeftShift
                           2772 ;	genLeftShiftLiteral
                           2773 ;	genlshTwo
   07E7 FE                 2774 	mov	r6,a
                           2775 ;	Peephole 105	removed redundant mov
   07E8 C4                 2776 	swap	a
   07E9 54 F0              2777 	anl	a,#0xf0
   07EB CD                 2778 	xch	a,r5
   07EC C4                 2779 	swap	a
   07ED CD                 2780 	xch	a,r5
   07EE 6D                 2781 	xrl	a,r5
   07EF CD                 2782 	xch	a,r5
   07F0 54 F0              2783 	anl	a,#0xf0
   07F2 CD                 2784 	xch	a,r5
   07F3 6D                 2785 	xrl	a,r5
   07F4 FE                 2786 	mov	r6,a
                           2787 ;	genCast
   07F5 EC                 2788 	mov	a,r4
   07F6 33                 2789 	rlc	a
   07F7 95 E0              2790 	subb	a,acc
   07F9 FF                 2791 	mov	r7,a
                           2792 ;	genMinus
   07FA EC                 2793 	mov	a,r4
   07FB 24 A9              2794 	add	a,#0xa9
   07FD FC                 2795 	mov	r4,a
   07FE EF                 2796 	mov	a,r7
   07FF 34 FF              2797 	addc	a,#0xff
   0801 FF                 2798 	mov	r7,a
                           2799 ;	genPlus
   0802 90s00r1C           2800 	mov	dptr,#_get_num_val1_1_1
                           2801 ;	Peephole 236.g	used r4 instead of ar4
   0805 EC                 2802 	mov	a,r4
                           2803 ;	Peephole 236.a	used r5 instead of ar5
   0806 2D                 2804 	add	a,r5
   0807 F0                 2805 	movx	@dptr,a
                           2806 ;	Peephole 236.g	used r7 instead of ar7
   0808 EF                 2807 	mov	a,r7
                           2808 ;	Peephole 236.b	used r6 instead of ar6
   0809 3E                 2809 	addc	a,r6
   080A A3                 2810 	inc	dptr
   080B F0                 2811 	movx	@dptr,a
   080C                    2812 00127$:
                           2813 ;	main.c:392: i++;
                           2814 ;	genPlus
                           2815 ;     genPlusIncr
   080C 0A                 2816 	inc	r2
   080D BA 00 01           2817 	cjne	r2,#0x00,00167$
   0810 0B                 2818 	inc	r3
   0811                    2819 00167$:
   0811 02s07r2C           2820 	ljmp	00129$
   0814                    2821 00131$:
                           2822 ;	main.c:394: return val1;
                           2823 ;	genAssign
   0814 90s00r1C           2824 	mov	dptr,#_get_num_val1_1_1
   0817 E0                 2825 	movx	a,@dptr
   0818 FA                 2826 	mov	r2,a
   0819 A3                 2827 	inc	dptr
   081A E0                 2828 	movx	a,@dptr
                           2829 ;	genRet
                           2830 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   081B 8A 82              2831 	mov	dpl,r2
   081D F5 83              2832 	mov	dph,a
                           2833 ;	Peephole 300	removed redundant label 00132$
   081F 22                 2834 	ret
                           2835 ;------------------------------------------------------------
                           2836 ;Allocation info for local variables in function 'External10_ISR'
                           2837 ;------------------------------------------------------------
                           2838 ;ctr                       Allocated with name '_External10_ISR_ctr_1_1'
                           2839 ;a                         Allocated with name '_External10_ISR_a_1_1'
                           2840 ;------------------------------------------------------------
                           2841 ;	main.c:398: void External10_ISR() interrupt 0 // checkking interrupt from IO expander
                           2842 ;	-----------------------------------------
                           2843 ;	 function External10_ISR
                           2844 ;	-----------------------------------------
   0820                    2845 _External10_ISR:
   0820 C0 E0              2846 	push	acc
   0822 C0 F0              2847 	push	b
   0824 C0 82              2848 	push	dpl
   0826 C0 83              2849 	push	dph
   0828 C0 02              2850 	push	(0+2)
   082A C0 03              2851 	push	(0+3)
   082C C0 04              2852 	push	(0+4)
   082E C0 05              2853 	push	(0+5)
   0830 C0 06              2854 	push	(0+6)
   0832 C0 07              2855 	push	(0+7)
   0834 C0 00              2856 	push	(0+0)
   0836 C0 01              2857 	push	(0+1)
   0838 C0 D0              2858 	push	psw
   083A 75 D0 00           2859 	mov	psw,#0x00
                           2860 ;	main.c:401: Start();
                           2861 ;	genCall
   083D 12s02r08           2862 	lcall	_Start
                           2863 ;	main.c:402: write_i2c(0x41);
                           2864 ;	genCall
   0840 75 82 41           2865 	mov	dpl,#0x41
   0843 12s02r5B           2866 	lcall	_write_i2c
                           2867 ;	main.c:403: a=ack();
                           2868 ;	genCall
   0846 12s05r78           2869 	lcall	_ack
   0849 AA 82              2870 	mov	r2,dpl
   084B AB 83              2871 	mov	r3,dph
                           2872 ;	genCast
                           2873 ;	main.c:404: if(a==1)
                           2874 ;	genCmpEq
                           2875 ;	gencjneshort
                           2876 ;	Peephole 112.b	changed ljmp to sjmp
                           2877 ;	Peephole 198.b	optimized misc jump sequence
   084D BA 01 3F           2878 	cjne	r2,#0x01,00105$
                           2879 ;	Peephole 200.b	removed redundant sjmp
                           2880 ;	Peephole 300	removed redundant label 00109$
                           2881 ;	Peephole 300	removed redundant label 00110$
                           2882 ;	main.c:406: ctr=read_i2c();
                           2883 ;	genCall
   0850 12s02r20           2884 	lcall	_read_i2c
   0853 AA 82              2885 	mov	r2,dpl
                           2886 ;	main.c:407: Stop();
                           2887 ;	genCall
   0855 C0 02              2888 	push	ar2
   0857 12s02r14           2889 	lcall	_Stop
   085A D0 02              2890 	pop	ar2
                           2891 ;	main.c:408: ctr=((ctr^0x01)<<1)|0xFD;
                           2892 ;	genXor
   085C 63 02 01           2893 	xrl	ar2,#0x01
                           2894 ;	genLeftShift
                           2895 ;	genLeftShiftLiteral
                           2896 ;	genlshOne
   085F EA                 2897 	mov	a,r2
                           2898 ;	Peephole 254	optimized left shift
   0860 2A                 2899 	add	a,r2
   0861 FA                 2900 	mov	r2,a
                           2901 ;	genOr
   0862 43 02 FD           2902 	orl	ar2,#0xFD
                           2903 ;	main.c:409: Start();
                           2904 ;	genCall
   0865 C0 02              2905 	push	ar2
   0867 12s02r08           2906 	lcall	_Start
   086A D0 02              2907 	pop	ar2
                           2908 ;	main.c:410: write_i2c(0x40);
                           2909 ;	genCall
   086C 75 82 40           2910 	mov	dpl,#0x40
   086F C0 02              2911 	push	ar2
   0871 12s02r5B           2912 	lcall	_write_i2c
   0874 D0 02              2913 	pop	ar2
                           2914 ;	main.c:411: a=ack();
                           2915 ;	genCall
   0876 C0 02              2916 	push	ar2
   0878 12s05r78           2917 	lcall	_ack
   087B AB 82              2918 	mov	r3,dpl
   087D AC 83              2919 	mov	r4,dph
   087F D0 02              2920 	pop	ar2
                           2921 ;	genCast
                           2922 ;	main.c:412: if(a==1)
                           2923 ;	genCmpEq
                           2924 ;	gencjneshort
                           2925 ;	Peephole 112.b	changed ljmp to sjmp
                           2926 ;	Peephole 198.b	optimized misc jump sequence
   0881 BB 01 0B           2927 	cjne	r3,#0x01,00105$
                           2928 ;	Peephole 200.b	removed redundant sjmp
                           2929 ;	Peephole 300	removed redundant label 00111$
                           2930 ;	Peephole 300	removed redundant label 00112$
                           2931 ;	main.c:414: write_i2c(ctr);
                           2932 ;	genCall
   0884 8A 82              2933 	mov	dpl,r2
   0886 12s02r5B           2934 	lcall	_write_i2c
                           2935 ;	main.c:415: a=ack();
                           2936 ;	genCall
   0889 12s05r78           2937 	lcall	_ack
                           2938 ;	main.c:416: Stop();
                           2939 ;	genCall
   088C 12s02r14           2940 	lcall	_Stop
   088F                    2941 00105$:
   088F D0 D0              2942 	pop	psw
   0891 D0 01              2943 	pop	(0+1)
   0893 D0 00              2944 	pop	(0+0)
   0895 D0 07              2945 	pop	(0+7)
   0897 D0 06              2946 	pop	(0+6)
   0899 D0 05              2947 	pop	(0+5)
   089B D0 04              2948 	pop	(0+4)
   089D D0 03              2949 	pop	(0+3)
   089F D0 02              2950 	pop	(0+2)
   08A1 D0 83              2951 	pop	dph
   08A3 D0 82              2952 	pop	dpl
   08A5 D0 F0              2953 	pop	b
   08A7 D0 E0              2954 	pop	acc
   08A9 32                 2955 	reti
                           2956 	.area CSEG    (CODE)
                           2957 	.area CONST   (CODE)
   0000                    2958 __str_0:
   0000 0A                 2959 	.db 0x0A
   0001 0D                 2960 	.db 0x0D
   0002 50 4C 45 41 53 45  2961 	.ascii "PLEASE ENTER AMONGST FOLLOWING OPTIONS (JUST PRESS OPTION "
        20 45 4E 54 45 52
        20 41 4D 4F 4E 47
        53 54 20 46 4F 4C
        4C 4F 57 49 4E 47
        20 4F 50 54 49 4F
        4E 53 20 28 4A 55
        53 54 20 50 52 45
        53 53 20 4F 50 54
        49 4F 4E 20
   003C 4E 55 4D 42 45 52  2962 	.ascii "NUMBER):--"
        29 3A 2D 2D
   0046 0A                 2963 	.db 0x0A
   0047 0D                 2964 	.db 0x0D
   0048 31 3E 52 45 41 44  2965 	.ascii "1>READ"
   004E 0A                 2966 	.db 0x0A
   004F 0D                 2967 	.db 0x0D
   0050 32 3E 57 52 49 54  2968 	.ascii "2>WRITE"
        45
   0057 0A                 2969 	.db 0x0A
   0058 0D                 2970 	.db 0x0D
   0059 33 3E 52 45 41 44  2971 	.ascii "3>READ CONTINOUS"
        20 43 4F 4E 54 49
        4E 4F 55 53
   0069 0A                 2972 	.db 0x0A
   006A 0D                 2973 	.db 0x0D
   006B 34 3E 52 45 53 45  2974 	.ascii "4>RESET"
        54
   0072 0A                 2975 	.db 0x0A
   0073 0D                 2976 	.db 0x0D
   0074 00                 2977 	.db 0x00
   0075                    2978 __str_1:
   0075 65 6E 74 65 72 65  2979 	.ascii "entered choice: "
        64 20 63 68 6F 69
        63 65 3A 20
   0085 00                 2980 	.db 0x00
   0086                    2981 __str_2:
   0086 0A                 2982 	.db 0x0A
   0087 0D                 2983 	.db 0x0D
   0088 65 6E 74 65 72 20  2984 	.ascii "enter read address"
        72 65 61 64 20 61
        64 64 72 65 73 73
   009A 00                 2985 	.db 0x00
   009B                    2986 __str_3:
   009B 69 6E 76 61 6C 69  2987 	.ascii "invalid address , enter again "
        64 20 61 64 64 72
        65 73 73 20 2C 20
        65 6E 74 65 72 20
        61 67 61 69 6E 20
   00B9 00                 2988 	.db 0x00
   00BA                    2989 __str_4:
   00BA 0A                 2990 	.db 0x0A
   00BB 0D                 2991 	.db 0x0D
   00BC 65 6E 74 65 72 20  2992 	.ascii "enter address"
        61 64 64 72 65 73
        73
   00C9 00                 2993 	.db 0x00
   00CA                    2994 __str_5:
   00CA 0A                 2995 	.db 0x0A
   00CB 0D                 2996 	.db 0x0D
   00CC 65 6E 74 65 72 20  2997 	.ascii "enter data"
        64 61 74 61
   00D6 00                 2998 	.db 0x00
   00D7                    2999 __str_6:
   00D7 64 61 74 61 20 6F  3000 	.ascii "data out of range, enter again "
        75 74 20 6F 66 20
        72 61 6E 67 65 2C
        20 65 6E 74 65 72
        20 61 67 61 69 6E
        20
   00F6 00                 3001 	.db 0x00
   00F7                    3002 __str_7:
   00F7 0A                 3003 	.db 0x0A
   00F8 0D                 3004 	.db 0x0D
   00F9 65 6E 74 65 72 20  3005 	.ascii "enter strt address"
        73 74 72 74 20 61
        64 64 72 65 73 73
   010B 00                 3006 	.db 0x00
   010C                    3007 __str_8:
   010C 0A                 3008 	.db 0x0A
   010D 0D                 3009 	.db 0x0D
   010E 65 6E 74 65 72 20  3010 	.ascii "enter end address"
        65 6E 64 20 61 64
        64 72 65 73 73
   011F 00                 3011 	.db 0x00
   0120                    3012 __str_9:
   0120 69 6E 76 61 6C 69  3013 	.ascii "invalid!"
        64 21
   0128 00                 3014 	.db 0x00
   0129                    3015 __str_10:
   0129 0A                 3016 	.db 0x0A
   012A 0A                 3017 	.db 0x0A
   012B 0D                 3018 	.db 0x0D
   012C 50 4C 45 41 53 45  3019 	.ascii "PLEASE ENTER VALID OPTION!!"
        20 45 4E 54 45 52
        20 56 41 4C 49 44
        20 4F 50 54 49 4F
        4E 21 21
   0147 0A                 3020 	.db 0x0A
   0148 0A                 3021 	.db 0x0A
   0149 0A                 3022 	.db 0x0A
   014A 0A                 3023 	.db 0x0A
   014B 0A                 3024 	.db 0x0A
   014C 00                 3025 	.db 0x00
   014D                    3026 __str_11:
   014D 76 61 6C 75 65 20  3027 	.ascii "value is : %x "
        69 73 20 3A 20 25
        78 20
   015B 00                 3028 	.db 0x00
   015C                    3029 __str_12:
   015C 25 78 3A           3030 	.ascii "%x:"
   015F 00                 3031 	.db 0x00
   0160                    3032 __str_13:
   0160 0A                 3033 	.db 0x0A
   0161 0D                 3034 	.db 0x0D
   0162 20 25 78 3A        3035 	.ascii " %x:"
   0166 00                 3036 	.db 0x00
   0167                    3037 __str_14:
   0167 20 20 25 78 20 20  3038 	.ascii "  %x  "
   016D 00                 3039 	.db 0x00
   016E                    3040 __str_15:
   016E 6E 6F 74 20 76 61  3041 	.ascii "not valid enter again "
        6C 69 64 20 65 6E
        74 65 72 20 61 67
        61 69 6E 20
   0184 0A                 3042 	.db 0x0A
   0185 0D                 3043 	.db 0x0D
   0186 00                 3044 	.db 0x00
                           3045 	.area XINIT   (CODE)

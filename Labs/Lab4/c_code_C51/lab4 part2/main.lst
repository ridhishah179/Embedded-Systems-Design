                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Nov 10 21:22:39 2018
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _isr23
                             13 	.globl _main
                             14 	.globl __sdcc_external_startup
                             15 	.globl _TF1
                             16 	.globl _TR1
                             17 	.globl _TF0
                             18 	.globl _TR0
                             19 	.globl _IE1
                             20 	.globl _IT1
                             21 	.globl _IE0
                             22 	.globl _IT0
                             23 	.globl _SM0
                             24 	.globl _SM1
                             25 	.globl _SM2
                             26 	.globl _REN
                             27 	.globl _TB8
                             28 	.globl _RB8
                             29 	.globl _TI
                             30 	.globl _RI
                             31 	.globl _CY
                             32 	.globl _AC
                             33 	.globl _F0
                             34 	.globl _RS1
                             35 	.globl _RS0
                             36 	.globl _OV
                             37 	.globl _F1
                             38 	.globl _P
                             39 	.globl _RD
                             40 	.globl _WR
                             41 	.globl _T1
                             42 	.globl _T0
                             43 	.globl _INT1
                             44 	.globl _INT0
                             45 	.globl _TXD0
                             46 	.globl _TXD
                             47 	.globl _RXD0
                             48 	.globl _RXD
                             49 	.globl _P3_7
                             50 	.globl _P3_6
                             51 	.globl _P3_5
                             52 	.globl _P3_4
                             53 	.globl _P3_3
                             54 	.globl _P3_2
                             55 	.globl _P3_1
                             56 	.globl _P3_0
                             57 	.globl _P2_7
                             58 	.globl _P2_6
                             59 	.globl _P2_5
                             60 	.globl _P2_4
                             61 	.globl _P2_3
                             62 	.globl _P2_2
                             63 	.globl _P2_1
                             64 	.globl _P2_0
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _P0_7
                             74 	.globl _P0_6
                             75 	.globl _P0_5
                             76 	.globl _P0_4
                             77 	.globl _P0_3
                             78 	.globl _P0_2
                             79 	.globl _P0_1
                             80 	.globl _P0_0
                             81 	.globl _PS
                             82 	.globl _PT1
                             83 	.globl _PX1
                             84 	.globl _PT0
                             85 	.globl _PX0
                             86 	.globl _EA
                             87 	.globl _ES
                             88 	.globl _ET1
                             89 	.globl _EX1
                             90 	.globl _ET0
                             91 	.globl _EX0
                             92 	.globl _BREG_F7
                             93 	.globl _BREG_F6
                             94 	.globl _BREG_F5
                             95 	.globl _BREG_F4
                             96 	.globl _BREG_F3
                             97 	.globl _BREG_F2
                             98 	.globl _BREG_F1
                             99 	.globl _BREG_F0
                            100 	.globl _P5_7
                            101 	.globl _P5_6
                            102 	.globl _P5_5
                            103 	.globl _P5_4
                            104 	.globl _P5_3
                            105 	.globl _P5_2
                            106 	.globl _P5_1
                            107 	.globl _P5_0
                            108 	.globl _P4_7
                            109 	.globl _P4_6
                            110 	.globl _P4_5
                            111 	.globl _P4_4
                            112 	.globl _P4_3
                            113 	.globl _P4_2
                            114 	.globl _P4_1
                            115 	.globl _P4_0
                            116 	.globl _PX0L
                            117 	.globl _PT0L
                            118 	.globl _PX1L
                            119 	.globl _PT1L
                            120 	.globl _PLS
                            121 	.globl _PT2L
                            122 	.globl _PPCL
                            123 	.globl _EC
                            124 	.globl _CCF0
                            125 	.globl _CCF1
                            126 	.globl _CCF2
                            127 	.globl _CCF3
                            128 	.globl _CCF4
                            129 	.globl _CR
                            130 	.globl _CF
                            131 	.globl _TF2
                            132 	.globl _EXF2
                            133 	.globl _RCLK
                            134 	.globl _TCLK
                            135 	.globl _EXEN2
                            136 	.globl _TR2
                            137 	.globl _C_T2
                            138 	.globl _CP_RL2
                            139 	.globl _T2CON_7
                            140 	.globl _T2CON_6
                            141 	.globl _T2CON_5
                            142 	.globl _T2CON_4
                            143 	.globl _T2CON_3
                            144 	.globl _T2CON_2
                            145 	.globl _T2CON_1
                            146 	.globl _T2CON_0
                            147 	.globl _PT2
                            148 	.globl _ET2
                            149 	.globl _TMOD
                            150 	.globl _TL1
                            151 	.globl _TL0
                            152 	.globl _TH1
                            153 	.globl _TH0
                            154 	.globl _TCON
                            155 	.globl _SP
                            156 	.globl _SCON
                            157 	.globl _SBUF0
                            158 	.globl _SBUF
                            159 	.globl _PSW
                            160 	.globl _PCON
                            161 	.globl _P3
                            162 	.globl _P2
                            163 	.globl _P1
                            164 	.globl _P0
                            165 	.globl _IP
                            166 	.globl _IE
                            167 	.globl _DP0L
                            168 	.globl _DPL
                            169 	.globl _DP0H
                            170 	.globl _DPH
                            171 	.globl _B
                            172 	.globl _ACC
                            173 	.globl _EECON
                            174 	.globl _KBF
                            175 	.globl _KBE
                            176 	.globl _KBLS
                            177 	.globl _BRL
                            178 	.globl _BDRCON
                            179 	.globl _T2MOD
                            180 	.globl _SPDAT
                            181 	.globl _SPSTA
                            182 	.globl _SPCON
                            183 	.globl _SADEN
                            184 	.globl _SADDR
                            185 	.globl _WDTPRG
                            186 	.globl _WDTRST
                            187 	.globl _P5
                            188 	.globl _P4
                            189 	.globl _IPH1
                            190 	.globl _IPL1
                            191 	.globl _IPH0
                            192 	.globl _IPL0
                            193 	.globl _IEN1
                            194 	.globl _IEN0
                            195 	.globl _CMOD
                            196 	.globl _CL
                            197 	.globl _CH
                            198 	.globl _CCON
                            199 	.globl _CCAPM4
                            200 	.globl _CCAPM3
                            201 	.globl _CCAPM2
                            202 	.globl _CCAPM1
                            203 	.globl _CCAPM0
                            204 	.globl _CCAP4L
                            205 	.globl _CCAP3L
                            206 	.globl _CCAP2L
                            207 	.globl _CCAP1L
                            208 	.globl _CCAP0L
                            209 	.globl _CCAP4H
                            210 	.globl _CCAP3H
                            211 	.globl _CCAP2H
                            212 	.globl _CCAP1H
                            213 	.globl _CCAP0H
                            214 	.globl _CKCKON1
                            215 	.globl _CKCKON0
                            216 	.globl _CKRL
                            217 	.globl _AUXR1
                            218 	.globl _AUXR
                            219 	.globl _TH2
                            220 	.globl _TL2
                            221 	.globl _RCAP2H
                            222 	.globl _RCAP2L
                            223 	.globl _T2CON
                            224 	.globl _mins0
                            225 	.globl _mins1
                            226 	.globl _secs0
                            227 	.globl _secs1
                            228 	.globl _hundrdmilli
                            229 	.globl _ctr
                            230 	.globl _lcdcreatechar_PARM_2
                            231 	.globl _lcdgotoxy_PARM_2
                            232 	.globl _Lcd_init
                            233 	.globl _lcdbusywait
                            234 	.globl _lcdgotoaddress
                            235 	.globl _lcdgotoxy
                            236 	.globl _lcdputch
                            237 	.globl _lcdclear
                            238 	.globl _lcdputstr
                            239 	.globl _Delay_5ms
                            240 	.globl _serial_init
                            241 	.globl _putchar
                            242 	.globl _getchar
                            243 	.globl _get_num
                            244 	.globl _get_str
                            245 	.globl _start_clock
                            246 	.globl _stop_clock
                            247 	.globl _reset_clock
                            248 	.globl _lcdcreatechar
                            249 	.globl _get_hex
                            250 	.globl _lcd_dump_ddram
                            251 	.globl _lcd_dump_cgram
                            252 ;--------------------------------------------------------
                            253 ; special function registers
                            254 ;--------------------------------------------------------
                            255 	.area RSEG    (DATA)
                    00C8    256 _T2CON	=	0x00c8
                    00CA    257 _RCAP2L	=	0x00ca
                    00CB    258 _RCAP2H	=	0x00cb
                    00CC    259 _TL2	=	0x00cc
                    00CD    260 _TH2	=	0x00cd
                    008E    261 _AUXR	=	0x008e
                    00A2    262 _AUXR1	=	0x00a2
                    0097    263 _CKRL	=	0x0097
                    008F    264 _CKCKON0	=	0x008f
                    008F    265 _CKCKON1	=	0x008f
                    00FA    266 _CCAP0H	=	0x00fa
                    00FB    267 _CCAP1H	=	0x00fb
                    00FC    268 _CCAP2H	=	0x00fc
                    00FD    269 _CCAP3H	=	0x00fd
                    00FE    270 _CCAP4H	=	0x00fe
                    00EA    271 _CCAP0L	=	0x00ea
                    00EB    272 _CCAP1L	=	0x00eb
                    00EC    273 _CCAP2L	=	0x00ec
                    00ED    274 _CCAP3L	=	0x00ed
                    00EE    275 _CCAP4L	=	0x00ee
                    00DA    276 _CCAPM0	=	0x00da
                    00DB    277 _CCAPM1	=	0x00db
                    00DC    278 _CCAPM2	=	0x00dc
                    00DD    279 _CCAPM3	=	0x00dd
                    00DE    280 _CCAPM4	=	0x00de
                    00D8    281 _CCON	=	0x00d8
                    00F9    282 _CH	=	0x00f9
                    00E9    283 _CL	=	0x00e9
                    00D9    284 _CMOD	=	0x00d9
                    00A8    285 _IEN0	=	0x00a8
                    00B1    286 _IEN1	=	0x00b1
                    00B8    287 _IPL0	=	0x00b8
                    00B7    288 _IPH0	=	0x00b7
                    00B2    289 _IPL1	=	0x00b2
                    00B3    290 _IPH1	=	0x00b3
                    00C0    291 _P4	=	0x00c0
                    00D8    292 _P5	=	0x00d8
                    00A6    293 _WDTRST	=	0x00a6
                    00A7    294 _WDTPRG	=	0x00a7
                    00A9    295 _SADDR	=	0x00a9
                    00B9    296 _SADEN	=	0x00b9
                    00C3    297 _SPCON	=	0x00c3
                    00C4    298 _SPSTA	=	0x00c4
                    00C5    299 _SPDAT	=	0x00c5
                    00C9    300 _T2MOD	=	0x00c9
                    009B    301 _BDRCON	=	0x009b
                    009A    302 _BRL	=	0x009a
                    009C    303 _KBLS	=	0x009c
                    009D    304 _KBE	=	0x009d
                    009E    305 _KBF	=	0x009e
                    00D2    306 _EECON	=	0x00d2
                    00E0    307 _ACC	=	0x00e0
                    00F0    308 _B	=	0x00f0
                    0083    309 _DPH	=	0x0083
                    0083    310 _DP0H	=	0x0083
                    0082    311 _DPL	=	0x0082
                    0082    312 _DP0L	=	0x0082
                    00A8    313 _IE	=	0x00a8
                    00B8    314 _IP	=	0x00b8
                    0080    315 _P0	=	0x0080
                    0090    316 _P1	=	0x0090
                    00A0    317 _P2	=	0x00a0
                    00B0    318 _P3	=	0x00b0
                    0087    319 _PCON	=	0x0087
                    00D0    320 _PSW	=	0x00d0
                    0099    321 _SBUF	=	0x0099
                    0099    322 _SBUF0	=	0x0099
                    0098    323 _SCON	=	0x0098
                    0081    324 _SP	=	0x0081
                    0088    325 _TCON	=	0x0088
                    008C    326 _TH0	=	0x008c
                    008D    327 _TH1	=	0x008d
                    008A    328 _TL0	=	0x008a
                    008B    329 _TL1	=	0x008b
                    0089    330 _TMOD	=	0x0089
                            331 ;--------------------------------------------------------
                            332 ; special function bits
                            333 ;--------------------------------------------------------
                            334 	.area RSEG    (DATA)
                    00AD    335 _ET2	=	0x00ad
                    00BD    336 _PT2	=	0x00bd
                    00C8    337 _T2CON_0	=	0x00c8
                    00C9    338 _T2CON_1	=	0x00c9
                    00CA    339 _T2CON_2	=	0x00ca
                    00CB    340 _T2CON_3	=	0x00cb
                    00CC    341 _T2CON_4	=	0x00cc
                    00CD    342 _T2CON_5	=	0x00cd
                    00CE    343 _T2CON_6	=	0x00ce
                    00CF    344 _T2CON_7	=	0x00cf
                    00C8    345 _CP_RL2	=	0x00c8
                    00C9    346 _C_T2	=	0x00c9
                    00CA    347 _TR2	=	0x00ca
                    00CB    348 _EXEN2	=	0x00cb
                    00CC    349 _TCLK	=	0x00cc
                    00CD    350 _RCLK	=	0x00cd
                    00CE    351 _EXF2	=	0x00ce
                    00CF    352 _TF2	=	0x00cf
                    00DF    353 _CF	=	0x00df
                    00DE    354 _CR	=	0x00de
                    00DC    355 _CCF4	=	0x00dc
                    00DB    356 _CCF3	=	0x00db
                    00DA    357 _CCF2	=	0x00da
                    00D9    358 _CCF1	=	0x00d9
                    00D8    359 _CCF0	=	0x00d8
                    00AE    360 _EC	=	0x00ae
                    00BE    361 _PPCL	=	0x00be
                    00BD    362 _PT2L	=	0x00bd
                    00BC    363 _PLS	=	0x00bc
                    00BB    364 _PT1L	=	0x00bb
                    00BA    365 _PX1L	=	0x00ba
                    00B9    366 _PT0L	=	0x00b9
                    00B8    367 _PX0L	=	0x00b8
                    00C0    368 _P4_0	=	0x00c0
                    00C1    369 _P4_1	=	0x00c1
                    00C2    370 _P4_2	=	0x00c2
                    00C3    371 _P4_3	=	0x00c3
                    00C4    372 _P4_4	=	0x00c4
                    00C5    373 _P4_5	=	0x00c5
                    00C6    374 _P4_6	=	0x00c6
                    00C7    375 _P4_7	=	0x00c7
                    00D8    376 _P5_0	=	0x00d8
                    00D9    377 _P5_1	=	0x00d9
                    00DA    378 _P5_2	=	0x00da
                    00DB    379 _P5_3	=	0x00db
                    00DC    380 _P5_4	=	0x00dc
                    00DD    381 _P5_5	=	0x00dd
                    00DE    382 _P5_6	=	0x00de
                    00DF    383 _P5_7	=	0x00df
                    00F0    384 _BREG_F0	=	0x00f0
                    00F1    385 _BREG_F1	=	0x00f1
                    00F2    386 _BREG_F2	=	0x00f2
                    00F3    387 _BREG_F3	=	0x00f3
                    00F4    388 _BREG_F4	=	0x00f4
                    00F5    389 _BREG_F5	=	0x00f5
                    00F6    390 _BREG_F6	=	0x00f6
                    00F7    391 _BREG_F7	=	0x00f7
                    00A8    392 _EX0	=	0x00a8
                    00A9    393 _ET0	=	0x00a9
                    00AA    394 _EX1	=	0x00aa
                    00AB    395 _ET1	=	0x00ab
                    00AC    396 _ES	=	0x00ac
                    00AF    397 _EA	=	0x00af
                    00B8    398 _PX0	=	0x00b8
                    00B9    399 _PT0	=	0x00b9
                    00BA    400 _PX1	=	0x00ba
                    00BB    401 _PT1	=	0x00bb
                    00BC    402 _PS	=	0x00bc
                    0080    403 _P0_0	=	0x0080
                    0081    404 _P0_1	=	0x0081
                    0082    405 _P0_2	=	0x0082
                    0083    406 _P0_3	=	0x0083
                    0084    407 _P0_4	=	0x0084
                    0085    408 _P0_5	=	0x0085
                    0086    409 _P0_6	=	0x0086
                    0087    410 _P0_7	=	0x0087
                    0090    411 _P1_0	=	0x0090
                    0091    412 _P1_1	=	0x0091
                    0092    413 _P1_2	=	0x0092
                    0093    414 _P1_3	=	0x0093
                    0094    415 _P1_4	=	0x0094
                    0095    416 _P1_5	=	0x0095
                    0096    417 _P1_6	=	0x0096
                    0097    418 _P1_7	=	0x0097
                    00A0    419 _P2_0	=	0x00a0
                    00A1    420 _P2_1	=	0x00a1
                    00A2    421 _P2_2	=	0x00a2
                    00A3    422 _P2_3	=	0x00a3
                    00A4    423 _P2_4	=	0x00a4
                    00A5    424 _P2_5	=	0x00a5
                    00A6    425 _P2_6	=	0x00a6
                    00A7    426 _P2_7	=	0x00a7
                    00B0    427 _P3_0	=	0x00b0
                    00B1    428 _P3_1	=	0x00b1
                    00B2    429 _P3_2	=	0x00b2
                    00B3    430 _P3_3	=	0x00b3
                    00B4    431 _P3_4	=	0x00b4
                    00B5    432 _P3_5	=	0x00b5
                    00B6    433 _P3_6	=	0x00b6
                    00B7    434 _P3_7	=	0x00b7
                    00B0    435 _RXD	=	0x00b0
                    00B0    436 _RXD0	=	0x00b0
                    00B1    437 _TXD	=	0x00b1
                    00B1    438 _TXD0	=	0x00b1
                    00B2    439 _INT0	=	0x00b2
                    00B3    440 _INT1	=	0x00b3
                    00B4    441 _T0	=	0x00b4
                    00B5    442 _T1	=	0x00b5
                    00B6    443 _WR	=	0x00b6
                    00B7    444 _RD	=	0x00b7
                    00D0    445 _P	=	0x00d0
                    00D1    446 _F1	=	0x00d1
                    00D2    447 _OV	=	0x00d2
                    00D3    448 _RS0	=	0x00d3
                    00D4    449 _RS1	=	0x00d4
                    00D5    450 _F0	=	0x00d5
                    00D6    451 _AC	=	0x00d6
                    00D7    452 _CY	=	0x00d7
                    0098    453 _RI	=	0x0098
                    0099    454 _TI	=	0x0099
                    009A    455 _RB8	=	0x009a
                    009B    456 _TB8	=	0x009b
                    009C    457 _REN	=	0x009c
                    009D    458 _SM2	=	0x009d
                    009E    459 _SM1	=	0x009e
                    009F    460 _SM0	=	0x009f
                    0088    461 _IT0	=	0x0088
                    0089    462 _IE0	=	0x0089
                    008A    463 _IT1	=	0x008a
                    008B    464 _IE1	=	0x008b
                    008C    465 _TR0	=	0x008c
                    008D    466 _TF0	=	0x008d
                    008E    467 _TR1	=	0x008e
                    008F    468 _TF1	=	0x008f
                            469 ;--------------------------------------------------------
                            470 ; overlayable register banks
                            471 ;--------------------------------------------------------
                            472 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     473 	.ds 8
                            474 ;--------------------------------------------------------
                            475 ; internal ram data
                            476 ;--------------------------------------------------------
                            477 	.area DSEG    (DATA)
   0000                     478 _lcdcreatechar_sloc0_1_0:
   0000                     479 	.ds 2
                            480 ;--------------------------------------------------------
                            481 ; overlayable items in internal ram 
                            482 ;--------------------------------------------------------
                            483 	.area OSEG    (OVR,DATA)
                            484 ;--------------------------------------------------------
                            485 ; Stack segment in internal ram 
                            486 ;--------------------------------------------------------
                            487 	.area	SSEG	(DATA)
   0000                     488 __start__stack:
   0000                     489 	.ds	1
                            490 
                            491 ;--------------------------------------------------------
                            492 ; indirectly addressable internal ram data
                            493 ;--------------------------------------------------------
                            494 	.area ISEG    (DATA)
                            495 ;--------------------------------------------------------
                            496 ; bit data
                            497 ;--------------------------------------------------------
                            498 	.area BSEG    (BIT)
                            499 ;--------------------------------------------------------
                            500 ; paged external ram data
                            501 ;--------------------------------------------------------
                            502 	.area PSEG    (PAG,XDATA)
                            503 ;--------------------------------------------------------
                            504 ; external ram data
                            505 ;--------------------------------------------------------
                            506 	.area XSEG    (XDATA)
   0000                     507 _main_f1_1_1:
   0000                     508 	.ds 8
   0008                     509 _lcdgotoaddress_addr_1_1:
   0008                     510 	.ds 1
   0009                     511 _lcdgotoxy_PARM_2:
   0009                     512 	.ds 2
   000B                     513 _lcdgotoxy_row_1_1:
   000B                     514 	.ds 2
   000D                     515 _lcdgotoxy_addr_1_1:
   000D                     516 	.ds 1
   000E                     517 _lcdputch_cc_1_1:
   000E                     518 	.ds 1
   000F                     519 _lcdputstr_ss_1_1:
   000F                     520 	.ds 3
   0012                     521 _lcdputstr_add_1_1:
   0012                     522 	.ds 1
   0013                     523 _putchar_c_1_1:
   0013                     524 	.ds 1
   0014                     525 _get_num_str_1_1:
   0014                     526 	.ds 10
   001E                     527 _get_num_i_1_1:
   001E                     528 	.ds 2
   0020                     529 _get_str_str_1_1:
   0020                     530 	.ds 100
   0084                     531 _get_str_i_1_1:
   0084                     532 	.ds 2
   0086                     533 _lcdcreatechar_PARM_2:
   0086                     534 	.ds 3
   0089                     535 _lcdcreatechar_ccode_1_1:
   0089                     536 	.ds 1
   008A                     537 _get_hex_val_1_1:
   008A                     538 	.ds 10
   0094                     539 _get_hex_i_1_1:
   0094                     540 	.ds 2
   0096                     541 _get_hex_val1_1_1:
   0096                     542 	.ds 2
   0098                     543 _lcd_dump_ddram_add_1_1:
   0098                     544 	.ds 1
                            545 ;--------------------------------------------------------
                            546 ; external initialized ram data
                            547 ;--------------------------------------------------------
                            548 	.area XISEG   (XDATA)
   0000                     549 _ctr::
   0000                     550 	.ds 1
   0001                     551 _hundrdmilli::
   0001                     552 	.ds 1
   0002                     553 _secs1::
   0002                     554 	.ds 1
   0003                     555 _secs0::
   0003                     556 	.ds 1
   0004                     557 _mins1::
   0004                     558 	.ds 1
   0005                     559 _mins0::
   0005                     560 	.ds 1
                            561 	.area HOME    (CODE)
                            562 	.area GSINIT0 (CODE)
                            563 	.area GSINIT1 (CODE)
                            564 	.area GSINIT2 (CODE)
                            565 	.area GSINIT3 (CODE)
                            566 	.area GSINIT4 (CODE)
                            567 	.area GSINIT5 (CODE)
                            568 	.area GSINIT  (CODE)
                            569 	.area GSFINAL (CODE)
                            570 	.area CSEG    (CODE)
                            571 ;--------------------------------------------------------
                            572 ; interrupt vector 
                            573 ;--------------------------------------------------------
                            574 	.area HOME    (CODE)
   0000                     575 __interrupt_vect:
   0000 02s00r00            576 	ljmp	__sdcc_gsinit_startup
   0003 32                  577 	reti
   0004                     578 	.ds	7
   000B 32                  579 	reti
   000C                     580 	.ds	7
   0013 32                  581 	reti
   0014                     582 	.ds	7
   001B 32                  583 	reti
   001C                     584 	.ds	7
   0023 32                  585 	reti
   0024                     586 	.ds	7
   002B 02s07rAF            587 	ljmp	_isr23
                            588 ;--------------------------------------------------------
                            589 ; global & static initialisations
                            590 ;--------------------------------------------------------
                            591 	.area HOME    (CODE)
                            592 	.area GSINIT  (CODE)
                            593 	.area GSFINAL (CODE)
                            594 	.area GSINIT  (CODE)
                            595 	.globl __sdcc_gsinit_startup
                            596 	.globl __sdcc_program_startup
                            597 	.globl __start__stack
                            598 	.globl __mcs51_genXINIT
                            599 	.globl __mcs51_genXRAMCLEAR
                            600 	.globl __mcs51_genRAMCLEAR
                            601 	.area GSFINAL (CODE)
   0000 02s00r00            602 	ljmp	__sdcc_program_startup
                            603 ;--------------------------------------------------------
                            604 ; Home
                            605 ;--------------------------------------------------------
                            606 	.area HOME    (CODE)
                            607 	.area CSEG    (CODE)
   0000                     608 __sdcc_program_startup:
   0000 12s00r0F            609 	lcall	_main
                            610 ;	return from main will lock up
   0003 80 FE               611 	sjmp .
                            612 ;--------------------------------------------------------
                            613 ; code
                            614 ;--------------------------------------------------------
                            615 	.area CSEG    (CODE)
                            616 ;------------------------------------------------------------
                            617 ;Allocation info for local variables in function '_sdcc_external_startup'
                            618 ;------------------------------------------------------------
                            619 ;------------------------------------------------------------
                            620 ;	main.c:38: _sdcc_external_startup()
                            621 ;	-----------------------------------------
                            622 ;	 function _sdcc_external_startup
                            623 ;	-----------------------------------------
   0005                     624 __sdcc_external_startup:
                    0002    625 	ar2 = 0x02
                    0003    626 	ar3 = 0x03
                    0004    627 	ar4 = 0x04
                    0005    628 	ar5 = 0x05
                    0006    629 	ar6 = 0x06
                    0007    630 	ar7 = 0x07
                    0000    631 	ar0 = 0x00
                    0001    632 	ar1 = 0x01
                            633 ;	main.c:40: AUXR |= 0x0C;
                            634 ;	genOr
   0005 43 8E 0C            635 	orl	_AUXR,#0x0C
                            636 ;	main.c:41: AUXR &= 0xFD;
                            637 ;	genAnd
   0008 53 8E FD            638 	anl	_AUXR,#0xFD
                            639 ;	main.c:42: return 0;
                            640 ;	genRet
                            641 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            642 	mov	dptr,#0x0000
                            643 ;	Peephole 300	removed redundant label 00101$
   000E 22                  644 	ret
                            645 ;------------------------------------------------------------
                            646 ;Allocation info for local variables in function 'main'
                            647 ;------------------------------------------------------------
                            648 ;a                         Allocated with name '_main_a_1_1'
                            649 ;b                         Allocated with name '_main_b_1_1'
                            650 ;c                         Allocated with name '_main_c_1_1'
                            651 ;d                         Allocated with name '_main_d_1_1'
                            652 ;add1                      Allocated with name '_main_add1_1_1'
                            653 ;e                         Allocated with name '_main_e_1_1'
                            654 ;g                         Allocated with name '_main_g_1_1'
                            655 ;f1                        Allocated with name '_main_f1_1_1'
                            656 ;------------------------------------------------------------
                            657 ;	main.c:46: void main()
                            658 ;	-----------------------------------------
                            659 ;	 function main
                            660 ;	-----------------------------------------
   000F                     661 _main:
                            662 ;	main.c:53: start_clock();
                            663 ;	genCall
   000F 12s07r6A            664 	lcall	_start_clock
                            665 ;	main.c:54: serial_init();
                            666 ;	genCall
   0012 12s05rBB            667 	lcall	_serial_init
                            668 ;	main.c:55: Lcd_init();
                            669 ;	genCall
   0015 12s03rD0            670 	lcall	_Lcd_init
                            671 ;	main.c:59: while(1)
   0018                     672 00122$:
                            673 ;	main.c:61: printf_tiny("options:\n\n\r1>Clear lcd\n\r2>goto row colomn\n\r3>enter string\n\r4>stop clock\n\r5>restart clock\n\r6>reset clock\n\r7>custom character input\n\r8>print custom characters\n\r9>Read contents of DDRAM\n\r10>read contents of cgram\n\r");
                            674 ;	genIpush
   0018 74r00               675 	mov	a,#__str_0
   001A C0 E0               676 	push	acc
   001C 74s00               677 	mov	a,#(__str_0 >> 8)
   001E C0 E0               678 	push	acc
                            679 ;	genCall
   0020 12s00r00            680 	lcall	_printf_tiny
   0023 15 81               681 	dec	sp
   0025 15 81               682 	dec	sp
                            683 ;	main.c:62: printf_tiny("\n\renter option number:");
                            684 ;	genIpush
   0027 74rD4               685 	mov	a,#__str_1
   0029 C0 E0               686 	push	acc
   002B 74s00               687 	mov	a,#(__str_1 >> 8)
   002D C0 E0               688 	push	acc
                            689 ;	genCall
   002F 12s00r00            690 	lcall	_printf_tiny
   0032 15 81               691 	dec	sp
   0034 15 81               692 	dec	sp
                            693 ;	main.c:63: a=get_num();
                            694 ;	genCall
   0036 12s05rE3            695 	lcall	_get_num
   0039 AA 82               696 	mov	r2,dpl
   003B AB 83               697 	mov	r3,dph
                            698 ;	main.c:65: if(a==1)
                            699 ;	genCmpEq
                            700 ;	gencjneshort
                            701 ;	Peephole 112.b	changed ljmp to sjmp
                            702 ;	Peephole 198.a	optimized misc jump sequence
   003D BA 01 0E            703 	cjne	r2,#0x01,00102$
   0040 BB 00 0B            704 	cjne	r3,#0x00,00102$
                            705 ;	Peephole 200.b	removed redundant sjmp
                            706 ;	Peephole 300	removed redundant label 00137$
                            707 ;	Peephole 300	removed redundant label 00138$
                            708 ;	main.c:67: lcdclear(); //calling function to clear lcd
                            709 ;	genCall
   0043 C0 02               710 	push	ar2
   0045 C0 03               711 	push	ar3
   0047 12s04rC1            712 	lcall	_lcdclear
   004A D0 03               713 	pop	ar3
   004C D0 02               714 	pop	ar2
   004E                     715 00102$:
                            716 ;	main.c:69: if(a==2)
                            717 ;	genCmpEq
                            718 ;	gencjneshort
                            719 ;	Peephole 112.b	changed ljmp to sjmp
                            720 ;	Peephole 198.a	optimized misc jump sequence
   004E BA 02 76            721 	cjne	r2,#0x02,00104$
   0051 BB 00 73            722 	cjne	r3,#0x00,00104$
                            723 ;	Peephole 200.b	removed redundant sjmp
                            724 ;	Peephole 300	removed redundant label 00139$
                            725 ;	Peephole 300	removed redundant label 00140$
                            726 ;	main.c:71: printf_tiny("enter row ");
                            727 ;	genIpush
   0054 C0 02               728 	push	ar2
   0056 C0 03               729 	push	ar3
   0058 74rEB               730 	mov	a,#__str_2
   005A C0 E0               731 	push	acc
   005C 74s00               732 	mov	a,#(__str_2 >> 8)
   005E C0 E0               733 	push	acc
                            734 ;	genCall
   0060 12s00r00            735 	lcall	_printf_tiny
   0063 15 81               736 	dec	sp
   0065 15 81               737 	dec	sp
   0067 D0 03               738 	pop	ar3
   0069 D0 02               739 	pop	ar2
                            740 ;	main.c:72: b=get_num();
                            741 ;	genCall
   006B C0 02               742 	push	ar2
   006D C0 03               743 	push	ar3
   006F 12s05rE3            744 	lcall	_get_num
   0072 AC 82               745 	mov	r4,dpl
   0074 AD 83               746 	mov	r5,dph
   0076 D0 03               747 	pop	ar3
   0078 D0 02               748 	pop	ar2
                            749 ;	main.c:73: printf_tiny("enter column");
                            750 ;	genIpush
   007A C0 02               751 	push	ar2
   007C C0 03               752 	push	ar3
   007E C0 04               753 	push	ar4
   0080 C0 05               754 	push	ar5
   0082 74rF6               755 	mov	a,#__str_3
   0084 C0 E0               756 	push	acc
   0086 74s00               757 	mov	a,#(__str_3 >> 8)
   0088 C0 E0               758 	push	acc
                            759 ;	genCall
   008A 12s00r00            760 	lcall	_printf_tiny
   008D 15 81               761 	dec	sp
   008F 15 81               762 	dec	sp
   0091 D0 05               763 	pop	ar5
   0093 D0 04               764 	pop	ar4
   0095 D0 03               765 	pop	ar3
   0097 D0 02               766 	pop	ar2
                            767 ;	main.c:74: c=get_num();
                            768 ;	genCall
   0099 C0 02               769 	push	ar2
   009B C0 03               770 	push	ar3
   009D C0 04               771 	push	ar4
   009F C0 05               772 	push	ar5
   00A1 12s05rE3            773 	lcall	_get_num
   00A4 AE 82               774 	mov	r6,dpl
   00A6 AF 83               775 	mov	r7,dph
   00A8 D0 05               776 	pop	ar5
   00AA D0 04               777 	pop	ar4
   00AC D0 03               778 	pop	ar3
   00AE D0 02               779 	pop	ar2
                            780 ;	main.c:75: lcdgotoxy(b,c); // taking values to print on  particular row and column in lcd
                            781 ;	genAssign
   00B0 90s00r09            782 	mov	dptr,#_lcdgotoxy_PARM_2
   00B3 EE                  783 	mov	a,r6
   00B4 F0                  784 	movx	@dptr,a
   00B5 A3                  785 	inc	dptr
   00B6 EF                  786 	mov	a,r7
   00B7 F0                  787 	movx	@dptr,a
                            788 ;	genCall
   00B8 8C 82               789 	mov	dpl,r4
   00BA 8D 83               790 	mov	dph,r5
   00BC C0 02               791 	push	ar2
   00BE C0 03               792 	push	ar3
   00C0 12s04r32            793 	lcall	_lcdgotoxy
   00C3 D0 03               794 	pop	ar3
   00C5 D0 02               795 	pop	ar2
   00C7                     796 00104$:
                            797 ;	main.c:78: if(a==3)
                            798 ;	genCmpEq
                            799 ;	gencjneshort
                            800 ;	Peephole 112.b	changed ljmp to sjmp
                            801 ;	Peephole 198.a	optimized misc jump sequence
   00C7 BA 03 3C            802 	cjne	r2,#0x03,00106$
   00CA BB 00 39            803 	cjne	r3,#0x00,00106$
                            804 ;	Peephole 200.b	removed redundant sjmp
                            805 ;	Peephole 300	removed redundant label 00141$
                            806 ;	Peephole 300	removed redundant label 00142$
                            807 ;	main.c:80: printf_tiny("enter string");
                            808 ;	genIpush
   00CD C0 02               809 	push	ar2
   00CF C0 03               810 	push	ar3
   00D1 74r03               811 	mov	a,#__str_4
   00D3 C0 E0               812 	push	acc
   00D5 74s01               813 	mov	a,#(__str_4 >> 8)
   00D7 C0 E0               814 	push	acc
                            815 ;	genCall
   00D9 12s00r00            816 	lcall	_printf_tiny
   00DC 15 81               817 	dec	sp
   00DE 15 81               818 	dec	sp
   00E0 D0 03               819 	pop	ar3
   00E2 D0 02               820 	pop	ar2
                            821 ;	main.c:81: d=get_str();
                            822 ;	genCall
   00E4 C0 02               823 	push	ar2
   00E6 C0 03               824 	push	ar3
   00E8 12s06rD0            825 	lcall	_get_str
   00EB AC 82               826 	mov	r4,dpl
   00ED AD 83               827 	mov	r5,dph
   00EF AE F0               828 	mov	r6,b
   00F1 D0 03               829 	pop	ar3
   00F3 D0 02               830 	pop	ar2
                            831 ;	main.c:82: lcdputstr(d);// printing a string on the lcd
                            832 ;	genCall
   00F5 8C 82               833 	mov	dpl,r4
   00F7 8D 83               834 	mov	dph,r5
   00F9 8E F0               835 	mov	b,r6
   00FB C0 02               836 	push	ar2
   00FD C0 03               837 	push	ar3
   00FF 12s04rC8            838 	lcall	_lcdputstr
   0102 D0 03               839 	pop	ar3
   0104 D0 02               840 	pop	ar2
   0106                     841 00106$:
                            842 ;	main.c:84: if(a==4)
                            843 ;	genCmpEq
                            844 ;	gencjneshort
                            845 ;	Peephole 112.b	changed ljmp to sjmp
                            846 ;	Peephole 198.a	optimized misc jump sequence
   0106 BA 04 0E            847 	cjne	r2,#0x04,00108$
   0109 BB 00 0B            848 	cjne	r3,#0x00,00108$
                            849 ;	Peephole 200.b	removed redundant sjmp
                            850 ;	Peephole 300	removed redundant label 00143$
                            851 ;	Peephole 300	removed redundant label 00144$
                            852 ;	main.c:86: stop_clock(); // stopping the timer
                            853 ;	genCall
   010C C0 02               854 	push	ar2
   010E C0 03               855 	push	ar3
   0110 12s07r7C            856 	lcall	_stop_clock
   0113 D0 03               857 	pop	ar3
   0115 D0 02               858 	pop	ar2
   0117                     859 00108$:
                            860 ;	main.c:88: if(a==5)
                            861 ;	genCmpEq
                            862 ;	gencjneshort
                            863 ;	Peephole 112.b	changed ljmp to sjmp
                            864 ;	Peephole 198.a	optimized misc jump sequence
   0117 BA 05 05            865 	cjne	r2,#0x05,00110$
   011A BB 00 02            866 	cjne	r3,#0x00,00110$
                            867 ;	Peephole 200.b	removed redundant sjmp
                            868 ;	Peephole 300	removed redundant label 00145$
                            869 ;	Peephole 300	removed redundant label 00146$
                            870 ;	main.c:90: TR2=1; // restart the timer
                            871 ;	genAssign
   011D D2 CA               872 	setb	_TR2
   011F                     873 00110$:
                            874 ;	main.c:92: if(a==6)
                            875 ;	genCmpEq
                            876 ;	gencjneshort
                            877 ;	Peephole 112.b	changed ljmp to sjmp
                            878 ;	Peephole 198.a	optimized misc jump sequence
   011F BA 06 0E            879 	cjne	r2,#0x06,00112$
   0122 BB 00 0B            880 	cjne	r3,#0x00,00112$
                            881 ;	Peephole 200.b	removed redundant sjmp
                            882 ;	Peephole 300	removed redundant label 00147$
                            883 ;	Peephole 300	removed redundant label 00148$
                            884 ;	main.c:94: reset_clock();// reset
                            885 ;	genCall
   0125 C0 02               886 	push	ar2
   0127 C0 03               887 	push	ar3
   0129 12s07r81            888 	lcall	_reset_clock
   012C D0 03               889 	pop	ar3
   012E D0 02               890 	pop	ar2
   0130                     891 00112$:
                            892 ;	main.c:96: if(a==7)
                            893 ;	genCmpEq
                            894 ;	gencjneshort
   0130 BA 07 05            895 	cjne	r2,#0x07,00149$
   0133 BB 00 02            896 	cjne	r3,#0x00,00149$
   0136 80 03               897 	sjmp	00150$
   0138                     898 00149$:
   0138 02s03r75            899 	ljmp	00114$
   013B                     900 00150$:
                            901 ;	main.c:99: add1= *read_cmd & 0x7f; // reading the address and storing
                            902 ;	genAssign
                            903 ;	Peephole 182.b	used 16 bit load of dptr
   013B 90 C0 00            904 	mov	dptr,#0xC000
                            905 ;	genPointerGet
                            906 ;	genFarPointerGet
   013E E0                  907 	movx	a,@dptr
   013F FC                  908 	mov	r4,a
                            909 ;	genAnd
   0140 53 04 7F            910 	anl	ar4,#0x7F
                            911 ;	main.c:100: printf_tiny("enter chracter code");
                            912 ;	genIpush
   0143 C0 02               913 	push	ar2
   0145 C0 03               914 	push	ar3
   0147 C0 04               915 	push	ar4
   0149 74r10               916 	mov	a,#__str_5
   014B C0 E0               917 	push	acc
   014D 74s01               918 	mov	a,#(__str_5 >> 8)
   014F C0 E0               919 	push	acc
                            920 ;	genCall
   0151 12s00r00            921 	lcall	_printf_tiny
   0154 15 81               922 	dec	sp
   0156 15 81               923 	dec	sp
   0158 D0 04               924 	pop	ar4
   015A D0 03               925 	pop	ar3
   015C D0 02               926 	pop	ar2
                            927 ;	main.c:101: e=get_hex();// taking character code as input from user
                            928 ;	genCall
   015E C0 02               929 	push	ar2
   0160 C0 03               930 	push	ar3
   0162 C0 04               931 	push	ar4
   0164 12s09rA5            932 	lcall	_get_hex
   0167 AD 82               933 	mov	r5,dpl
   0169 AE 83               934 	mov	r6,dph
   016B D0 04               935 	pop	ar4
   016D D0 03               936 	pop	ar3
   016F D0 02               937 	pop	ar2
                            938 ;	genCast
                            939 ;	main.c:102: printf_tiny("enter row1 value")  ; // taking values for all rows from user
                            940 ;	genIpush
   0171 C0 02               941 	push	ar2
   0173 C0 03               942 	push	ar3
   0175 C0 04               943 	push	ar4
   0177 C0 05               944 	push	ar5
   0179 74r24               945 	mov	a,#__str_6
   017B C0 E0               946 	push	acc
   017D 74s01               947 	mov	a,#(__str_6 >> 8)
   017F C0 E0               948 	push	acc
                            949 ;	genCall
   0181 12s00r00            950 	lcall	_printf_tiny
   0184 15 81               951 	dec	sp
   0186 15 81               952 	dec	sp
   0188 D0 05               953 	pop	ar5
   018A D0 04               954 	pop	ar4
   018C D0 03               955 	pop	ar3
   018E D0 02               956 	pop	ar2
                            957 ;	main.c:103: f1[0]=get_hex();
                            958 ;	genCall
   0190 C0 02               959 	push	ar2
   0192 C0 03               960 	push	ar3
   0194 C0 04               961 	push	ar4
   0196 C0 05               962 	push	ar5
   0198 12s09rA5            963 	lcall	_get_hex
   019B AE 82               964 	mov	r6,dpl
   019D AF 83               965 	mov	r7,dph
   019F D0 05               966 	pop	ar5
   01A1 D0 04               967 	pop	ar4
   01A3 D0 03               968 	pop	ar3
   01A5 D0 02               969 	pop	ar2
                            970 ;	genCast
                            971 ;	genPointerSet
                            972 ;     genFarPointerSet
   01A7 90s00r00            973 	mov	dptr,#_main_f1_1_1
   01AA EE                  974 	mov	a,r6
   01AB F0                  975 	movx	@dptr,a
                            976 ;	main.c:104: printf_tiny("enter row2 value")  ;
                            977 ;	genIpush
   01AC C0 02               978 	push	ar2
   01AE C0 03               979 	push	ar3
   01B0 C0 04               980 	push	ar4
   01B2 C0 05               981 	push	ar5
   01B4 74r35               982 	mov	a,#__str_7
   01B6 C0 E0               983 	push	acc
   01B8 74s01               984 	mov	a,#(__str_7 >> 8)
   01BA C0 E0               985 	push	acc
                            986 ;	genCall
   01BC 12s00r00            987 	lcall	_printf_tiny
   01BF 15 81               988 	dec	sp
   01C1 15 81               989 	dec	sp
   01C3 D0 05               990 	pop	ar5
   01C5 D0 04               991 	pop	ar4
   01C7 D0 03               992 	pop	ar3
   01C9 D0 02               993 	pop	ar2
                            994 ;	main.c:105: f1[1]=get_hex();
                            995 ;	genCall
   01CB C0 02               996 	push	ar2
   01CD C0 03               997 	push	ar3
   01CF C0 04               998 	push	ar4
   01D1 C0 05               999 	push	ar5
   01D3 12s09rA5           1000 	lcall	_get_hex
   01D6 AE 82              1001 	mov	r6,dpl
   01D8 AF 83              1002 	mov	r7,dph
   01DA D0 05              1003 	pop	ar5
   01DC D0 04              1004 	pop	ar4
   01DE D0 03              1005 	pop	ar3
   01E0 D0 02              1006 	pop	ar2
                           1007 ;	genCast
                           1008 ;	genPointerSet
                           1009 ;     genFarPointerSet
   01E2 90s00r01           1010 	mov	dptr,#(_main_f1_1_1 + 0x0001)
   01E5 EE                 1011 	mov	a,r6
   01E6 F0                 1012 	movx	@dptr,a
                           1013 ;	main.c:106: printf_tiny("enter row3 value")  ;
                           1014 ;	genIpush
   01E7 C0 02              1015 	push	ar2
   01E9 C0 03              1016 	push	ar3
   01EB C0 04              1017 	push	ar4
   01ED C0 05              1018 	push	ar5
   01EF 74r46              1019 	mov	a,#__str_8
   01F1 C0 E0              1020 	push	acc
   01F3 74s01              1021 	mov	a,#(__str_8 >> 8)
   01F5 C0 E0              1022 	push	acc
                           1023 ;	genCall
   01F7 12s00r00           1024 	lcall	_printf_tiny
   01FA 15 81              1025 	dec	sp
   01FC 15 81              1026 	dec	sp
   01FE D0 05              1027 	pop	ar5
   0200 D0 04              1028 	pop	ar4
   0202 D0 03              1029 	pop	ar3
   0204 D0 02              1030 	pop	ar2
                           1031 ;	main.c:107: f1[2]=get_hex();
                           1032 ;	genCall
   0206 C0 02              1033 	push	ar2
   0208 C0 03              1034 	push	ar3
   020A C0 04              1035 	push	ar4
   020C C0 05              1036 	push	ar5
   020E 12s09rA5           1037 	lcall	_get_hex
   0211 AE 82              1038 	mov	r6,dpl
   0213 AF 83              1039 	mov	r7,dph
   0215 D0 05              1040 	pop	ar5
   0217 D0 04              1041 	pop	ar4
   0219 D0 03              1042 	pop	ar3
   021B D0 02              1043 	pop	ar2
                           1044 ;	genCast
                           1045 ;	genPointerSet
                           1046 ;     genFarPointerSet
   021D 90s00r02           1047 	mov	dptr,#(_main_f1_1_1 + 0x0002)
   0220 EE                 1048 	mov	a,r6
   0221 F0                 1049 	movx	@dptr,a
                           1050 ;	main.c:108: printf_tiny("enter row4 value")  ;
                           1051 ;	genIpush
   0222 C0 02              1052 	push	ar2
   0224 C0 03              1053 	push	ar3
   0226 C0 04              1054 	push	ar4
   0228 C0 05              1055 	push	ar5
   022A 74r57              1056 	mov	a,#__str_9
   022C C0 E0              1057 	push	acc
   022E 74s01              1058 	mov	a,#(__str_9 >> 8)
   0230 C0 E0              1059 	push	acc
                           1060 ;	genCall
   0232 12s00r00           1061 	lcall	_printf_tiny
   0235 15 81              1062 	dec	sp
   0237 15 81              1063 	dec	sp
   0239 D0 05              1064 	pop	ar5
   023B D0 04              1065 	pop	ar4
   023D D0 03              1066 	pop	ar3
   023F D0 02              1067 	pop	ar2
                           1068 ;	main.c:109: f1[3]=get_hex();
                           1069 ;	genCall
   0241 C0 02              1070 	push	ar2
   0243 C0 03              1071 	push	ar3
   0245 C0 04              1072 	push	ar4
   0247 C0 05              1073 	push	ar5
   0249 12s09rA5           1074 	lcall	_get_hex
   024C AE 82              1075 	mov	r6,dpl
   024E AF 83              1076 	mov	r7,dph
   0250 D0 05              1077 	pop	ar5
   0252 D0 04              1078 	pop	ar4
   0254 D0 03              1079 	pop	ar3
   0256 D0 02              1080 	pop	ar2
                           1081 ;	genCast
                           1082 ;	genPointerSet
                           1083 ;     genFarPointerSet
   0258 90s00r03           1084 	mov	dptr,#(_main_f1_1_1 + 0x0003)
   025B EE                 1085 	mov	a,r6
   025C F0                 1086 	movx	@dptr,a
                           1087 ;	main.c:110: printf_tiny("enter row5 value")  ;
                           1088 ;	genIpush
   025D C0 02              1089 	push	ar2
   025F C0 03              1090 	push	ar3
   0261 C0 04              1091 	push	ar4
   0263 C0 05              1092 	push	ar5
   0265 74r68              1093 	mov	a,#__str_10
   0267 C0 E0              1094 	push	acc
   0269 74s01              1095 	mov	a,#(__str_10 >> 8)
   026B C0 E0              1096 	push	acc
                           1097 ;	genCall
   026D 12s00r00           1098 	lcall	_printf_tiny
   0270 15 81              1099 	dec	sp
   0272 15 81              1100 	dec	sp
   0274 D0 05              1101 	pop	ar5
   0276 D0 04              1102 	pop	ar4
   0278 D0 03              1103 	pop	ar3
   027A D0 02              1104 	pop	ar2
                           1105 ;	main.c:111: f1[4]=get_hex();
                           1106 ;	genCall
   027C C0 02              1107 	push	ar2
   027E C0 03              1108 	push	ar3
   0280 C0 04              1109 	push	ar4
   0282 C0 05              1110 	push	ar5
   0284 12s09rA5           1111 	lcall	_get_hex
   0287 AE 82              1112 	mov	r6,dpl
   0289 AF 83              1113 	mov	r7,dph
   028B D0 05              1114 	pop	ar5
   028D D0 04              1115 	pop	ar4
   028F D0 03              1116 	pop	ar3
   0291 D0 02              1117 	pop	ar2
                           1118 ;	genCast
                           1119 ;	genPointerSet
                           1120 ;     genFarPointerSet
   0293 90s00r04           1121 	mov	dptr,#(_main_f1_1_1 + 0x0004)
   0296 EE                 1122 	mov	a,r6
   0297 F0                 1123 	movx	@dptr,a
                           1124 ;	main.c:112: printf_tiny("enter row6 value")  ;
                           1125 ;	genIpush
   0298 C0 02              1126 	push	ar2
   029A C0 03              1127 	push	ar3
   029C C0 04              1128 	push	ar4
   029E C0 05              1129 	push	ar5
   02A0 74r79              1130 	mov	a,#__str_11
   02A2 C0 E0              1131 	push	acc
   02A4 74s01              1132 	mov	a,#(__str_11 >> 8)
   02A6 C0 E0              1133 	push	acc
                           1134 ;	genCall
   02A8 12s00r00           1135 	lcall	_printf_tiny
   02AB 15 81              1136 	dec	sp
   02AD 15 81              1137 	dec	sp
   02AF D0 05              1138 	pop	ar5
   02B1 D0 04              1139 	pop	ar4
   02B3 D0 03              1140 	pop	ar3
   02B5 D0 02              1141 	pop	ar2
                           1142 ;	main.c:113: f1[5]=get_hex();
                           1143 ;	genCall
   02B7 C0 02              1144 	push	ar2
   02B9 C0 03              1145 	push	ar3
   02BB C0 04              1146 	push	ar4
   02BD C0 05              1147 	push	ar5
   02BF 12s09rA5           1148 	lcall	_get_hex
   02C2 AE 82              1149 	mov	r6,dpl
   02C4 AF 83              1150 	mov	r7,dph
   02C6 D0 05              1151 	pop	ar5
   02C8 D0 04              1152 	pop	ar4
   02CA D0 03              1153 	pop	ar3
   02CC D0 02              1154 	pop	ar2
                           1155 ;	genCast
                           1156 ;	genPointerSet
                           1157 ;     genFarPointerSet
   02CE 90s00r05           1158 	mov	dptr,#(_main_f1_1_1 + 0x0005)
   02D1 EE                 1159 	mov	a,r6
   02D2 F0                 1160 	movx	@dptr,a
                           1161 ;	main.c:114: printf_tiny("enter row7 value")  ;
                           1162 ;	genIpush
   02D3 C0 02              1163 	push	ar2
   02D5 C0 03              1164 	push	ar3
   02D7 C0 04              1165 	push	ar4
   02D9 C0 05              1166 	push	ar5
   02DB 74r8A              1167 	mov	a,#__str_12
   02DD C0 E0              1168 	push	acc
   02DF 74s01              1169 	mov	a,#(__str_12 >> 8)
   02E1 C0 E0              1170 	push	acc
                           1171 ;	genCall
   02E3 12s00r00           1172 	lcall	_printf_tiny
   02E6 15 81              1173 	dec	sp
   02E8 15 81              1174 	dec	sp
   02EA D0 05              1175 	pop	ar5
   02EC D0 04              1176 	pop	ar4
   02EE D0 03              1177 	pop	ar3
   02F0 D0 02              1178 	pop	ar2
                           1179 ;	main.c:115: f1[6]=get_hex();
                           1180 ;	genCall
   02F2 C0 02              1181 	push	ar2
   02F4 C0 03              1182 	push	ar3
   02F6 C0 04              1183 	push	ar4
   02F8 C0 05              1184 	push	ar5
   02FA 12s09rA5           1185 	lcall	_get_hex
   02FD AE 82              1186 	mov	r6,dpl
   02FF AF 83              1187 	mov	r7,dph
   0301 D0 05              1188 	pop	ar5
   0303 D0 04              1189 	pop	ar4
   0305 D0 03              1190 	pop	ar3
   0307 D0 02              1191 	pop	ar2
                           1192 ;	genCast
                           1193 ;	genPointerSet
                           1194 ;     genFarPointerSet
   0309 90s00r06           1195 	mov	dptr,#(_main_f1_1_1 + 0x0006)
   030C EE                 1196 	mov	a,r6
   030D F0                 1197 	movx	@dptr,a
                           1198 ;	main.c:116: printf_tiny("enter row8 value")  ;
                           1199 ;	genIpush
   030E C0 02              1200 	push	ar2
   0310 C0 03              1201 	push	ar3
   0312 C0 04              1202 	push	ar4
   0314 C0 05              1203 	push	ar5
   0316 74r9B              1204 	mov	a,#__str_13
   0318 C0 E0              1205 	push	acc
   031A 74s01              1206 	mov	a,#(__str_13 >> 8)
   031C C0 E0              1207 	push	acc
                           1208 ;	genCall
   031E 12s00r00           1209 	lcall	_printf_tiny
   0321 15 81              1210 	dec	sp
   0323 15 81              1211 	dec	sp
   0325 D0 05              1212 	pop	ar5
   0327 D0 04              1213 	pop	ar4
   0329 D0 03              1214 	pop	ar3
   032B D0 02              1215 	pop	ar2
                           1216 ;	main.c:117: f1[7]=get_hex();
                           1217 ;	genCall
   032D C0 02              1218 	push	ar2
   032F C0 03              1219 	push	ar3
   0331 C0 04              1220 	push	ar4
   0333 C0 05              1221 	push	ar5
   0335 12s09rA5           1222 	lcall	_get_hex
   0338 AE 82              1223 	mov	r6,dpl
   033A AF 83              1224 	mov	r7,dph
   033C D0 05              1225 	pop	ar5
   033E D0 04              1226 	pop	ar4
   0340 D0 03              1227 	pop	ar3
   0342 D0 02              1228 	pop	ar2
                           1229 ;	genCast
                           1230 ;	genPointerSet
                           1231 ;     genFarPointerSet
   0344 90s00r07           1232 	mov	dptr,#(_main_f1_1_1 + 0x0007)
   0347 EE                 1233 	mov	a,r6
   0348 F0                 1234 	movx	@dptr,a
                           1235 ;	main.c:118: lcdcreatechar(e,f1);
                           1236 ;	genCast
   0349 90s00r86           1237 	mov	dptr,#_lcdcreatechar_PARM_2
   034C 74r00              1238 	mov	a,#_main_f1_1_1
   034E F0                 1239 	movx	@dptr,a
   034F A3                 1240 	inc	dptr
   0350 74s00              1241 	mov	a,#(_main_f1_1_1 >> 8)
   0352 F0                 1242 	movx	@dptr,a
   0353 A3                 1243 	inc	dptr
   0354 74 00              1244 	mov	a,#0x0
   0356 F0                 1245 	movx	@dptr,a
                           1246 ;	genCall
   0357 8D 82              1247 	mov	dpl,r5
   0359 C0 02              1248 	push	ar2
   035B C0 03              1249 	push	ar3
   035D C0 04              1250 	push	ar4
   035F 12s09r2A           1251 	lcall	_lcdcreatechar
   0362 D0 04              1252 	pop	ar4
   0364 D0 03              1253 	pop	ar3
   0366 D0 02              1254 	pop	ar2
                           1255 ;	main.c:119: lcdgotoaddress(add1);// go the adress stored
                           1256 ;	genCall
   0368 8C 82              1257 	mov	dpl,r4
   036A C0 02              1258 	push	ar2
   036C C0 03              1259 	push	ar3
   036E 12s04r16           1260 	lcall	_lcdgotoaddress
   0371 D0 03              1261 	pop	ar3
   0373 D0 02              1262 	pop	ar2
   0375                    1263 00114$:
                           1264 ;	main.c:122: if(a==8)
                           1265 ;	genCmpEq
                           1266 ;	gencjneshort
                           1267 ;	Peephole 112.b	changed ljmp to sjmp
                           1268 ;	Peephole 198.a	optimized misc jump sequence
   0375 BA 08 36           1269 	cjne	r2,#0x08,00116$
   0378 BB 00 33           1270 	cjne	r3,#0x00,00116$
                           1271 ;	Peephole 200.b	removed redundant sjmp
                           1272 ;	Peephole 300	removed redundant label 00151$
                           1273 ;	Peephole 300	removed redundant label 00152$
                           1274 ;	main.c:124: printf_tiny("enter chracter code");
                           1275 ;	genIpush
   037B C0 02              1276 	push	ar2
   037D C0 03              1277 	push	ar3
   037F 74r10              1278 	mov	a,#__str_5
   0381 C0 E0              1279 	push	acc
   0383 74s01              1280 	mov	a,#(__str_5 >> 8)
   0385 C0 E0              1281 	push	acc
                           1282 ;	genCall
   0387 12s00r00           1283 	lcall	_printf_tiny
   038A 15 81              1284 	dec	sp
   038C 15 81              1285 	dec	sp
   038E D0 03              1286 	pop	ar3
   0390 D0 02              1287 	pop	ar2
                           1288 ;	main.c:125: g=get_hex();
                           1289 ;	genCall
   0392 C0 02              1290 	push	ar2
   0394 C0 03              1291 	push	ar3
   0396 12s09rA5           1292 	lcall	_get_hex
   0399 AC 82              1293 	mov	r4,dpl
   039B AD 83              1294 	mov	r5,dph
   039D D0 03              1295 	pop	ar3
   039F D0 02              1296 	pop	ar2
                           1297 ;	genCast
                           1298 ;	main.c:126: lcdputch(g) ;
                           1299 ;	genCall
   03A1 8C 82              1300 	mov	dpl,r4
   03A3 C0 02              1301 	push	ar2
   03A5 C0 03              1302 	push	ar3
   03A7 12s04rA9           1303 	lcall	_lcdputch
   03AA D0 03              1304 	pop	ar3
   03AC D0 02              1305 	pop	ar2
   03AE                    1306 00116$:
                           1307 ;	main.c:128: if(a==9)
                           1308 ;	genCmpEq
                           1309 ;	gencjneshort
                           1310 ;	Peephole 112.b	changed ljmp to sjmp
                           1311 ;	Peephole 198.a	optimized misc jump sequence
   03AE BA 09 0E           1312 	cjne	r2,#0x09,00118$
   03B1 BB 00 0B           1313 	cjne	r3,#0x00,00118$
                           1314 ;	Peephole 200.b	removed redundant sjmp
                           1315 ;	Peephole 300	removed redundant label 00153$
                           1316 ;	Peephole 300	removed redundant label 00154$
                           1317 ;	main.c:130: lcd_dump_ddram(); // dumping the contents of ddram
                           1318 ;	genCall
   03B4 C0 02              1319 	push	ar2
   03B6 C0 03              1320 	push	ar3
   03B8 12s0BrE0           1321 	lcall	_lcd_dump_ddram
   03BB D0 03              1322 	pop	ar3
   03BD D0 02              1323 	pop	ar2
   03BF                    1324 00118$:
                           1325 ;	main.c:132: if(a==10)
                           1326 ;	genCmpEq
                           1327 ;	gencjneshort
   03BF BA 0A 05           1328 	cjne	r2,#0x0A,00155$
   03C2 BB 00 02           1329 	cjne	r3,#0x00,00155$
   03C5 80 03              1330 	sjmp	00156$
   03C7                    1331 00155$:
   03C7 02s00r18           1332 	ljmp	00122$
   03CA                    1333 00156$:
                           1334 ;	main.c:134: lcd_dump_cgram();// dumping contents of cgram
                           1335 ;	genCall
   03CA 12s0Cr56           1336 	lcall	_lcd_dump_cgram
   03CD 02s00r18           1337 	ljmp	00122$
                           1338 ;	Peephole 259.b	removed redundant label 00124$ and ret
                           1339 ;
                           1340 ;------------------------------------------------------------
                           1341 ;Allocation info for local variables in function 'Lcd_init'
                           1342 ;------------------------------------------------------------
                           1343 ;------------------------------------------------------------
                           1344 ;	main.c:141: void Lcd_init() // initilising the lcd
                           1345 ;	-----------------------------------------
                           1346 ;	 function Lcd_init
                           1347 ;	-----------------------------------------
   03D0                    1348 _Lcd_init:
                           1349 ;	main.c:143: Delay_5ms();
                           1350 ;	genCall
   03D0 12s05rA8           1351 	lcall	_Delay_5ms
                           1352 ;	main.c:144: Delay_5ms();
                           1353 ;	genCall
   03D3 12s05rA8           1354 	lcall	_Delay_5ms
                           1355 ;	main.c:145: Delay_5ms(); // delay of 15ms
                           1356 ;	genCall
   03D6 12s05rA8           1357 	lcall	_Delay_5ms
                           1358 ;	main.c:146: *write_cmd = 0x38; //function set for lcd
                           1359 ;	genAssign
                           1360 ;	Peephole 182.b	used 16 bit load of dptr
   03D9 90 80 00           1361 	mov	dptr,#0x8000
                           1362 ;	genPointerSet
                           1363 ;     genFarPointerSet
   03DC 74 38              1364 	mov	a,#0x38
   03DE F0                 1365 	movx	@dptr,a
                           1366 ;	main.c:147: Delay_5ms();
                           1367 ;	genCall
   03DF 12s05rA8           1368 	lcall	_Delay_5ms
                           1369 ;	main.c:148: *write_cmd = 0x38;
                           1370 ;	genAssign
                           1371 ;	Peephole 182.b	used 16 bit load of dptr
   03E2 90 80 00           1372 	mov	dptr,#0x8000
                           1373 ;	genPointerSet
                           1374 ;     genFarPointerSet
   03E5 74 38              1375 	mov	a,#0x38
   03E7 F0                 1376 	movx	@dptr,a
                           1377 ;	main.c:149: Delay_5ms();
                           1378 ;	genCall
   03E8 12s05rA8           1379 	lcall	_Delay_5ms
                           1380 ;	main.c:150: *write_cmd = 0x38;
                           1381 ;	genAssign
                           1382 ;	Peephole 182.b	used 16 bit load of dptr
   03EB 90 80 00           1383 	mov	dptr,#0x8000
                           1384 ;	genPointerSet
                           1385 ;     genFarPointerSet
   03EE 74 38              1386 	mov	a,#0x38
   03F0 F0                 1387 	movx	@dptr,a
                           1388 ;	main.c:151: lcdbusywait();
                           1389 ;	genCall
   03F1 12s04r0D           1390 	lcall	_lcdbusywait
                           1391 ;	main.c:152: *write_cmd = 0x0E; //
                           1392 ;	genAssign
                           1393 ;	Peephole 182.b	used 16 bit load of dptr
   03F4 90 80 00           1394 	mov	dptr,#0x8000
                           1395 ;	genPointerSet
                           1396 ;     genFarPointerSet
   03F7 74 0E              1397 	mov	a,#0x0E
   03F9 F0                 1398 	movx	@dptr,a
                           1399 ;	main.c:153: lcdbusywait();
                           1400 ;	genCall
   03FA 12s04r0D           1401 	lcall	_lcdbusywait
                           1402 ;	main.c:154: *write_cmd = 0x01;// clear ddisplay command
                           1403 ;	genAssign
                           1404 ;	Peephole 182.b	used 16 bit load of dptr
   03FD 90 80 00           1405 	mov	dptr,#0x8000
                           1406 ;	genPointerSet
                           1407 ;     genFarPointerSet
   0400 74 01              1408 	mov	a,#0x01
   0402 F0                 1409 	movx	@dptr,a
                           1410 ;	main.c:155: lcdbusywait();
                           1411 ;	genCall
   0403 12s04r0D           1412 	lcall	_lcdbusywait
                           1413 ;	main.c:156: *write_cmd = 0x06; // entry mode set
                           1414 ;	genAssign
                           1415 ;	Peephole 182.b	used 16 bit load of dptr
   0406 90 80 00           1416 	mov	dptr,#0x8000
                           1417 ;	genPointerSet
                           1418 ;     genFarPointerSet
   0409 74 06              1419 	mov	a,#0x06
   040B F0                 1420 	movx	@dptr,a
                           1421 ;	Peephole 300	removed redundant label 00101$
   040C 22                 1422 	ret
                           1423 ;------------------------------------------------------------
                           1424 ;Allocation info for local variables in function 'lcdbusywait'
                           1425 ;------------------------------------------------------------
                           1426 ;------------------------------------------------------------
                           1427 ;	main.c:160: void lcdbusywait()
                           1428 ;	-----------------------------------------
                           1429 ;	 function lcdbusywait
                           1430 ;	-----------------------------------------
   040D                    1431 _lcdbusywait:
                           1432 ;	main.c:162: while(*read_cmd & 0x80); // checking the busy flag
   040D                    1433 00101$:
                           1434 ;	genAssign
                           1435 ;	Peephole 182.b	used 16 bit load of dptr
   040D 90 C0 00           1436 	mov	dptr,#0xC000
                           1437 ;	genPointerGet
                           1438 ;	genFarPointerGet
   0410 E0                 1439 	movx	a,@dptr
                           1440 ;	genAnd
   0411 FA                 1441 	mov	r2,a
                           1442 ;	Peephole 105	removed redundant mov
                           1443 ;	genIfxJump
                           1444 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0412 20 E7 F8           1445 	jb	acc.7,00101$
                           1446 ;	Peephole 300	removed redundant label 00107$
                           1447 ;	Peephole 300	removed redundant label 00104$
   0415 22                 1448 	ret
                           1449 ;------------------------------------------------------------
                           1450 ;Allocation info for local variables in function 'lcdgotoaddress'
                           1451 ;------------------------------------------------------------
                           1452 ;addr                      Allocated with name '_lcdgotoaddress_addr_1_1'
                           1453 ;------------------------------------------------------------
                           1454 ;	main.c:166: void lcdgotoaddress(uint8_t addr)
                           1455 ;	-----------------------------------------
                           1456 ;	 function lcdgotoaddress
                           1457 ;	-----------------------------------------
   0416                    1458 _lcdgotoaddress:
                           1459 ;	genReceive
   0416 E5 82              1460 	mov	a,dpl
   0418 90s00r08           1461 	mov	dptr,#_lcdgotoaddress_addr_1_1
   041B F0                 1462 	movx	@dptr,a
                           1463 ;	main.c:168: lcdbusywait();
                           1464 ;	genCall
   041C 12s04r0D           1465 	lcall	_lcdbusywait
                           1466 ;	main.c:169: *write_cmd = 0x80|addr; // taking address from user
                           1467 ;	genAssign
   041F 7A 00              1468 	mov	r2,#0x00
   0421 7B 80              1469 	mov	r3,#0x80
                           1470 ;	genAssign
   0423 90s00r08           1471 	mov	dptr,#_lcdgotoaddress_addr_1_1
   0426 E0                 1472 	movx	a,@dptr
   0427 FC                 1473 	mov	r4,a
                           1474 ;	genOr
   0428 43 04 80           1475 	orl	ar4,#0x80
                           1476 ;	genPointerSet
                           1477 ;     genFarPointerSet
   042B 8A 82              1478 	mov	dpl,r2
   042D 8B 83              1479 	mov	dph,r3
   042F EC                 1480 	mov	a,r4
   0430 F0                 1481 	movx	@dptr,a
                           1482 ;	Peephole 300	removed redundant label 00101$
   0431 22                 1483 	ret
                           1484 ;------------------------------------------------------------
                           1485 ;Allocation info for local variables in function 'lcdgotoxy'
                           1486 ;------------------------------------------------------------
                           1487 ;column                    Allocated with name '_lcdgotoxy_PARM_2'
                           1488 ;row                       Allocated with name '_lcdgotoxy_row_1_1'
                           1489 ;addr                      Allocated with name '_lcdgotoxy_addr_1_1'
                           1490 ;------------------------------------------------------------
                           1491 ;	main.c:172: void lcdgotoxy(unsigned int row, unsigned int column)// going to a particular row and column in the lcd
                           1492 ;	-----------------------------------------
                           1493 ;	 function lcdgotoxy
                           1494 ;	-----------------------------------------
   0432                    1495 _lcdgotoxy:
                           1496 ;	genReceive
   0432 AA 83              1497 	mov	r2,dph
   0434 E5 82              1498 	mov	a,dpl
   0436 90s00r0B           1499 	mov	dptr,#_lcdgotoxy_row_1_1
   0439 F0                 1500 	movx	@dptr,a
   043A A3                 1501 	inc	dptr
   043B EA                 1502 	mov	a,r2
   043C F0                 1503 	movx	@dptr,a
                           1504 ;	main.c:173: {   uint8_t addr=0;
                           1505 ;	genAssign
   043D 90s00r0D           1506 	mov	dptr,#_lcdgotoxy_addr_1_1
                           1507 ;	Peephole 181	changed mov to clr
   0440 E4                 1508 	clr	a
   0441 F0                 1509 	movx	@dptr,a
                           1510 ;	main.c:174: if(row==0 )  // going to a particular column in the 0th row
                           1511 ;	genAssign
   0442 90s00r0B           1512 	mov	dptr,#_lcdgotoxy_row_1_1
   0445 E0                 1513 	movx	a,@dptr
   0446 FA                 1514 	mov	r2,a
   0447 A3                 1515 	inc	dptr
   0448 E0                 1516 	movx	a,@dptr
                           1517 ;	genIfx
   0449 FB                 1518 	mov	r3,a
                           1519 ;	Peephole 135	removed redundant mov
   044A 4A                 1520 	orl	a,r2
                           1521 ;	genIfxJump
                           1522 ;	Peephole 108.b	removed ljmp by inverse jump logic
   044B 70 0F              1523 	jnz	00110$
                           1524 ;	Peephole 300	removed redundant label 00118$
                           1525 ;	main.c:176: addr=0x00+column;
                           1526 ;	genAssign
   044D 90s00r09           1527 	mov	dptr,#_lcdgotoxy_PARM_2
   0450 E0                 1528 	movx	a,@dptr
   0451 FC                 1529 	mov	r4,a
   0452 A3                 1530 	inc	dptr
   0453 E0                 1531 	movx	a,@dptr
   0454 FD                 1532 	mov	r5,a
                           1533 ;	genCast
   0455 90s00r0D           1534 	mov	dptr,#_lcdgotoxy_addr_1_1
   0458 EC                 1535 	mov	a,r4
   0459 F0                 1536 	movx	@dptr,a
                           1537 ;	Peephole 112.b	changed ljmp to sjmp
   045A 80 43              1538 	sjmp	00111$
   045C                    1539 00110$:
                           1540 ;	main.c:178: else if (row==1) //going to a particular column in the 1st row
                           1541 ;	genCmpEq
                           1542 ;	gencjneshort
                           1543 ;	Peephole 112.b	changed ljmp to sjmp
                           1544 ;	Peephole 198.a	optimized misc jump sequence
   045C BA 01 14           1545 	cjne	r2,#0x01,00107$
   045F BB 00 11           1546 	cjne	r3,#0x00,00107$
                           1547 ;	Peephole 200.b	removed redundant sjmp
                           1548 ;	Peephole 300	removed redundant label 00119$
                           1549 ;	Peephole 300	removed redundant label 00120$
                           1550 ;	main.c:180: addr=0x40+column;
                           1551 ;	genAssign
   0462 90s00r09           1552 	mov	dptr,#_lcdgotoxy_PARM_2
   0465 E0                 1553 	movx	a,@dptr
   0466 FC                 1554 	mov	r4,a
   0467 A3                 1555 	inc	dptr
   0468 E0                 1556 	movx	a,@dptr
   0469 FD                 1557 	mov	r5,a
                           1558 ;	genCast
                           1559 ;	genPlus
   046A 90s00r0D           1560 	mov	dptr,#_lcdgotoxy_addr_1_1
                           1561 ;     genPlusIncr
   046D 74 40              1562 	mov	a,#0x40
                           1563 ;	Peephole 236.a	used r4 instead of ar4
   046F 2C                 1564 	add	a,r4
   0470 F0                 1565 	movx	@dptr,a
                           1566 ;	Peephole 112.b	changed ljmp to sjmp
   0471 80 2C              1567 	sjmp	00111$
   0473                    1568 00107$:
                           1569 ;	main.c:182: else if(row==2) //going to a particular column in the 2nd row
                           1570 ;	genCmpEq
                           1571 ;	gencjneshort
                           1572 ;	Peephole 112.b	changed ljmp to sjmp
                           1573 ;	Peephole 198.a	optimized misc jump sequence
   0473 BA 02 14           1574 	cjne	r2,#0x02,00104$
   0476 BB 00 11           1575 	cjne	r3,#0x00,00104$
                           1576 ;	Peephole 200.b	removed redundant sjmp
                           1577 ;	Peephole 300	removed redundant label 00121$
                           1578 ;	Peephole 300	removed redundant label 00122$
                           1579 ;	main.c:184: addr=0x10+column;
                           1580 ;	genAssign
   0479 90s00r09           1581 	mov	dptr,#_lcdgotoxy_PARM_2
   047C E0                 1582 	movx	a,@dptr
   047D FC                 1583 	mov	r4,a
   047E A3                 1584 	inc	dptr
   047F E0                 1585 	movx	a,@dptr
   0480 FD                 1586 	mov	r5,a
                           1587 ;	genCast
                           1588 ;	genPlus
   0481 90s00r0D           1589 	mov	dptr,#_lcdgotoxy_addr_1_1
                           1590 ;     genPlusIncr
   0484 74 10              1591 	mov	a,#0x10
                           1592 ;	Peephole 236.a	used r4 instead of ar4
   0486 2C                 1593 	add	a,r4
   0487 F0                 1594 	movx	@dptr,a
                           1595 ;	Peephole 112.b	changed ljmp to sjmp
   0488 80 15              1596 	sjmp	00111$
   048A                    1597 00104$:
                           1598 ;	main.c:186: else if(row==3) //going to a particular column in the 3rd row
                           1599 ;	genCmpEq
                           1600 ;	gencjneshort
                           1601 ;	Peephole 112.b	changed ljmp to sjmp
                           1602 ;	Peephole 198.a	optimized misc jump sequence
   048A BA 03 12           1603 	cjne	r2,#0x03,00111$
   048D BB 00 0F           1604 	cjne	r3,#0x00,00111$
                           1605 ;	Peephole 200.b	removed redundant sjmp
                           1606 ;	Peephole 300	removed redundant label 00123$
                           1607 ;	Peephole 300	removed redundant label 00124$
                           1608 ;	main.c:188: addr=0x50+column;
                           1609 ;	genAssign
   0490 90s00r09           1610 	mov	dptr,#_lcdgotoxy_PARM_2
   0493 E0                 1611 	movx	a,@dptr
   0494 FA                 1612 	mov	r2,a
   0495 A3                 1613 	inc	dptr
   0496 E0                 1614 	movx	a,@dptr
   0497 FB                 1615 	mov	r3,a
                           1616 ;	genCast
                           1617 ;	genPlus
   0498 90s00r0D           1618 	mov	dptr,#_lcdgotoxy_addr_1_1
                           1619 ;     genPlusIncr
   049B 74 50              1620 	mov	a,#0x50
                           1621 ;	Peephole 236.a	used r2 instead of ar2
   049D 2A                 1622 	add	a,r2
   049E F0                 1623 	movx	@dptr,a
   049F                    1624 00111$:
                           1625 ;	main.c:190: lcdgotoaddress(addr);
                           1626 ;	genAssign
   049F 90s00r0D           1627 	mov	dptr,#_lcdgotoxy_addr_1_1
   04A2 E0                 1628 	movx	a,@dptr
                           1629 ;	genCall
   04A3 FA                 1630 	mov	r2,a
                           1631 ;	Peephole 244.c	loading dpl from a instead of r2
   04A4 F5 82              1632 	mov	dpl,a
                           1633 ;	Peephole 253.b	replaced lcall/ret with ljmp
   04A6 02s04r16           1634 	ljmp	_lcdgotoaddress
                           1635 ;
                           1636 ;------------------------------------------------------------
                           1637 ;Allocation info for local variables in function 'lcdputch'
                           1638 ;------------------------------------------------------------
                           1639 ;cc                        Allocated with name '_lcdputch_cc_1_1'
                           1640 ;------------------------------------------------------------
                           1641 ;	main.c:193: void lcdputch(char cc) // writing chracter in lcd
                           1642 ;	-----------------------------------------
                           1643 ;	 function lcdputch
                           1644 ;	-----------------------------------------
   04A9                    1645 _lcdputch:
                           1646 ;	genReceive
   04A9 E5 82              1647 	mov	a,dpl
   04AB 90s00r0E           1648 	mov	dptr,#_lcdputch_cc_1_1
   04AE F0                 1649 	movx	@dptr,a
                           1650 ;	main.c:195: lcdbusywait();
                           1651 ;	genCall
   04AF 12s04r0D           1652 	lcall	_lcdbusywait
                           1653 ;	main.c:196: *write_data=cc;
                           1654 ;	genAssign
   04B2 7A 00              1655 	mov	r2,#0x00
   04B4 7B A0              1656 	mov	r3,#0xA0
                           1657 ;	genAssign
   04B6 90s00r0E           1658 	mov	dptr,#_lcdputch_cc_1_1
   04B9 E0                 1659 	movx	a,@dptr
                           1660 ;	genPointerSet
                           1661 ;     genFarPointerSet
   04BA FC                 1662 	mov	r4,a
   04BB 8A 82              1663 	mov	dpl,r2
   04BD 8B 83              1664 	mov	dph,r3
                           1665 ;	Peephole 136	removed redundant move
   04BF F0                 1666 	movx	@dptr,a
                           1667 ;	Peephole 300	removed redundant label 00101$
   04C0 22                 1668 	ret
                           1669 ;------------------------------------------------------------
                           1670 ;Allocation info for local variables in function 'lcdclear'
                           1671 ;------------------------------------------------------------
                           1672 ;------------------------------------------------------------
                           1673 ;	main.c:199: void lcdclear()
                           1674 ;	-----------------------------------------
                           1675 ;	 function lcdclear
                           1676 ;	-----------------------------------------
   04C1                    1677 _lcdclear:
                           1678 ;	main.c:201: *write_cmd = 0x01; // comand for clearing the lcd display
                           1679 ;	genAssign
                           1680 ;	Peephole 182.b	used 16 bit load of dptr
   04C1 90 80 00           1681 	mov	dptr,#0x8000
                           1682 ;	genPointerSet
                           1683 ;     genFarPointerSet
   04C4 74 01              1684 	mov	a,#0x01
   04C6 F0                 1685 	movx	@dptr,a
                           1686 ;	Peephole 300	removed redundant label 00101$
   04C7 22                 1687 	ret
                           1688 ;------------------------------------------------------------
                           1689 ;Allocation info for local variables in function 'lcdputstr'
                           1690 ;------------------------------------------------------------
                           1691 ;ss                        Allocated with name '_lcdputstr_ss_1_1'
                           1692 ;add                       Allocated with name '_lcdputstr_add_1_1'
                           1693 ;------------------------------------------------------------
                           1694 ;	main.c:204: void lcdputstr(char *ss) // function for writing string in the lcd
                           1695 ;	-----------------------------------------
                           1696 ;	 function lcdputstr
                           1697 ;	-----------------------------------------
   04C8                    1698 _lcdputstr:
                           1699 ;	genReceive
   04C8 AA F0              1700 	mov	r2,b
   04CA AB 83              1701 	mov	r3,dph
   04CC E5 82              1702 	mov	a,dpl
   04CE 90s00r0F           1703 	mov	dptr,#_lcdputstr_ss_1_1
   04D1 F0                 1704 	movx	@dptr,a
   04D2 A3                 1705 	inc	dptr
   04D3 EB                 1706 	mov	a,r3
   04D4 F0                 1707 	movx	@dptr,a
   04D5 A3                 1708 	inc	dptr
   04D6 EA                 1709 	mov	a,r2
   04D7 F0                 1710 	movx	@dptr,a
                           1711 ;	main.c:206: add= *read_cmd & 0x7f; // reading address
                           1712 ;	genAssign
                           1713 ;	Peephole 182.b	used 16 bit load of dptr
   04D8 90 C0 00           1714 	mov	dptr,#0xC000
                           1715 ;	genPointerGet
                           1716 ;	genFarPointerGet
   04DB E0                 1717 	movx	a,@dptr
   04DC FA                 1718 	mov	r2,a
                           1719 ;	genAnd
   04DD 90s00r12           1720 	mov	dptr,#_lcdputstr_add_1_1
   04E0 74 7F              1721 	mov	a,#0x7F
   04E2 5A                 1722 	anl	a,r2
   04E3 F0                 1723 	movx	@dptr,a
                           1724 ;	main.c:207: while(*ss != '\0') // checking null character has been entered
                           1725 ;	genAssign
   04E4 90s00r0F           1726 	mov	dptr,#_lcdputstr_ss_1_1
   04E7 E0                 1727 	movx	a,@dptr
   04E8 FA                 1728 	mov	r2,a
   04E9 A3                 1729 	inc	dptr
   04EA E0                 1730 	movx	a,@dptr
   04EB FB                 1731 	mov	r3,a
   04EC A3                 1732 	inc	dptr
   04ED E0                 1733 	movx	a,@dptr
   04EE FC                 1734 	mov	r4,a
   04EF                    1735 00115$:
                           1736 ;	genPointerGet
                           1737 ;	genGenPointerGet
   04EF 8A 82              1738 	mov	dpl,r2
   04F1 8B 83              1739 	mov	dph,r3
   04F3 8C F0              1740 	mov	b,r4
   04F5 12s00r00           1741 	lcall	__gptrget
   04F8 FD                 1742 	mov	r5,a
                           1743 ;	genCmpEq
                           1744 ;	gencjneshort
   04F9 BD 00 03           1745 	cjne	r5,#0x00,00128$
   04FC 02s05r9C           1746 	ljmp	00127$
   04FF                    1747 00128$:
                           1748 ;	main.c:209: lcdbusywait();
                           1749 ;	genCall
   04FF C0 02              1750 	push	ar2
   0501 C0 03              1751 	push	ar3
   0503 C0 04              1752 	push	ar4
   0505 12s04r0D           1753 	lcall	_lcdbusywait
   0508 D0 04              1754 	pop	ar4
   050A D0 03              1755 	pop	ar3
   050C D0 02              1756 	pop	ar2
                           1757 ;	main.c:210: lcdputch(*(ss++));
                           1758 ;	genPointerGet
                           1759 ;	genGenPointerGet
   050E 8A 82              1760 	mov	dpl,r2
   0510 8B 83              1761 	mov	dph,r3
   0512 8C F0              1762 	mov	b,r4
   0514 12s00r00           1763 	lcall	__gptrget
   0517 FD                 1764 	mov	r5,a
   0518 A3                 1765 	inc	dptr
   0519 AA 82              1766 	mov	r2,dpl
   051B AB 83              1767 	mov	r3,dph
                           1768 ;	genAssign
   051D 90s00r0F           1769 	mov	dptr,#_lcdputstr_ss_1_1
   0520 EA                 1770 	mov	a,r2
   0521 F0                 1771 	movx	@dptr,a
   0522 A3                 1772 	inc	dptr
   0523 EB                 1773 	mov	a,r3
   0524 F0                 1774 	movx	@dptr,a
   0525 A3                 1775 	inc	dptr
   0526 EC                 1776 	mov	a,r4
   0527 F0                 1777 	movx	@dptr,a
                           1778 ;	genCall
   0528 8D 82              1779 	mov	dpl,r5
   052A C0 02              1780 	push	ar2
   052C C0 03              1781 	push	ar3
   052E C0 04              1782 	push	ar4
   0530 12s04rA9           1783 	lcall	_lcdputch
   0533 D0 04              1784 	pop	ar4
   0535 D0 03              1785 	pop	ar3
   0537 D0 02              1786 	pop	ar2
                           1787 ;	main.c:212: if (add%16==15) // lcd roll over condition
                           1788 ;	genAssign
   0539 90s00r12           1789 	mov	dptr,#_lcdputstr_add_1_1
   053C E0                 1790 	movx	a,@dptr
   053D FD                 1791 	mov	r5,a
                           1792 ;	genAnd
   053E 74 0F              1793 	mov	a,#0x0F
   0540 5D                 1794 	anl	a,r5
   0541 FE                 1795 	mov	r6,a
                           1796 ;	genCmpEq
                           1797 ;	gencjneshort
                           1798 ;	Peephole 112.b	changed ljmp to sjmp
                           1799 ;	Peephole 198.b	optimized misc jump sequence
   0542 BE 0F 4D           1800 	cjne	r6,#0x0F,00113$
                           1801 ;	Peephole 200.b	removed redundant sjmp
                           1802 ;	Peephole 300	removed redundant label 00129$
                           1803 ;	Peephole 300	removed redundant label 00130$
                           1804 ;	main.c:214: add=add&0xf0;
                           1805 ;	genAnd
   0545 90s00r12           1806 	mov	dptr,#_lcdputstr_add_1_1
   0548 74 F0              1807 	mov	a,#0xF0
   054A 5D                 1808 	anl	a,r5
   054B F0                 1809 	movx	@dptr,a
                           1810 ;	main.c:215: if (add==0x00)
                           1811 ;	genAssign
   054C 90s00r12           1812 	mov	dptr,#_lcdputstr_add_1_1
   054F E0                 1813 	movx	a,@dptr
                           1814 ;	genIfx
   0550 FE                 1815 	mov	r6,a
                           1816 ;	Peephole 105	removed redundant mov
                           1817 ;	genIfxJump
                           1818 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0551 70 08              1819 	jnz	00110$
                           1820 ;	Peephole 300	removed redundant label 00131$
                           1821 ;	main.c:218: add=(0x40);
                           1822 ;	genAssign
   0553 90s00r12           1823 	mov	dptr,#_lcdputstr_add_1_1
   0556 74 40              1824 	mov	a,#0x40
   0558 F0                 1825 	movx	@dptr,a
                           1826 ;	Peephole 112.b	changed ljmp to sjmp
   0559 80 1E              1827 	sjmp	00111$
   055B                    1828 00110$:
                           1829 ;	main.c:220: else if (add == 0x40)
                           1830 ;	genCmpEq
                           1831 ;	gencjneshort
                           1832 ;	Peephole 112.b	changed ljmp to sjmp
                           1833 ;	Peephole 198.b	optimized misc jump sequence
   055B BE 40 08           1834 	cjne	r6,#0x40,00107$
                           1835 ;	Peephole 200.b	removed redundant sjmp
                           1836 ;	Peephole 300	removed redundant label 00132$
                           1837 ;	Peephole 300	removed redundant label 00133$
                           1838 ;	main.c:222: add=(0x10);
                           1839 ;	genAssign
   055E 90s00r12           1840 	mov	dptr,#_lcdputstr_add_1_1
   0561 74 10              1841 	mov	a,#0x10
   0563 F0                 1842 	movx	@dptr,a
                           1843 ;	Peephole 112.b	changed ljmp to sjmp
   0564 80 13              1844 	sjmp	00111$
   0566                    1845 00107$:
                           1846 ;	main.c:224: else if (add == 0x10)
                           1847 ;	genCmpEq
                           1848 ;	gencjneshort
                           1849 ;	Peephole 112.b	changed ljmp to sjmp
                           1850 ;	Peephole 198.b	optimized misc jump sequence
   0566 BE 10 08           1851 	cjne	r6,#0x10,00104$
                           1852 ;	Peephole 200.b	removed redundant sjmp
                           1853 ;	Peephole 300	removed redundant label 00134$
                           1854 ;	Peephole 300	removed redundant label 00135$
                           1855 ;	main.c:226: add=(0x50);
                           1856 ;	genAssign
   0569 90s00r12           1857 	mov	dptr,#_lcdputstr_add_1_1
   056C 74 50              1858 	mov	a,#0x50
   056E F0                 1859 	movx	@dptr,a
                           1860 ;	Peephole 112.b	changed ljmp to sjmp
   056F 80 08              1861 	sjmp	00111$
   0571                    1862 00104$:
                           1863 ;	main.c:228: else if (add == 0x50 )
                           1864 ;	genCmpEq
                           1865 ;	gencjneshort
                           1866 ;	Peephole 112.b	changed ljmp to sjmp
                           1867 ;	Peephole 198.b	optimized misc jump sequence
   0571 BE 50 05           1868 	cjne	r6,#0x50,00111$
                           1869 ;	Peephole 200.b	removed redundant sjmp
                           1870 ;	Peephole 300	removed redundant label 00136$
                           1871 ;	Peephole 300	removed redundant label 00137$
                           1872 ;	main.c:230: add=(0x00);
                           1873 ;	genAssign
   0574 90s00r12           1874 	mov	dptr,#_lcdputstr_add_1_1
                           1875 ;	Peephole 181	changed mov to clr
   0577 E4                 1876 	clr	a
   0578 F0                 1877 	movx	@dptr,a
   0579                    1878 00111$:
                           1879 ;	main.c:233: lcdgotoaddress(add);
                           1880 ;	genAssign
   0579 90s00r12           1881 	mov	dptr,#_lcdputstr_add_1_1
   057C E0                 1882 	movx	a,@dptr
                           1883 ;	genCall
   057D FE                 1884 	mov	r6,a
                           1885 ;	Peephole 244.c	loading dpl from a instead of r6
   057E F5 82              1886 	mov	dpl,a
   0580 C0 02              1887 	push	ar2
   0582 C0 03              1888 	push	ar3
   0584 C0 04              1889 	push	ar4
   0586 12s04r16           1890 	lcall	_lcdgotoaddress
   0589 D0 04              1891 	pop	ar4
   058B D0 03              1892 	pop	ar3
   058D D0 02              1893 	pop	ar2
   058F 02s04rEF           1894 	ljmp	00115$
   0592                    1895 00113$:
                           1896 ;	main.c:237: add++;
                           1897 ;	genPlus
   0592 90s00r12           1898 	mov	dptr,#_lcdputstr_add_1_1
                           1899 ;     genPlusIncr
   0595 74 01              1900 	mov	a,#0x01
                           1901 ;	Peephole 236.a	used r5 instead of ar5
   0597 2D                 1902 	add	a,r5
   0598 F0                 1903 	movx	@dptr,a
   0599 02s04rEF           1904 	ljmp	00115$
   059C                    1905 00127$:
                           1906 ;	genAssign
   059C 90s00r0F           1907 	mov	dptr,#_lcdputstr_ss_1_1
   059F EA                 1908 	mov	a,r2
   05A0 F0                 1909 	movx	@dptr,a
   05A1 A3                 1910 	inc	dptr
   05A2 EB                 1911 	mov	a,r3
   05A3 F0                 1912 	movx	@dptr,a
   05A4 A3                 1913 	inc	dptr
   05A5 EC                 1914 	mov	a,r4
   05A6 F0                 1915 	movx	@dptr,a
                           1916 ;	Peephole 300	removed redundant label 00118$
   05A7 22                 1917 	ret
                           1918 ;------------------------------------------------------------
                           1919 ;Allocation info for local variables in function 'Delay_5ms'
                           1920 ;------------------------------------------------------------
                           1921 ;------------------------------------------------------------
                           1922 ;	main.c:246: void Delay_5ms()
                           1923 ;	-----------------------------------------
                           1924 ;	 function Delay_5ms
                           1925 ;	-----------------------------------------
   05A8                    1926 _Delay_5ms:
                           1927 ;	main.c:248: TMOD |= 0x01;           // Timer0 mode1
                           1928 ;	genOr
   05A8 43 89 01           1929 	orl	_TMOD,#0x01
                           1930 ;	main.c:249: TH0=0xFF;              //initial value for 5ms
                           1931 ;	genAssign
   05AB 75 8C FF           1932 	mov	_TH0,#0xFF
                           1933 ;	main.c:250: TL0=0xF6;
                           1934 ;	genAssign
   05AE 75 8A F6           1935 	mov	_TL0,#0xF6
                           1936 ;	main.c:251: TR0 = 1;               // timer0 start
                           1937 ;	genAssign
   05B1 D2 8C              1938 	setb	_TR0
                           1939 ;	main.c:252: while (TF0 == 0);      // check overflow condition
   05B3                    1940 00101$:
                           1941 ;	genIfx
                           1942 ;	genIfxJump
                           1943 ;	Peephole 108.d	removed ljmp by inverse jump logic
   05B3 30 8D FD           1944 	jnb	_TF0,00101$
                           1945 ;	Peephole 300	removed redundant label 00108$
                           1946 ;	main.c:253: TR0 = 0;               // Stop Timer
                           1947 ;	genAssign
   05B6 C2 8C              1948 	clr	_TR0
                           1949 ;	main.c:254: TF0 = 0;               // Clear flag
                           1950 ;	genAssign
   05B8 C2 8D              1951 	clr	_TF0
                           1952 ;	Peephole 300	removed redundant label 00104$
   05BA 22                 1953 	ret
                           1954 ;------------------------------------------------------------
                           1955 ;Allocation info for local variables in function 'serial_init'
                           1956 ;------------------------------------------------------------
                           1957 ;------------------------------------------------------------
                           1958 ;	main.c:257: void serial_init()
                           1959 ;	-----------------------------------------
                           1960 ;	 function serial_init
                           1961 ;	-----------------------------------------
   05BB                    1962 _serial_init:
                           1963 ;	main.c:259: TMOD = 0X20;
                           1964 ;	genAssign
   05BB 75 89 20           1965 	mov	_TMOD,#0x20
                           1966 ;	main.c:260: SCON = 0X50;
                           1967 ;	genAssign
   05BE 75 98 50           1968 	mov	_SCON,#0x50
                           1969 ;	main.c:261: TH1 = 0XFD;
                           1970 ;	genAssign
   05C1 75 8D FD           1971 	mov	_TH1,#0xFD
                           1972 ;	main.c:262: TR1 = 1;
                           1973 ;	genAssign
   05C4 D2 8E              1974 	setb	_TR1
                           1975 ;	Peephole 300	removed redundant label 00101$
   05C6 22                 1976 	ret
                           1977 ;------------------------------------------------------------
                           1978 ;Allocation info for local variables in function 'putchar'
                           1979 ;------------------------------------------------------------
                           1980 ;c                         Allocated with name '_putchar_c_1_1'
                           1981 ;------------------------------------------------------------
                           1982 ;	main.c:264: void putchar (char c)
                           1983 ;	-----------------------------------------
                           1984 ;	 function putchar
                           1985 ;	-----------------------------------------
   05C7                    1986 _putchar:
                           1987 ;	genReceive
   05C7 E5 82              1988 	mov	a,dpl
   05C9 90s00r13           1989 	mov	dptr,#_putchar_c_1_1
   05CC F0                 1990 	movx	@dptr,a
                           1991 ;	main.c:266: SBUF = c;    // load serial port with  transmit value
                           1992 ;	genAssign
   05CD 90s00r13           1993 	mov	dptr,#_putchar_c_1_1
   05D0 E0                 1994 	movx	a,@dptr
   05D1 F5 99              1995 	mov	_SBUF,a
                           1996 ;	main.c:267: while (!TI);
   05D3                    1997 00101$:
                           1998 ;	genIfx
                           1999 ;	genIfxJump
                           2000 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2001 ;	main.c:268: TI = 0;    // clear TI flag
                           2002 ;	genAssign
                           2003 ;	Peephole 250.a	using atomic test and clear
   05D3 10 99 02           2004 	jbc	_TI,00108$
   05D6 80 FB              2005 	sjmp	00101$
   05D8                    2006 00108$:
                           2007 ;	Peephole 300	removed redundant label 00104$
   05D8 22                 2008 	ret
                           2009 ;------------------------------------------------------------
                           2010 ;Allocation info for local variables in function 'getchar'
                           2011 ;------------------------------------------------------------
                           2012 ;r                         Allocated with name '_getchar_r_1_1'
                           2013 ;------------------------------------------------------------
                           2014 ;	main.c:270: char getchar ()
                           2015 ;	-----------------------------------------
                           2016 ;	 function getchar
                           2017 ;	-----------------------------------------
   05D9                    2018 _getchar:
                           2019 ;	main.c:273: while (!RI);
   05D9                    2020 00101$:
                           2021 ;	genIfx
                           2022 ;	genIfxJump
                           2023 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2024 ;	main.c:274: RI = 0;
                           2025 ;	genAssign
                           2026 ;	Peephole 250.a	using atomic test and clear
   05D9 10 98 02           2027 	jbc	_RI,00108$
   05DC 80 FB              2028 	sjmp	00101$
   05DE                    2029 00108$:
                           2030 ;	main.c:275: r = SBUF;  // clear RI flag
                           2031 ;	genAssign
   05DE AA 99              2032 	mov	r2,_SBUF
                           2033 ;	main.c:276: return r;    // return character from SBUF
                           2034 ;	genRet
   05E0 8A 82              2035 	mov	dpl,r2
                           2036 ;	Peephole 300	removed redundant label 00104$
   05E2 22                 2037 	ret
                           2038 ;------------------------------------------------------------
                           2039 ;Allocation info for local variables in function 'get_num'
                           2040 ;------------------------------------------------------------
                           2041 ;str                       Allocated with name '_get_num_str_1_1'
                           2042 ;i                         Allocated with name '_get_num_i_1_1'
                           2043 ;------------------------------------------------------------
                           2044 ;	main.c:279: int get_num()
                           2045 ;	-----------------------------------------
                           2046 ;	 function get_num
                           2047 ;	-----------------------------------------
   05E3                    2048 _get_num:
                           2049 ;	main.c:282: unsigned int i=0;
                           2050 ;	genAssign
   05E3 90s00r1E           2051 	mov	dptr,#_get_num_i_1_1
   05E6 E4                 2052 	clr	a
   05E7 F0                 2053 	movx	@dptr,a
   05E8 A3                 2054 	inc	dptr
   05E9 F0                 2055 	movx	@dptr,a
                           2056 ;	main.c:283: while(1)
   05EA                    2057 00112$:
                           2058 ;	main.c:285: str[i]=getchar();
                           2059 ;	genAssign
   05EA 90s00r1E           2060 	mov	dptr,#_get_num_i_1_1
   05ED E0                 2061 	movx	a,@dptr
   05EE FA                 2062 	mov	r2,a
   05EF A3                 2063 	inc	dptr
   05F0 E0                 2064 	movx	a,@dptr
   05F1 FB                 2065 	mov	r3,a
                           2066 ;	genPlus
                           2067 ;	Peephole 236.g	used r2 instead of ar2
   05F2 EA                 2068 	mov	a,r2
   05F3 24r14              2069 	add	a,#_get_num_str_1_1
   05F5 FC                 2070 	mov	r4,a
                           2071 ;	Peephole 236.g	used r3 instead of ar3
   05F6 EB                 2072 	mov	a,r3
   05F7 34s00              2073 	addc	a,#(_get_num_str_1_1 >> 8)
   05F9 FD                 2074 	mov	r5,a
                           2075 ;	genCall
   05FA C0 02              2076 	push	ar2
   05FC C0 03              2077 	push	ar3
   05FE C0 04              2078 	push	ar4
   0600 C0 05              2079 	push	ar5
   0602 12s05rD9           2080 	lcall	_getchar
   0605 AE 82              2081 	mov	r6,dpl
   0607 D0 05              2082 	pop	ar5
   0609 D0 04              2083 	pop	ar4
   060B D0 03              2084 	pop	ar3
   060D D0 02              2085 	pop	ar2
                           2086 ;	genPointerSet
                           2087 ;     genFarPointerSet
   060F 8C 82              2088 	mov	dpl,r4
   0611 8D 83              2089 	mov	dph,r5
   0613 EE                 2090 	mov	a,r6
   0614 F0                 2091 	movx	@dptr,a
                           2092 ;	main.c:286: if(str[i]=='\r')
                           2093 ;	genCmpEq
                           2094 ;	gencjneshort
                           2095 ;	Peephole 112.b	changed ljmp to sjmp
                           2096 ;	Peephole 198.b	optimized misc jump sequence
   0615 BE 0D 15           2097 	cjne	r6,#0x0D,00109$
                           2098 ;	Peephole 200.b	removed redundant sjmp
                           2099 ;	Peephole 300	removed redundant label 00121$
                           2100 ;	Peephole 300	removed redundant label 00122$
                           2101 ;	main.c:288: str[i]='\0';
                           2102 ;	genPointerSet
                           2103 ;     genFarPointerSet
   0618 8C 82              2104 	mov	dpl,r4
   061A 8D 83              2105 	mov	dph,r5
                           2106 ;	Peephole 181	changed mov to clr
   061C E4                 2107 	clr	a
   061D F0                 2108 	movx	@dptr,a
                           2109 ;	main.c:289: putchar('\n');
                           2110 ;	genCall
   061E 75 82 0A           2111 	mov	dpl,#0x0A
   0621 12s05rC7           2112 	lcall	_putchar
                           2113 ;	main.c:290: putchar('\r');
                           2114 ;	genCall
   0624 75 82 0D           2115 	mov	dpl,#0x0D
   0627 12s05rC7           2116 	lcall	_putchar
                           2117 ;	main.c:291: break;
   062A 02s06rC7           2118 	ljmp	00113$
   062D                    2119 00109$:
                           2120 ;	main.c:293: else if(str[i]==0x7f)
                           2121 ;	genPointerGet
                           2122 ;	genFarPointerGet
   062D 8C 82              2123 	mov	dpl,r4
   062F 8D 83              2124 	mov	dph,r5
   0631 E0                 2125 	movx	a,@dptr
   0632 FE                 2126 	mov	r6,a
                           2127 ;	genCmpEq
                           2128 ;	gencjneshort
                           2129 ;	Peephole 112.b	changed ljmp to sjmp
                           2130 ;	Peephole 198.b	optimized misc jump sequence
   0633 BE 7F 20           2131 	cjne	r6,#0x7F,00106$
                           2132 ;	Peephole 200.b	removed redundant sjmp
                           2133 ;	Peephole 300	removed redundant label 00123$
                           2134 ;	Peephole 300	removed redundant label 00124$
                           2135 ;	main.c:295: putchar(0x7f);
                           2136 ;	genCall
   0636 75 82 7F           2137 	mov	dpl,#0x7F
   0639 C0 02              2138 	push	ar2
   063B C0 03              2139 	push	ar3
   063D 12s05rC7           2140 	lcall	_putchar
   0640 D0 03              2141 	pop	ar3
   0642 D0 02              2142 	pop	ar2
                           2143 ;	main.c:296: i--;
                           2144 ;	genMinus
                           2145 ;	genMinusDec
   0644 EA                 2146 	mov	a,r2
   0645 24 FF              2147 	add	a,#0xff
   0647 FE                 2148 	mov	r6,a
   0648 EB                 2149 	mov	a,r3
   0649 34 FF              2150 	addc	a,#0xff
   064B FF                 2151 	mov	r7,a
                           2152 ;	genAssign
   064C 90s00r1E           2153 	mov	dptr,#_get_num_i_1_1
   064F EE                 2154 	mov	a,r6
   0650 F0                 2155 	movx	@dptr,a
   0651 A3                 2156 	inc	dptr
   0652 EF                 2157 	mov	a,r7
   0653 F0                 2158 	movx	@dptr,a
                           2159 ;	Peephole 112.b	changed ljmp to sjmp
   0654 80 94              2160 	sjmp	00112$
   0656                    2161 00106$:
                           2162 ;	main.c:298: else if(str[i]>='0'&&str[1]<='9')
                           2163 ;	genPointerGet
                           2164 ;	genFarPointerGet
   0656 8C 82              2165 	mov	dpl,r4
   0658 8D 83              2166 	mov	dph,r5
   065A E0                 2167 	movx	a,@dptr
                           2168 ;	genCmpLt
                           2169 ;	genCmp
   065B FE                 2170 	mov	r6,a
   065C C3                 2171 	clr	c
                           2172 ;	Peephole 106	removed redundant mov
   065D 64 80              2173 	xrl	a,#0x80
   065F 94 B0              2174 	subb	a,#0xb0
                           2175 ;	genIfxJump
                           2176 ;	Peephole 112.b	changed ljmp to sjmp
                           2177 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0661 40 32              2178 	jc	00102$
                           2179 ;	Peephole 300	removed redundant label 00125$
                           2180 ;	genPointerGet
                           2181 ;	genFarPointerGet
   0663 90s00r15           2182 	mov	dptr,#(_get_num_str_1_1 + 0x0001)
   0666 E0                 2183 	movx	a,@dptr
   0667 FE                 2184 	mov	r6,a
                           2185 ;	genCmpGt
                           2186 ;	genCmp
   0668 C3                 2187 	clr	c
                           2188 ;	Peephole 159	avoided xrl during execution
   0669 74 B9              2189 	mov	a,#(0x39 ^ 0x80)
   066B 8E F0              2190 	mov	b,r6
   066D 63 F0 80           2191 	xrl	b,#0x80
   0670 95 F0              2192 	subb	a,b
                           2193 ;	genIfxJump
                           2194 ;	Peephole 112.b	changed ljmp to sjmp
                           2195 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0672 40 21              2196 	jc	00102$
                           2197 ;	Peephole 300	removed redundant label 00126$
                           2198 ;	main.c:300: putchar(str[i]);
                           2199 ;	genPointerGet
                           2200 ;	genFarPointerGet
   0674 8C 82              2201 	mov	dpl,r4
   0676 8D 83              2202 	mov	dph,r5
   0678 E0                 2203 	movx	a,@dptr
                           2204 ;	genCall
   0679 FC                 2205 	mov	r4,a
                           2206 ;	Peephole 244.c	loading dpl from a instead of r4
   067A F5 82              2207 	mov	dpl,a
   067C C0 02              2208 	push	ar2
   067E C0 03              2209 	push	ar3
   0680 12s05rC7           2210 	lcall	_putchar
   0683 D0 03              2211 	pop	ar3
   0685 D0 02              2212 	pop	ar2
                           2213 ;	main.c:301: i+=1;
                           2214 ;	genPlus
   0687 90s00r1E           2215 	mov	dptr,#_get_num_i_1_1
                           2216 ;     genPlusIncr
   068A 74 01              2217 	mov	a,#0x01
                           2218 ;	Peephole 236.a	used r2 instead of ar2
   068C 2A                 2219 	add	a,r2
   068D F0                 2220 	movx	@dptr,a
                           2221 ;	Peephole 181	changed mov to clr
   068E E4                 2222 	clr	a
                           2223 ;	Peephole 236.b	used r3 instead of ar3
   068F 3B                 2224 	addc	a,r3
   0690 A3                 2225 	inc	dptr
   0691 F0                 2226 	movx	@dptr,a
   0692 02s05rEA           2227 	ljmp	00112$
   0695                    2228 00102$:
                           2229 ;	main.c:304: putchar(str[i]);
                           2230 ;	genAssign
   0695 90s00r1E           2231 	mov	dptr,#_get_num_i_1_1
   0698 E0                 2232 	movx	a,@dptr
   0699 FA                 2233 	mov	r2,a
   069A A3                 2234 	inc	dptr
   069B E0                 2235 	movx	a,@dptr
   069C FB                 2236 	mov	r3,a
                           2237 ;	genPlus
                           2238 ;	Peephole 236.g	used r2 instead of ar2
   069D EA                 2239 	mov	a,r2
   069E 24r14              2240 	add	a,#_get_num_str_1_1
   06A0 F5 82              2241 	mov	dpl,a
                           2242 ;	Peephole 236.g	used r3 instead of ar3
   06A2 EB                 2243 	mov	a,r3
   06A3 34s00              2244 	addc	a,#(_get_num_str_1_1 >> 8)
   06A5 F5 83              2245 	mov	dph,a
                           2246 ;	genPointerGet
                           2247 ;	genFarPointerGet
   06A7 E0                 2248 	movx	a,@dptr
                           2249 ;	genCall
   06A8 FA                 2250 	mov	r2,a
                           2251 ;	Peephole 244.c	loading dpl from a instead of r2
   06A9 F5 82              2252 	mov	dpl,a
   06AB 12s05rC7           2253 	lcall	_putchar
                           2254 ;	main.c:305: printf_tiny("not valid enter again \n\r");
                           2255 ;	genIpush
   06AE 74rAC              2256 	mov	a,#__str_14
   06B0 C0 E0              2257 	push	acc
   06B2 74s01              2258 	mov	a,#(__str_14 >> 8)
   06B4 C0 E0              2259 	push	acc
                           2260 ;	genCall
   06B6 12s00r00           2261 	lcall	_printf_tiny
   06B9 15 81              2262 	dec	sp
   06BB 15 81              2263 	dec	sp
                           2264 ;	main.c:306: i=0;
                           2265 ;	genAssign
   06BD 90s00r1E           2266 	mov	dptr,#_get_num_i_1_1
   06C0 E4                 2267 	clr	a
   06C1 F0                 2268 	movx	@dptr,a
   06C2 A3                 2269 	inc	dptr
   06C3 F0                 2270 	movx	@dptr,a
   06C4 02s05rEA           2271 	ljmp	00112$
   06C7                    2272 00113$:
                           2273 ;	main.c:309: return atoi(str);
                           2274 ;	genCall
                           2275 ;	Peephole 182.a	used 16 bit load of DPTR
   06C7 90s00r14           2276 	mov	dptr,#_get_num_str_1_1
   06CA 75 F0 00           2277 	mov	b,#0x00
                           2278 ;	genRet
                           2279 ;	Peephole 150.b	removed misc moves via dph, dpl before return
                           2280 ;	Peephole 253.b	replaced lcall/ret with ljmp
   06CD 02s00r00           2281 	ljmp	_atoi
                           2282 ;
                           2283 ;------------------------------------------------------------
                           2284 ;Allocation info for local variables in function 'get_str'
                           2285 ;------------------------------------------------------------
                           2286 ;str                       Allocated with name '_get_str_str_1_1'
                           2287 ;i                         Allocated with name '_get_str_i_1_1'
                           2288 ;------------------------------------------------------------
                           2289 ;	main.c:316: char* get_str()
                           2290 ;	-----------------------------------------
                           2291 ;	 function get_str
                           2292 ;	-----------------------------------------
   06D0                    2293 _get_str:
                           2294 ;	main.c:319: unsigned int i=0;
                           2295 ;	genAssign
   06D0 90s00r84           2296 	mov	dptr,#_get_str_i_1_1
   06D3 E4                 2297 	clr	a
   06D4 F0                 2298 	movx	@dptr,a
   06D5 A3                 2299 	inc	dptr
   06D6 F0                 2300 	movx	@dptr,a
                           2301 ;	main.c:320: while(1)
   06D7                    2302 00108$:
                           2303 ;	main.c:322: str[i]=getchar();
                           2304 ;	genAssign
   06D7 90s00r84           2305 	mov	dptr,#_get_str_i_1_1
   06DA E0                 2306 	movx	a,@dptr
   06DB FA                 2307 	mov	r2,a
   06DC A3                 2308 	inc	dptr
   06DD E0                 2309 	movx	a,@dptr
   06DE FB                 2310 	mov	r3,a
                           2311 ;	genPlus
                           2312 ;	Peephole 236.g	used r2 instead of ar2
   06DF EA                 2313 	mov	a,r2
   06E0 24r20              2314 	add	a,#_get_str_str_1_1
   06E2 FC                 2315 	mov	r4,a
                           2316 ;	Peephole 236.g	used r3 instead of ar3
   06E3 EB                 2317 	mov	a,r3
   06E4 34s00              2318 	addc	a,#(_get_str_str_1_1 >> 8)
   06E6 FD                 2319 	mov	r5,a
                           2320 ;	genCall
   06E7 C0 02              2321 	push	ar2
   06E9 C0 03              2322 	push	ar3
   06EB C0 04              2323 	push	ar4
   06ED C0 05              2324 	push	ar5
   06EF 12s05rD9           2325 	lcall	_getchar
   06F2 AE 82              2326 	mov	r6,dpl
   06F4 D0 05              2327 	pop	ar5
   06F6 D0 04              2328 	pop	ar4
   06F8 D0 03              2329 	pop	ar3
   06FA D0 02              2330 	pop	ar2
                           2331 ;	genPointerSet
                           2332 ;     genFarPointerSet
   06FC 8C 82              2333 	mov	dpl,r4
   06FE 8D 83              2334 	mov	dph,r5
   0700 EE                 2335 	mov	a,r6
   0701 F0                 2336 	movx	@dptr,a
                           2337 ;	main.c:323: if(str[i]=='\r')
                           2338 ;	genCmpEq
                           2339 ;	gencjneshort
                           2340 ;	Peephole 112.b	changed ljmp to sjmp
                           2341 ;	Peephole 198.b	optimized misc jump sequence
   0702 BE 0D 14           2342 	cjne	r6,#0x0D,00105$
                           2343 ;	Peephole 200.b	removed redundant sjmp
                           2344 ;	Peephole 300	removed redundant label 00115$
                           2345 ;	Peephole 300	removed redundant label 00116$
                           2346 ;	main.c:325: str[i]='\0';
                           2347 ;	genPointerSet
                           2348 ;     genFarPointerSet
   0705 8C 82              2349 	mov	dpl,r4
   0707 8D 83              2350 	mov	dph,r5
                           2351 ;	Peephole 181	changed mov to clr
   0709 E4                 2352 	clr	a
   070A F0                 2353 	movx	@dptr,a
                           2354 ;	main.c:326: putchar('\n');
                           2355 ;	genCall
   070B 75 82 0A           2356 	mov	dpl,#0x0A
   070E 12s05rC7           2357 	lcall	_putchar
                           2358 ;	main.c:327: putchar('\r');
                           2359 ;	genCall
   0711 75 82 0D           2360 	mov	dpl,#0x0D
   0714 12s05rC7           2361 	lcall	_putchar
                           2362 ;	main.c:328: break;
                           2363 ;	Peephole 112.b	changed ljmp to sjmp
   0717 80 4A              2364 	sjmp	00109$
   0719                    2365 00105$:
                           2366 ;	main.c:330: else if(str[i]==0x7f)
                           2367 ;	genPointerGet
                           2368 ;	genFarPointerGet
   0719 8C 82              2369 	mov	dpl,r4
   071B 8D 83              2370 	mov	dph,r5
   071D E0                 2371 	movx	a,@dptr
   071E FE                 2372 	mov	r6,a
                           2373 ;	genCmpEq
                           2374 ;	gencjneshort
                           2375 ;	Peephole 112.b	changed ljmp to sjmp
                           2376 ;	Peephole 198.b	optimized misc jump sequence
   071F BE 7F 20           2377 	cjne	r6,#0x7F,00102$
                           2378 ;	Peephole 200.b	removed redundant sjmp
                           2379 ;	Peephole 300	removed redundant label 00117$
                           2380 ;	Peephole 300	removed redundant label 00118$
                           2381 ;	main.c:332: putchar(0x7f);
                           2382 ;	genCall
   0722 75 82 7F           2383 	mov	dpl,#0x7F
   0725 C0 02              2384 	push	ar2
   0727 C0 03              2385 	push	ar3
   0729 12s05rC7           2386 	lcall	_putchar
   072C D0 03              2387 	pop	ar3
   072E D0 02              2388 	pop	ar2
                           2389 ;	main.c:333: i--;
                           2390 ;	genMinus
                           2391 ;	genMinusDec
   0730 EA                 2392 	mov	a,r2
   0731 24 FF              2393 	add	a,#0xff
   0733 FE                 2394 	mov	r6,a
   0734 EB                 2395 	mov	a,r3
   0735 34 FF              2396 	addc	a,#0xff
   0737 FF                 2397 	mov	r7,a
                           2398 ;	genAssign
   0738 90s00r84           2399 	mov	dptr,#_get_str_i_1_1
   073B EE                 2400 	mov	a,r6
   073C F0                 2401 	movx	@dptr,a
   073D A3                 2402 	inc	dptr
   073E EF                 2403 	mov	a,r7
   073F F0                 2404 	movx	@dptr,a
                           2405 ;	Peephole 112.b	changed ljmp to sjmp
   0740 80 95              2406 	sjmp	00108$
   0742                    2407 00102$:
                           2408 ;	main.c:336: {putchar(str[i]);
                           2409 ;	genPointerGet
                           2410 ;	genFarPointerGet
   0742 8C 82              2411 	mov	dpl,r4
   0744 8D 83              2412 	mov	dph,r5
   0746 E0                 2413 	movx	a,@dptr
                           2414 ;	genCall
   0747 FC                 2415 	mov	r4,a
                           2416 ;	Peephole 244.c	loading dpl from a instead of r4
   0748 F5 82              2417 	mov	dpl,a
   074A C0 02              2418 	push	ar2
   074C C0 03              2419 	push	ar3
   074E 12s05rC7           2420 	lcall	_putchar
   0751 D0 03              2421 	pop	ar3
   0753 D0 02              2422 	pop	ar2
                           2423 ;	main.c:337: i+=1;
                           2424 ;	genPlus
   0755 90s00r84           2425 	mov	dptr,#_get_str_i_1_1
                           2426 ;     genPlusIncr
   0758 74 01              2427 	mov	a,#0x01
                           2428 ;	Peephole 236.a	used r2 instead of ar2
   075A 2A                 2429 	add	a,r2
   075B F0                 2430 	movx	@dptr,a
                           2431 ;	Peephole 181	changed mov to clr
   075C E4                 2432 	clr	a
                           2433 ;	Peephole 236.b	used r3 instead of ar3
   075D 3B                 2434 	addc	a,r3
   075E A3                 2435 	inc	dptr
   075F F0                 2436 	movx	@dptr,a
   0760 02s06rD7           2437 	ljmp	00108$
   0763                    2438 00109$:
                           2439 ;	main.c:341: return str;
                           2440 ;	genRet
                           2441 ;	Peephole 182.a	used 16 bit load of DPTR
   0763 90s00r20           2442 	mov	dptr,#_get_str_str_1_1
   0766 75 F0 00           2443 	mov	b,#0x00
                           2444 ;	Peephole 300	removed redundant label 00110$
   0769 22                 2445 	ret
                           2446 ;------------------------------------------------------------
                           2447 ;Allocation info for local variables in function 'start_clock'
                           2448 ;------------------------------------------------------------
                           2449 ;------------------------------------------------------------
                           2450 ;	main.c:344: void start_clock()
                           2451 ;	-----------------------------------------
                           2452 ;	 function start_clock
                           2453 ;	-----------------------------------------
   076A                    2454 _start_clock:
                           2455 ;	main.c:346: IEN0=0xA0;     // enabling timer 2 interrrupt
                           2456 ;	genAssign
   076A 75 A8 A0           2457 	mov	_IEN0,#0xA0
                           2458 ;	main.c:347: T2CON=0x00;    // timer 2 control register set
                           2459 ;	genAssign
   076D 75 C8 00           2460 	mov	_T2CON,#0x00
                           2461 ;	main.c:348: T2MOD=0x00;   // timer 2  mode register set
                           2462 ;	genAssign
   0770 75 C9 00           2463 	mov	_T2MOD,#0x00
                           2464 ;	main.c:349: RCAP2H=0x4C;    // timer 2 set for 50 milliseconds
                           2465 ;	genAssign
   0773 75 CB 4C           2466 	mov	_RCAP2H,#0x4C
                           2467 ;	main.c:350: RCAP2L=0x00;
                           2468 ;	genAssign
   0776 75 CA 00           2469 	mov	_RCAP2L,#0x00
                           2470 ;	main.c:351: TR2=1;       // starting timer 2
                           2471 ;	genAssign
   0779 D2 CA              2472 	setb	_TR2
                           2473 ;	Peephole 300	removed redundant label 00101$
   077B 22                 2474 	ret
                           2475 ;------------------------------------------------------------
                           2476 ;Allocation info for local variables in function 'stop_clock'
                           2477 ;------------------------------------------------------------
                           2478 ;------------------------------------------------------------
                           2479 ;	main.c:354: void stop_clock()
                           2480 ;	-----------------------------------------
                           2481 ;	 function stop_clock
                           2482 ;	-----------------------------------------
   077C                    2483 _stop_clock:
                           2484 ;	main.c:356: TF2=0;
                           2485 ;	genAssign
   077C C2 CF              2486 	clr	_TF2
                           2487 ;	main.c:357: TR2=0;
                           2488 ;	genAssign
   077E C2 CA              2489 	clr	_TR2
                           2490 ;	Peephole 300	removed redundant label 00101$
   0780 22                 2491 	ret
                           2492 ;------------------------------------------------------------
                           2493 ;Allocation info for local variables in function 'reset_clock'
                           2494 ;------------------------------------------------------------
                           2495 ;------------------------------------------------------------
                           2496 ;	main.c:360: void reset_clock()
                           2497 ;	-----------------------------------------
                           2498 ;	 function reset_clock
                           2499 ;	-----------------------------------------
   0781                    2500 _reset_clock:
                           2501 ;	main.c:362: TR2=0;         //STOP TIMER 1
                           2502 ;	genAssign
   0781 C2 CA              2503 	clr	_TR2
                           2504 ;	main.c:363: TH2=0X4C;      //reload count
                           2505 ;	genAssign
   0783 75 CD 4C           2506 	mov	_TH2,#0x4C
                           2507 ;	main.c:364: TL2=0X00;
                           2508 ;	genAssign
   0786 75 CC 00           2509 	mov	_TL2,#0x00
                           2510 ;	main.c:365: hundrdmilli='0';  //clear all variables
                           2511 ;	genAssign
   0789 90s00r01           2512 	mov	dptr,#_hundrdmilli
   078C 74 30              2513 	mov	a,#0x30
   078E F0                 2514 	movx	@dptr,a
                           2515 ;	main.c:366: secs0='0';
                           2516 ;	genAssign
   078F 90s00r03           2517 	mov	dptr,#_secs0
   0792 74 30              2518 	mov	a,#0x30
   0794 F0                 2519 	movx	@dptr,a
                           2520 ;	main.c:367: secs1='0';
                           2521 ;	genAssign
   0795 90s00r02           2522 	mov	dptr,#_secs1
   0798 74 30              2523 	mov	a,#0x30
   079A F0                 2524 	movx	@dptr,a
                           2525 ;	main.c:368: mins0='0';
                           2526 ;	genAssign
   079B 90s00r05           2527 	mov	dptr,#_mins0
   079E 74 30              2528 	mov	a,#0x30
   07A0 F0                 2529 	movx	@dptr,a
                           2530 ;	main.c:369: mins1='0';
                           2531 ;	genAssign
   07A1 90s00r04           2532 	mov	dptr,#_mins1
   07A4 74 30              2533 	mov	a,#0x30
   07A6 F0                 2534 	movx	@dptr,a
                           2535 ;	main.c:370: ctr=0;
                           2536 ;	genAssign
   07A7 90s00r00           2537 	mov	dptr,#_ctr
                           2538 ;	Peephole 181	changed mov to clr
   07AA E4                 2539 	clr	a
   07AB F0                 2540 	movx	@dptr,a
                           2541 ;	main.c:371: TR2=1;          //restart timer
                           2542 ;	genAssign
   07AC D2 CA              2543 	setb	_TR2
                           2544 ;	Peephole 300	removed redundant label 00101$
   07AE 22                 2545 	ret
                           2546 ;------------------------------------------------------------
                           2547 ;Allocation info for local variables in function 'isr23'
                           2548 ;------------------------------------------------------------
                           2549 ;add                       Allocated with name '_isr23_add_1_1'
                           2550 ;------------------------------------------------------------
                           2551 ;	main.c:374: void isr23() __interrupt(5) // when timer 2 overflows enter the ISR
                           2552 ;	-----------------------------------------
                           2553 ;	 function isr23
                           2554 ;	-----------------------------------------
   07AF                    2555 _isr23:
   07AF C0 E0              2556 	push	acc
   07B1 C0 F0              2557 	push	b
   07B3 C0 82              2558 	push	dpl
   07B5 C0 83              2559 	push	dph
   07B7 C0 02              2560 	push	(0+2)
   07B9 C0 03              2561 	push	(0+3)
   07BB C0 04              2562 	push	(0+4)
   07BD C0 05              2563 	push	(0+5)
   07BF C0 06              2564 	push	(0+6)
   07C1 C0 07              2565 	push	(0+7)
   07C3 C0 00              2566 	push	(0+0)
   07C5 C0 01              2567 	push	(0+1)
   07C7 C0 D0              2568 	push	psw
   07C9 75 D0 00           2569 	mov	psw,#0x00
                           2570 ;	main.c:376: TF2=0; // clear timer flag
                           2571 ;	genAssign
   07CC C2 CF              2572 	clr	_TF2
                           2573 ;	main.c:377: if(ctr==0)
                           2574 ;	genAssign
   07CE 90s00r00           2575 	mov	dptr,#_ctr
   07D1 E0                 2576 	movx	a,@dptr
                           2577 ;	genIfx
   07D2 FA                 2578 	mov	r2,a
                           2579 ;	Peephole 105	removed redundant mov
                           2580 ;	genIfxJump
                           2581 ;	Peephole 108.b	removed ljmp by inverse jump logic
   07D3 70 09              2582 	jnz	00110$
                           2583 ;	Peephole 300	removed redundant label 00119$
                           2584 ;	main.c:379: ctr=1;
                           2585 ;	genAssign
   07D5 90s00r00           2586 	mov	dptr,#_ctr
   07D8 74 01              2587 	mov	a,#0x01
   07DA F0                 2588 	movx	@dptr,a
   07DB 02s09r0F           2589 	ljmp	00112$
   07DE                    2590 00110$:
                           2591 ;	main.c:383: add= *read_cmd & 0x7f; // storing address
                           2592 ;	genAssign
                           2593 ;	Peephole 182.b	used 16 bit load of dptr
   07DE 90 C0 00           2594 	mov	dptr,#0xC000
                           2595 ;	genPointerGet
                           2596 ;	genFarPointerGet
   07E1 E0                 2597 	movx	a,@dptr
   07E2 FA                 2598 	mov	r2,a
                           2599 ;	genAnd
   07E3 53 02 7F           2600 	anl	ar2,#0x7F
                           2601 ;	main.c:384: ctr=0;
                           2602 ;	genAssign
   07E6 90s00r00           2603 	mov	dptr,#_ctr
                           2604 ;	Peephole 181	changed mov to clr
   07E9 E4                 2605 	clr	a
   07EA F0                 2606 	movx	@dptr,a
                           2607 ;	main.c:385: hundrdmilli++;
                           2608 ;	genPlus
   07EB 90s00r01           2609 	mov	dptr,#_hundrdmilli
   07EE E0                 2610 	movx	a,@dptr
   07EF 24 01              2611 	add	a,#0x01
   07F1 F0                 2612 	movx	@dptr,a
                           2613 ;	main.c:386: if(hundrdmilli>'9') //if milliseconds exceeds 9 then reset variable to 0
                           2614 ;	genAssign
   07F2 90s00r01           2615 	mov	dptr,#_hundrdmilli
   07F5 E0                 2616 	movx	a,@dptr
   07F6 FB                 2617 	mov	r3,a
                           2618 ;	genCmpGt
                           2619 ;	genCmp
   07F7 C3                 2620 	clr	c
                           2621 ;	Peephole 159	avoided xrl during execution
   07F8 74 B9              2622 	mov	a,#(0x39 ^ 0x80)
   07FA 8B F0              2623 	mov	b,r3
   07FC 63 F0 80           2624 	xrl	b,#0x80
   07FF 95 F0              2625 	subb	a,b
                           2626 ;	genIfxJump
                           2627 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0801 50 67              2628 	jnc	00108$
                           2629 ;	Peephole 300	removed redundant label 00120$
                           2630 ;	main.c:388: hundrdmilli='0';
                           2631 ;	genAssign
   0803 90s00r01           2632 	mov	dptr,#_hundrdmilli
   0806 74 30              2633 	mov	a,#0x30
   0808 F0                 2634 	movx	@dptr,a
                           2635 ;	main.c:389: secs0++;
                           2636 ;	genPlus
   0809 90s00r03           2637 	mov	dptr,#_secs0
   080C E0                 2638 	movx	a,@dptr
   080D 24 01              2639 	add	a,#0x01
   080F F0                 2640 	movx	@dptr,a
                           2641 ;	main.c:390: if(secs0>'9') // if the second digit of seconds variable is 9 set it to 0 and increment the value of  seconds 1 variable
                           2642 ;	genAssign
   0810 90s00r03           2643 	mov	dptr,#_secs0
   0813 E0                 2644 	movx	a,@dptr
   0814 FB                 2645 	mov	r3,a
                           2646 ;	genCmpGt
                           2647 ;	genCmp
   0815 C3                 2648 	clr	c
                           2649 ;	Peephole 159	avoided xrl during execution
   0816 74 B9              2650 	mov	a,#(0x39 ^ 0x80)
   0818 8B F0              2651 	mov	b,r3
   081A 63 F0 80           2652 	xrl	b,#0x80
   081D 95 F0              2653 	subb	a,b
                           2654 ;	genIfxJump
                           2655 ;	Peephole 108.a	removed ljmp by inverse jump logic
   081F 50 49              2656 	jnc	00108$
                           2657 ;	Peephole 300	removed redundant label 00121$
                           2658 ;	main.c:392: secs0='0';
                           2659 ;	genAssign
   0821 90s00r03           2660 	mov	dptr,#_secs0
   0824 74 30              2661 	mov	a,#0x30
   0826 F0                 2662 	movx	@dptr,a
                           2663 ;	main.c:393: secs1++;
                           2664 ;	genPlus
   0827 90s00r02           2665 	mov	dptr,#_secs1
   082A E0                 2666 	movx	a,@dptr
   082B 24 01              2667 	add	a,#0x01
   082D F0                 2668 	movx	@dptr,a
                           2669 ;	main.c:394: if(secs1>'5')
                           2670 ;	genAssign
   082E 90s00r02           2671 	mov	dptr,#_secs1
   0831 E0                 2672 	movx	a,@dptr
   0832 FB                 2673 	mov	r3,a
                           2674 ;	genCmpGt
                           2675 ;	genCmp
   0833 C3                 2676 	clr	c
                           2677 ;	Peephole 159	avoided xrl during execution
   0834 74 B5              2678 	mov	a,#(0x35 ^ 0x80)
   0836 8B F0              2679 	mov	b,r3
   0838 63 F0 80           2680 	xrl	b,#0x80
   083B 95 F0              2681 	subb	a,b
                           2682 ;	genIfxJump
                           2683 ;	Peephole 108.a	removed ljmp by inverse jump logic
   083D 50 2B              2684 	jnc	00108$
                           2685 ;	Peephole 300	removed redundant label 00122$
                           2686 ;	main.c:396: secs1='0';
                           2687 ;	genAssign
   083F 90s00r02           2688 	mov	dptr,#_secs1
   0842 74 30              2689 	mov	a,#0x30
   0844 F0                 2690 	movx	@dptr,a
                           2691 ;	main.c:397: mins0++;
                           2692 ;	genPlus
   0845 90s00r05           2693 	mov	dptr,#_mins0
   0848 E0                 2694 	movx	a,@dptr
   0849 24 01              2695 	add	a,#0x01
   084B F0                 2696 	movx	@dptr,a
                           2697 ;	main.c:398: if(mins0>'9')
                           2698 ;	genAssign
   084C 90s00r05           2699 	mov	dptr,#_mins0
   084F E0                 2700 	movx	a,@dptr
   0850 FB                 2701 	mov	r3,a
                           2702 ;	genCmpGt
                           2703 ;	genCmp
   0851 C3                 2704 	clr	c
                           2705 ;	Peephole 159	avoided xrl during execution
   0852 74 B9              2706 	mov	a,#(0x39 ^ 0x80)
   0854 8B F0              2707 	mov	b,r3
   0856 63 F0 80           2708 	xrl	b,#0x80
   0859 95 F0              2709 	subb	a,b
                           2710 ;	genIfxJump
                           2711 ;	Peephole 108.a	removed ljmp by inverse jump logic
   085B 50 0D              2712 	jnc	00108$
                           2713 ;	Peephole 300	removed redundant label 00123$
                           2714 ;	main.c:400: mins0='0';
                           2715 ;	genAssign
   085D 90s00r05           2716 	mov	dptr,#_mins0
   0860 74 30              2717 	mov	a,#0x30
   0862 F0                 2718 	movx	@dptr,a
                           2719 ;	main.c:401: mins1++;
                           2720 ;	genPlus
   0863 90s00r04           2721 	mov	dptr,#_mins1
   0866 E0                 2722 	movx	a,@dptr
   0867 24 01              2723 	add	a,#0x01
   0869 F0                 2724 	movx	@dptr,a
   086A                    2725 00108$:
                           2726 ;	main.c:407: lcdgotoaddress(0x59);
                           2727 ;	genCall
   086A 75 82 59           2728 	mov	dpl,#0x59
   086D C0 02              2729 	push	ar2
   086F 12s04r16           2730 	lcall	_lcdgotoaddress
   0872 D0 02              2731 	pop	ar2
                           2732 ;	main.c:408: lcdputch(mins1);
                           2733 ;	genAssign
   0874 90s00r04           2734 	mov	dptr,#_mins1
   0877 E0                 2735 	movx	a,@dptr
                           2736 ;	genCall
   0878 FB                 2737 	mov	r3,a
                           2738 ;	Peephole 244.c	loading dpl from a instead of r3
   0879 F5 82              2739 	mov	dpl,a
   087B C0 02              2740 	push	ar2
   087D 12s04rA9           2741 	lcall	_lcdputch
   0880 D0 02              2742 	pop	ar2
                           2743 ;	main.c:409: lcdgotoaddress(0x5A);
                           2744 ;	genCall
   0882 75 82 5A           2745 	mov	dpl,#0x5A
   0885 C0 02              2746 	push	ar2
   0887 12s04r16           2747 	lcall	_lcdgotoaddress
   088A D0 02              2748 	pop	ar2
                           2749 ;	main.c:410: lcdputch(mins0);
                           2750 ;	genAssign
   088C 90s00r05           2751 	mov	dptr,#_mins0
   088F E0                 2752 	movx	a,@dptr
                           2753 ;	genCall
   0890 FB                 2754 	mov	r3,a
                           2755 ;	Peephole 244.c	loading dpl from a instead of r3
   0891 F5 82              2756 	mov	dpl,a
   0893 C0 02              2757 	push	ar2
   0895 12s04rA9           2758 	lcall	_lcdputch
   0898 D0 02              2759 	pop	ar2
                           2760 ;	main.c:411: lcdgotoaddress(0x5B);
                           2761 ;	genCall
   089A 75 82 5B           2762 	mov	dpl,#0x5B
   089D C0 02              2763 	push	ar2
   089F 12s04r16           2764 	lcall	_lcdgotoaddress
   08A2 D0 02              2765 	pop	ar2
                           2766 ;	main.c:412: lcdputch(':');
                           2767 ;	genCall
   08A4 75 82 3A           2768 	mov	dpl,#0x3A
   08A7 C0 02              2769 	push	ar2
   08A9 12s04rA9           2770 	lcall	_lcdputch
   08AC D0 02              2771 	pop	ar2
                           2772 ;	main.c:413: lcdgotoaddress(0x5C);
                           2773 ;	genCall
   08AE 75 82 5C           2774 	mov	dpl,#0x5C
   08B1 C0 02              2775 	push	ar2
   08B3 12s04r16           2776 	lcall	_lcdgotoaddress
   08B6 D0 02              2777 	pop	ar2
                           2778 ;	main.c:414: lcdputch(secs1);
                           2779 ;	genAssign
   08B8 90s00r02           2780 	mov	dptr,#_secs1
   08BB E0                 2781 	movx	a,@dptr
                           2782 ;	genCall
   08BC FB                 2783 	mov	r3,a
                           2784 ;	Peephole 244.c	loading dpl from a instead of r3
   08BD F5 82              2785 	mov	dpl,a
   08BF C0 02              2786 	push	ar2
   08C1 12s04rA9           2787 	lcall	_lcdputch
   08C4 D0 02              2788 	pop	ar2
                           2789 ;	main.c:415: lcdgotoaddress(0x5D);
                           2790 ;	genCall
   08C6 75 82 5D           2791 	mov	dpl,#0x5D
   08C9 C0 02              2792 	push	ar2
   08CB 12s04r16           2793 	lcall	_lcdgotoaddress
   08CE D0 02              2794 	pop	ar2
                           2795 ;	main.c:416: lcdputch(secs0);
                           2796 ;	genAssign
   08D0 90s00r03           2797 	mov	dptr,#_secs0
   08D3 E0                 2798 	movx	a,@dptr
                           2799 ;	genCall
   08D4 FB                 2800 	mov	r3,a
                           2801 ;	Peephole 244.c	loading dpl from a instead of r3
   08D5 F5 82              2802 	mov	dpl,a
   08D7 C0 02              2803 	push	ar2
   08D9 12s04rA9           2804 	lcall	_lcdputch
   08DC D0 02              2805 	pop	ar2
                           2806 ;	main.c:417: lcdgotoaddress(0x5E);
                           2807 ;	genCall
   08DE 75 82 5E           2808 	mov	dpl,#0x5E
   08E1 C0 02              2809 	push	ar2
   08E3 12s04r16           2810 	lcall	_lcdgotoaddress
   08E6 D0 02              2811 	pop	ar2
                           2812 ;	main.c:418: lcdputch(':');
                           2813 ;	genCall
   08E8 75 82 3A           2814 	mov	dpl,#0x3A
   08EB C0 02              2815 	push	ar2
   08ED 12s04rA9           2816 	lcall	_lcdputch
   08F0 D0 02              2817 	pop	ar2
                           2818 ;	main.c:419: lcdgotoaddress(0x5F);
                           2819 ;	genCall
   08F2 75 82 5F           2820 	mov	dpl,#0x5F
   08F5 C0 02              2821 	push	ar2
   08F7 12s04r16           2822 	lcall	_lcdgotoaddress
   08FA D0 02              2823 	pop	ar2
                           2824 ;	main.c:420: lcdputch(hundrdmilli);
                           2825 ;	genAssign
   08FC 90s00r01           2826 	mov	dptr,#_hundrdmilli
   08FF E0                 2827 	movx	a,@dptr
                           2828 ;	genCall
   0900 FB                 2829 	mov	r3,a
                           2830 ;	Peephole 244.c	loading dpl from a instead of r3
   0901 F5 82              2831 	mov	dpl,a
   0903 C0 02              2832 	push	ar2
   0905 12s04rA9           2833 	lcall	_lcdputch
   0908 D0 02              2834 	pop	ar2
                           2835 ;	main.c:421: lcdgotoaddress(add);
                           2836 ;	genCall
   090A 8A 82              2837 	mov	dpl,r2
   090C 12s04r16           2838 	lcall	_lcdgotoaddress
   090F                    2839 00112$:
   090F D0 D0              2840 	pop	psw
   0911 D0 01              2841 	pop	(0+1)
   0913 D0 00              2842 	pop	(0+0)
   0915 D0 07              2843 	pop	(0+7)
   0917 D0 06              2844 	pop	(0+6)
   0919 D0 05              2845 	pop	(0+5)
   091B D0 04              2846 	pop	(0+4)
   091D D0 03              2847 	pop	(0+3)
   091F D0 02              2848 	pop	(0+2)
   0921 D0 83              2849 	pop	dph
   0923 D0 82              2850 	pop	dpl
   0925 D0 F0              2851 	pop	b
   0927 D0 E0              2852 	pop	acc
   0929 32                 2853 	reti
                           2854 ;------------------------------------------------------------
                           2855 ;Allocation info for local variables in function 'lcdcreatechar'
                           2856 ;------------------------------------------------------------
                           2857 ;sloc0                     Allocated with name '_lcdcreatechar_sloc0_1_0'
                           2858 ;row_vals                  Allocated with name '_lcdcreatechar_PARM_2'
                           2859 ;ccode                     Allocated with name '_lcdcreatechar_ccode_1_1'
                           2860 ;i                         Allocated with name '_lcdcreatechar_i_1_1'
                           2861 ;------------------------------------------------------------
                           2862 ;	main.c:425: void lcdcreatechar(unsigned char ccode, unsigned char row_vals[8])
                           2863 ;	-----------------------------------------
                           2864 ;	 function lcdcreatechar
                           2865 ;	-----------------------------------------
   092A                    2866 _lcdcreatechar:
                           2867 ;	genReceive
   092A E5 82              2868 	mov	a,dpl
   092C 90s00r89           2869 	mov	dptr,#_lcdcreatechar_ccode_1_1
   092F F0                 2870 	movx	@dptr,a
                           2871 ;	main.c:430: *write_cmd = 0x40|((ccode&0x07)<<3);
                           2872 ;	genAssign
   0930 7A 00              2873 	mov	r2,#0x00
   0932 7B 80              2874 	mov	r3,#0x80
                           2875 ;	genAssign
   0934 90s00r89           2876 	mov	dptr,#_lcdcreatechar_ccode_1_1
   0937 E0                 2877 	movx	a,@dptr
                           2878 ;	genAnd
                           2879 ;	genLeftShift
                           2880 ;	genLeftShiftLiteral
                           2881 ;	genlshOne
                           2882 ;	Peephole 139.a	removed redundant mov
   0938 54 07              2883 	anl	a,#0x07
   093A FC                 2884 	mov	r4,a
   093B C4                 2885 	swap	a
   093C 03                 2886 	rr	a
   093D 54 F8              2887 	anl	a,#0xf8
   093F FC                 2888 	mov	r4,a
                           2889 ;	genOr
   0940 43 04 40           2890 	orl	ar4,#0x40
                           2891 ;	genPointerSet
                           2892 ;     genFarPointerSet
   0943 8A 82              2893 	mov	dpl,r2
   0945 8B 83              2894 	mov	dph,r3
   0947 EC                 2895 	mov	a,r4
   0948 F0                 2896 	movx	@dptr,a
                           2897 ;	main.c:431: for(i=0;i<8;i++)
                           2898 ;	genAssign
   0949 90s00r86           2899 	mov	dptr,#_lcdcreatechar_PARM_2
   094C E0                 2900 	movx	a,@dptr
   094D FA                 2901 	mov	r2,a
   094E A3                 2902 	inc	dptr
   094F E0                 2903 	movx	a,@dptr
   0950 FB                 2904 	mov	r3,a
   0951 A3                 2905 	inc	dptr
   0952 E0                 2906 	movx	a,@dptr
   0953 FC                 2907 	mov	r4,a
                           2908 ;	genAssign
   0954 7D 00              2909 	mov	r5,#0x00
   0956 7E 00              2910 	mov	r6,#0x00
   0958                    2911 00101$:
                           2912 ;	genCmpLt
                           2913 ;	genCmp
   0958 C3                 2914 	clr	c
   0959 ED                 2915 	mov	a,r5
   095A 94 08              2916 	subb	a,#0x08
   095C EE                 2917 	mov	a,r6
   095D 64 80              2918 	xrl	a,#0x80
   095F 94 80              2919 	subb	a,#0x80
                           2920 ;	genIfxJump
                           2921 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0961 50 41              2922 	jnc	00105$
                           2923 ;	Peephole 300	removed redundant label 00110$
                           2924 ;	main.c:433: lcdbusywait();
                           2925 ;	genCall
   0963 C0 02              2926 	push	ar2
   0965 C0 03              2927 	push	ar3
   0967 C0 04              2928 	push	ar4
   0969 C0 05              2929 	push	ar5
   096B C0 06              2930 	push	ar6
   096D 12s04r0D           2931 	lcall	_lcdbusywait
   0970 D0 06              2932 	pop	ar6
   0972 D0 05              2933 	pop	ar5
   0974 D0 04              2934 	pop	ar4
   0976 D0 03              2935 	pop	ar3
   0978 D0 02              2936 	pop	ar2
                           2937 ;	main.c:434: *write_data = (row_vals[i])&0x1f;
                           2938 ;	genAssign
   097A 75*00 00           2939 	mov	_lcdcreatechar_sloc0_1_0,#0x00
   097D 75*01 A0           2940 	mov	(_lcdcreatechar_sloc0_1_0 + 1),#0xA0
                           2941 ;	genPlus
                           2942 ;	Peephole 236.g	used r5 instead of ar5
   0980 ED                 2943 	mov	a,r5
                           2944 ;	Peephole 236.a	used r2 instead of ar2
   0981 2A                 2945 	add	a,r2
   0982 F9                 2946 	mov	r1,a
                           2947 ;	Peephole 236.g	used r6 instead of ar6
   0983 EE                 2948 	mov	a,r6
                           2949 ;	Peephole 236.b	used r3 instead of ar3
   0984 3B                 2950 	addc	a,r3
   0985 FF                 2951 	mov	r7,a
   0986 8C 00              2952 	mov	ar0,r4
                           2953 ;	genPointerGet
                           2954 ;	genGenPointerGet
   0988 89 82              2955 	mov	dpl,r1
   098A 8F 83              2956 	mov	dph,r7
   098C 88 F0              2957 	mov	b,r0
   098E 12s00r00           2958 	lcall	__gptrget
   0991 F9                 2959 	mov	r1,a
                           2960 ;	genAnd
   0992 53 01 1F           2961 	anl	ar1,#0x1F
                           2962 ;	genPointerSet
                           2963 ;     genFarPointerSet
   0995 85*00 82           2964 	mov	dpl,_lcdcreatechar_sloc0_1_0
   0998 85*01 83           2965 	mov	dph,(_lcdcreatechar_sloc0_1_0 + 1)
   099B E9                 2966 	mov	a,r1
   099C F0                 2967 	movx	@dptr,a
                           2968 ;	main.c:431: for(i=0;i<8;i++)
                           2969 ;	genPlus
                           2970 ;     genPlusIncr
                           2971 ;	tail increment optimized (range 9)
   099D 0D                 2972 	inc	r5
   099E BD 00 B7           2973 	cjne	r5,#0x00,00101$
   09A1 0E                 2974 	inc	r6
                           2975 ;	Peephole 112.b	changed ljmp to sjmp
   09A2 80 B4              2976 	sjmp	00101$
   09A4                    2977 00105$:
   09A4 22                 2978 	ret
                           2979 ;------------------------------------------------------------
                           2980 ;Allocation info for local variables in function 'get_hex'
                           2981 ;------------------------------------------------------------
                           2982 ;val                       Allocated with name '_get_hex_val_1_1'
                           2983 ;i                         Allocated with name '_get_hex_i_1_1'
                           2984 ;val1                      Allocated with name '_get_hex_val1_1_1'
                           2985 ;------------------------------------------------------------
                           2986 ;	main.c:439: int get_hex()
                           2987 ;	-----------------------------------------
                           2988 ;	 function get_hex
                           2989 ;	-----------------------------------------
   09A5                    2990 _get_hex:
                           2991 ;	main.c:442: unsigned int i=0;
                           2992 ;	genAssign
   09A5 90s00r94           2993 	mov	dptr,#_get_hex_i_1_1
   09A8 E4                 2994 	clr	a
   09A9 F0                 2995 	movx	@dptr,a
   09AA A3                 2996 	inc	dptr
   09AB F0                 2997 	movx	@dptr,a
                           2998 ;	main.c:443: uint16_t val1=0;
                           2999 ;	genAssign
   09AC 90s00r96           3000 	mov	dptr,#_get_hex_val1_1_1
   09AF E4                 3001 	clr	a
   09B0 F0                 3002 	movx	@dptr,a
   09B1 A3                 3003 	inc	dptr
   09B2 F0                 3004 	movx	@dptr,a
                           3005 ;	main.c:444: while(1)
   09B3                    3006 00116$:
                           3007 ;	main.c:446: val[i]=getchar();
                           3008 ;	genAssign
   09B3 90s00r94           3009 	mov	dptr,#_get_hex_i_1_1
   09B6 E0                 3010 	movx	a,@dptr
   09B7 FA                 3011 	mov	r2,a
   09B8 A3                 3012 	inc	dptr
   09B9 E0                 3013 	movx	a,@dptr
   09BA FB                 3014 	mov	r3,a
                           3015 ;	genPlus
                           3016 ;	Peephole 236.g	used r2 instead of ar2
   09BB EA                 3017 	mov	a,r2
   09BC 24r8A              3018 	add	a,#_get_hex_val_1_1
   09BE FC                 3019 	mov	r4,a
                           3020 ;	Peephole 236.g	used r3 instead of ar3
   09BF EB                 3021 	mov	a,r3
   09C0 34s00              3022 	addc	a,#(_get_hex_val_1_1 >> 8)
   09C2 FD                 3023 	mov	r5,a
                           3024 ;	genCall
   09C3 C0 02              3025 	push	ar2
   09C5 C0 03              3026 	push	ar3
   09C7 C0 04              3027 	push	ar4
   09C9 C0 05              3028 	push	ar5
   09CB 12s05rD9           3029 	lcall	_getchar
   09CE AE 82              3030 	mov	r6,dpl
   09D0 D0 05              3031 	pop	ar5
   09D2 D0 04              3032 	pop	ar4
   09D4 D0 03              3033 	pop	ar3
   09D6 D0 02              3034 	pop	ar2
                           3035 ;	genPointerSet
                           3036 ;     genFarPointerSet
   09D8 8C 82              3037 	mov	dpl,r4
   09DA 8D 83              3038 	mov	dph,r5
   09DC EE                 3039 	mov	a,r6
   09DD F0                 3040 	movx	@dptr,a
                           3041 ;	main.c:447: if(val[i]=='\r')
                           3042 ;	genCmpEq
                           3043 ;	gencjneshort
                           3044 ;	Peephole 112.b	changed ljmp to sjmp
                           3045 ;	Peephole 198.b	optimized misc jump sequence
   09DE BE 0D 15           3046 	cjne	r6,#0x0D,00113$
                           3047 ;	Peephole 200.b	removed redundant sjmp
                           3048 ;	Peephole 300	removed redundant label 00149$
                           3049 ;	Peephole 300	removed redundant label 00150$
                           3050 ;	main.c:449: val[i]='\0';
                           3051 ;	genPointerSet
                           3052 ;     genFarPointerSet
   09E1 8C 82              3053 	mov	dpl,r4
   09E3 8D 83              3054 	mov	dph,r5
                           3055 ;	Peephole 181	changed mov to clr
   09E5 E4                 3056 	clr	a
   09E6 F0                 3057 	movx	@dptr,a
                           3058 ;	main.c:450: putchar('\n');
                           3059 ;	genCall
   09E7 75 82 0A           3060 	mov	dpl,#0x0A
   09EA 12s05rC7           3061 	lcall	_putchar
                           3062 ;	main.c:451: putchar('\r');
                           3063 ;	genCall
   09ED 75 82 0D           3064 	mov	dpl,#0x0D
   09F0 12s05rC7           3065 	lcall	_putchar
                           3066 ;	main.c:452: break;
   09F3 02s0ArE8           3067 	ljmp	00147$
   09F6                    3068 00113$:
                           3069 ;	main.c:454: else if(val[i]==0x7f)
                           3070 ;	genPointerGet
                           3071 ;	genFarPointerGet
   09F6 8C 82              3072 	mov	dpl,r4
   09F8 8D 83              3073 	mov	dph,r5
   09FA E0                 3074 	movx	a,@dptr
   09FB FE                 3075 	mov	r6,a
                           3076 ;	genCmpEq
                           3077 ;	gencjneshort
                           3078 ;	Peephole 112.b	changed ljmp to sjmp
                           3079 ;	Peephole 198.b	optimized misc jump sequence
   09FC BE 7F 1D           3080 	cjne	r6,#0x7F,00110$
                           3081 ;	Peephole 200.b	removed redundant sjmp
                           3082 ;	Peephole 300	removed redundant label 00151$
                           3083 ;	Peephole 300	removed redundant label 00152$
                           3084 ;	main.c:456: putchar(0x7f);
                           3085 ;	genCall
   09FF 75 82 7F           3086 	mov	dpl,#0x7F
   0A02 C0 02              3087 	push	ar2
   0A04 C0 03              3088 	push	ar3
   0A06 12s05rC7           3089 	lcall	_putchar
   0A09 D0 03              3090 	pop	ar3
   0A0B D0 02              3091 	pop	ar2
                           3092 ;	main.c:457: i--;
                           3093 ;	genMinus
                           3094 ;	genMinusDec
   0A0D 1A                 3095 	dec	r2
   0A0E BA FF 01           3096 	cjne	r2,#0xff,00153$
   0A11 1B                 3097 	dec	r3
   0A12                    3098 00153$:
                           3099 ;	genAssign
   0A12 90s00r94           3100 	mov	dptr,#_get_hex_i_1_1
   0A15 EA                 3101 	mov	a,r2
   0A16 F0                 3102 	movx	@dptr,a
   0A17 A3                 3103 	inc	dptr
   0A18 EB                 3104 	mov	a,r3
   0A19 F0                 3105 	movx	@dptr,a
                           3106 ;	Peephole 112.b	changed ljmp to sjmp
   0A1A 80 97              3107 	sjmp	00116$
   0A1C                    3108 00110$:
                           3109 ;	main.c:459: else if((val[i]>='0'&&val[i]<='9')|| (val[i]>='a'&&val[i]<='f')||(val[i]>='A'&&val[i]<='F'))
                           3110 ;	genPointerGet
                           3111 ;	genFarPointerGet
   0A1C 8C 82              3112 	mov	dpl,r4
   0A1E 8D 83              3113 	mov	dph,r5
   0A20 E0                 3114 	movx	a,@dptr
                           3115 ;	genCmpLt
                           3116 ;	genCmp
   0A21 FA                 3117 	mov	r2,a
   0A22 C3                 3118 	clr	c
                           3119 ;	Peephole 106	removed redundant mov
   0A23 64 80              3120 	xrl	a,#0x80
   0A25 94 B0              3121 	subb	a,#0xb0
                           3122 ;	genIfxJump
                           3123 ;	Peephole 112.b	changed ljmp to sjmp
                           3124 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A27 40 12              3125 	jc	00106$
                           3126 ;	Peephole 300	removed redundant label 00154$
                           3127 ;	genPointerGet
                           3128 ;	genFarPointerGet
   0A29 8C 82              3129 	mov	dpl,r4
   0A2B 8D 83              3130 	mov	dph,r5
   0A2D E0                 3131 	movx	a,@dptr
   0A2E FC                 3132 	mov	r4,a
                           3133 ;	genCmpGt
                           3134 ;	genCmp
   0A2F C3                 3135 	clr	c
                           3136 ;	Peephole 159	avoided xrl during execution
   0A30 74 B9              3137 	mov	a,#(0x39 ^ 0x80)
   0A32 8C F0              3138 	mov	b,r4
   0A34 63 F0 80           3139 	xrl	b,#0x80
   0A37 95 F0              3140 	subb	a,b
                           3141 ;	genIfxJump
                           3142 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0A39 50 4C              3143 	jnc	00101$
                           3144 ;	Peephole 300	removed redundant label 00155$
   0A3B                    3145 00106$:
                           3146 ;	genAssign
   0A3B 90s00r94           3147 	mov	dptr,#_get_hex_i_1_1
   0A3E E0                 3148 	movx	a,@dptr
   0A3F FA                 3149 	mov	r2,a
   0A40 A3                 3150 	inc	dptr
   0A41 E0                 3151 	movx	a,@dptr
   0A42 FB                 3152 	mov	r3,a
                           3153 ;	genPlus
                           3154 ;	Peephole 236.g	used r2 instead of ar2
   0A43 EA                 3155 	mov	a,r2
   0A44 24r8A              3156 	add	a,#_get_hex_val_1_1
   0A46 F5 82              3157 	mov	dpl,a
                           3158 ;	Peephole 236.g	used r3 instead of ar3
   0A48 EB                 3159 	mov	a,r3
   0A49 34s00              3160 	addc	a,#(_get_hex_val_1_1 >> 8)
   0A4B F5 83              3161 	mov	dph,a
                           3162 ;	genPointerGet
                           3163 ;	genFarPointerGet
   0A4D E0                 3164 	movx	a,@dptr
                           3165 ;	genCmpLt
                           3166 ;	genCmp
   0A4E FA                 3167 	mov	r2,a
   0A4F C3                 3168 	clr	c
                           3169 ;	Peephole 106	removed redundant mov
   0A50 64 80              3170 	xrl	a,#0x80
   0A52 94 E1              3171 	subb	a,#0xe1
                           3172 ;	genIfxJump
                           3173 ;	Peephole 112.b	changed ljmp to sjmp
                           3174 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3175 ;	genCmpGt
                           3176 ;	genCmp
   0A54 40 0B              3177 	jc	00108$
                           3178 ;	Peephole 300	removed redundant label 00156$
                           3179 ;	Peephole 256.a	removed redundant clr c
                           3180 ;	Peephole 159	avoided xrl during execution
   0A56 74 E6              3181 	mov	a,#(0x66 ^ 0x80)
   0A58 8A F0              3182 	mov	b,r2
   0A5A 63 F0 80           3183 	xrl	b,#0x80
   0A5D 95 F0              3184 	subb	a,b
                           3185 ;	genIfxJump
                           3186 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0A5F 50 26              3187 	jnc	00101$
                           3188 ;	Peephole 300	removed redundant label 00157$
   0A61                    3189 00108$:
                           3190 ;	genAssign
   0A61 90s00r94           3191 	mov	dptr,#_get_hex_i_1_1
   0A64 E0                 3192 	movx	a,@dptr
   0A65 FA                 3193 	mov	r2,a
   0A66 A3                 3194 	inc	dptr
   0A67 E0                 3195 	movx	a,@dptr
   0A68 FB                 3196 	mov	r3,a
                           3197 ;	genPlus
                           3198 ;	Peephole 236.g	used r2 instead of ar2
   0A69 EA                 3199 	mov	a,r2
   0A6A 24r8A              3200 	add	a,#_get_hex_val_1_1
   0A6C F5 82              3201 	mov	dpl,a
                           3202 ;	Peephole 236.g	used r3 instead of ar3
   0A6E EB                 3203 	mov	a,r3
   0A6F 34s00              3204 	addc	a,#(_get_hex_val_1_1 >> 8)
   0A71 F5 83              3205 	mov	dph,a
                           3206 ;	genPointerGet
                           3207 ;	genFarPointerGet
   0A73 E0                 3208 	movx	a,@dptr
                           3209 ;	genCmpLt
                           3210 ;	genCmp
   0A74 FA                 3211 	mov	r2,a
   0A75 C3                 3212 	clr	c
                           3213 ;	Peephole 106	removed redundant mov
   0A76 64 80              3214 	xrl	a,#0x80
   0A78 94 C1              3215 	subb	a,#0xc1
                           3216 ;	genIfxJump
                           3217 ;	Peephole 112.b	changed ljmp to sjmp
                           3218 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3219 ;	genCmpGt
                           3220 ;	genCmp
   0A7A 40 3A              3221 	jc	00102$
                           3222 ;	Peephole 300	removed redundant label 00158$
                           3223 ;	Peephole 256.a	removed redundant clr c
                           3224 ;	Peephole 159	avoided xrl during execution
   0A7C 74 C6              3225 	mov	a,#(0x46 ^ 0x80)
   0A7E 8A F0              3226 	mov	b,r2
   0A80 63 F0 80           3227 	xrl	b,#0x80
   0A83 95 F0              3228 	subb	a,b
                           3229 ;	genIfxJump
                           3230 ;	Peephole 112.b	changed ljmp to sjmp
                           3231 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A85 40 2F              3232 	jc	00102$
                           3233 ;	Peephole 300	removed redundant label 00159$
   0A87                    3234 00101$:
                           3235 ;	main.c:461: putchar(val[i]);
                           3236 ;	genAssign
   0A87 90s00r94           3237 	mov	dptr,#_get_hex_i_1_1
   0A8A E0                 3238 	movx	a,@dptr
   0A8B FA                 3239 	mov	r2,a
   0A8C A3                 3240 	inc	dptr
   0A8D E0                 3241 	movx	a,@dptr
   0A8E FB                 3242 	mov	r3,a
                           3243 ;	genPlus
                           3244 ;	Peephole 236.g	used r2 instead of ar2
   0A8F EA                 3245 	mov	a,r2
   0A90 24r8A              3246 	add	a,#_get_hex_val_1_1
   0A92 F5 82              3247 	mov	dpl,a
                           3248 ;	Peephole 236.g	used r3 instead of ar3
   0A94 EB                 3249 	mov	a,r3
   0A95 34s00              3250 	addc	a,#(_get_hex_val_1_1 >> 8)
   0A97 F5 83              3251 	mov	dph,a
                           3252 ;	genPointerGet
                           3253 ;	genFarPointerGet
   0A99 E0                 3254 	movx	a,@dptr
                           3255 ;	genCall
   0A9A FC                 3256 	mov	r4,a
                           3257 ;	Peephole 244.c	loading dpl from a instead of r4
   0A9B F5 82              3258 	mov	dpl,a
   0A9D C0 02              3259 	push	ar2
   0A9F C0 03              3260 	push	ar3
   0AA1 12s05rC7           3261 	lcall	_putchar
   0AA4 D0 03              3262 	pop	ar3
   0AA6 D0 02              3263 	pop	ar2
                           3264 ;	main.c:462: i+=1;
                           3265 ;	genPlus
   0AA8 90s00r94           3266 	mov	dptr,#_get_hex_i_1_1
                           3267 ;     genPlusIncr
   0AAB 74 01              3268 	mov	a,#0x01
                           3269 ;	Peephole 236.a	used r2 instead of ar2
   0AAD 2A                 3270 	add	a,r2
   0AAE F0                 3271 	movx	@dptr,a
                           3272 ;	Peephole 181	changed mov to clr
   0AAF E4                 3273 	clr	a
                           3274 ;	Peephole 236.b	used r3 instead of ar3
   0AB0 3B                 3275 	addc	a,r3
   0AB1 A3                 3276 	inc	dptr
   0AB2 F0                 3277 	movx	@dptr,a
   0AB3 02s09rB3           3278 	ljmp	00116$
   0AB6                    3279 00102$:
                           3280 ;	main.c:465: putchar(val[i]);
                           3281 ;	genAssign
   0AB6 90s00r94           3282 	mov	dptr,#_get_hex_i_1_1
   0AB9 E0                 3283 	movx	a,@dptr
   0ABA FA                 3284 	mov	r2,a
   0ABB A3                 3285 	inc	dptr
   0ABC E0                 3286 	movx	a,@dptr
   0ABD FB                 3287 	mov	r3,a
                           3288 ;	genPlus
                           3289 ;	Peephole 236.g	used r2 instead of ar2
   0ABE EA                 3290 	mov	a,r2
   0ABF 24r8A              3291 	add	a,#_get_hex_val_1_1
   0AC1 F5 82              3292 	mov	dpl,a
                           3293 ;	Peephole 236.g	used r3 instead of ar3
   0AC3 EB                 3294 	mov	a,r3
   0AC4 34s00              3295 	addc	a,#(_get_hex_val_1_1 >> 8)
   0AC6 F5 83              3296 	mov	dph,a
                           3297 ;	genPointerGet
                           3298 ;	genFarPointerGet
   0AC8 E0                 3299 	movx	a,@dptr
                           3300 ;	genCall
   0AC9 FA                 3301 	mov	r2,a
                           3302 ;	Peephole 244.c	loading dpl from a instead of r2
   0ACA F5 82              3303 	mov	dpl,a
   0ACC 12s05rC7           3304 	lcall	_putchar
                           3305 ;	main.c:466: printf_tiny("not valid enter again \n\r");
                           3306 ;	genIpush
   0ACF 74rAC              3307 	mov	a,#__str_14
   0AD1 C0 E0              3308 	push	acc
   0AD3 74s01              3309 	mov	a,#(__str_14 >> 8)
   0AD5 C0 E0              3310 	push	acc
                           3311 ;	genCall
   0AD7 12s00r00           3312 	lcall	_printf_tiny
   0ADA 15 81              3313 	dec	sp
   0ADC 15 81              3314 	dec	sp
                           3315 ;	main.c:467: i=0;
                           3316 ;	genAssign
   0ADE 90s00r94           3317 	mov	dptr,#_get_hex_i_1_1
   0AE1 E4                 3318 	clr	a
   0AE2 F0                 3319 	movx	@dptr,a
   0AE3 A3                 3320 	inc	dptr
   0AE4 F0                 3321 	movx	@dptr,a
   0AE5 02s09rB3           3322 	ljmp	00116$
                           3323 ;	main.c:471: while(val[i]!='\0')
   0AE8                    3324 00147$:
                           3325 ;	genAssign
   0AE8 7A 00              3326 	mov	r2,#0x00
   0AEA 7B 00              3327 	mov	r3,#0x00
   0AEC                    3328 00129$:
                           3329 ;	genPlus
                           3330 ;	Peephole 236.g	used r2 instead of ar2
   0AEC EA                 3331 	mov	a,r2
   0AED 24r8A              3332 	add	a,#_get_hex_val_1_1
   0AEF F5 82              3333 	mov	dpl,a
                           3334 ;	Peephole 236.g	used r3 instead of ar3
   0AF1 EB                 3335 	mov	a,r3
   0AF2 34s00              3336 	addc	a,#(_get_hex_val_1_1 >> 8)
   0AF4 F5 83              3337 	mov	dph,a
                           3338 ;	genPointerGet
                           3339 ;	genFarPointerGet
   0AF6 E0                 3340 	movx	a,@dptr
   0AF7 FC                 3341 	mov	r4,a
                           3342 ;	genCmpEq
                           3343 ;	gencjneshort
   0AF8 BC 00 03           3344 	cjne	r4,#0x00,00160$
   0AFB 02s0BrD4           3345 	ljmp	00131$
   0AFE                    3346 00160$:
                           3347 ;	main.c:473: if(val[i]>='0'&&val[i]<='9')
                           3348 ;	genCmpLt
                           3349 ;	genCmp
   0AFE C3                 3350 	clr	c
   0AFF EC                 3351 	mov	a,r4
   0B00 64 80              3352 	xrl	a,#0x80
   0B02 94 B0              3353 	subb	a,#0xb0
                           3354 ;	genIfxJump
                           3355 ;	Peephole 112.b	changed ljmp to sjmp
                           3356 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3357 ;	genCmpGt
                           3358 ;	genCmp
   0B04 40 3A              3359 	jc	00126$
                           3360 ;	Peephole 300	removed redundant label 00161$
                           3361 ;	Peephole 256.a	removed redundant clr c
                           3362 ;	Peephole 159	avoided xrl during execution
   0B06 74 B9              3363 	mov	a,#(0x39 ^ 0x80)
   0B08 8C F0              3364 	mov	b,r4
   0B0A 63 F0 80           3365 	xrl	b,#0x80
   0B0D 95 F0              3366 	subb	a,b
                           3367 ;	genIfxJump
                           3368 ;	Peephole 112.b	changed ljmp to sjmp
                           3369 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0B0F 40 2F              3370 	jc	00126$
                           3371 ;	Peephole 300	removed redundant label 00162$
                           3372 ;	main.c:475: val1 = (val1*16)+(val[i]-48);
                           3373 ;	genAssign
   0B11 90s00r96           3374 	mov	dptr,#_get_hex_val1_1_1
   0B14 E0                 3375 	movx	a,@dptr
   0B15 FD                 3376 	mov	r5,a
   0B16 A3                 3377 	inc	dptr
   0B17 E0                 3378 	movx	a,@dptr
                           3379 ;	genLeftShift
                           3380 ;	genLeftShiftLiteral
                           3381 ;	genlshTwo
   0B18 FE                 3382 	mov	r6,a
                           3383 ;	Peephole 105	removed redundant mov
   0B19 C4                 3384 	swap	a
   0B1A 54 F0              3385 	anl	a,#0xf0
   0B1C CD                 3386 	xch	a,r5
   0B1D C4                 3387 	swap	a
   0B1E CD                 3388 	xch	a,r5
   0B1F 6D                 3389 	xrl	a,r5
   0B20 CD                 3390 	xch	a,r5
   0B21 54 F0              3391 	anl	a,#0xf0
   0B23 CD                 3392 	xch	a,r5
   0B24 6D                 3393 	xrl	a,r5
   0B25 FE                 3394 	mov	r6,a
                           3395 ;	genCast
   0B26 EC                 3396 	mov	a,r4
   0B27 33                 3397 	rlc	a
   0B28 95 E0              3398 	subb	a,acc
   0B2A FF                 3399 	mov	r7,a
                           3400 ;	genMinus
   0B2B EC                 3401 	mov	a,r4
   0B2C 24 D0              3402 	add	a,#0xd0
   0B2E FC                 3403 	mov	r4,a
   0B2F EF                 3404 	mov	a,r7
   0B30 34 FF              3405 	addc	a,#0xff
   0B32 FF                 3406 	mov	r7,a
                           3407 ;	genPlus
   0B33 90s00r96           3408 	mov	dptr,#_get_hex_val1_1_1
                           3409 ;	Peephole 236.g	used r4 instead of ar4
   0B36 EC                 3410 	mov	a,r4
                           3411 ;	Peephole 236.a	used r5 instead of ar5
   0B37 2D                 3412 	add	a,r5
   0B38 F0                 3413 	movx	@dptr,a
                           3414 ;	Peephole 236.g	used r7 instead of ar7
   0B39 EF                 3415 	mov	a,r7
                           3416 ;	Peephole 236.b	used r6 instead of ar6
   0B3A 3E                 3417 	addc	a,r6
   0B3B A3                 3418 	inc	dptr
   0B3C F0                 3419 	movx	@dptr,a
   0B3D 02s0BrCC           3420 	ljmp	00127$
   0B40                    3421 00126$:
                           3422 ;	main.c:477: else if(val[i]>='A'&&val[i]<='F')
                           3423 ;	genPlus
                           3424 ;	Peephole 236.g	used r2 instead of ar2
   0B40 EA                 3425 	mov	a,r2
   0B41 24r8A              3426 	add	a,#_get_hex_val_1_1
   0B43 F5 82              3427 	mov	dpl,a
                           3428 ;	Peephole 236.g	used r3 instead of ar3
   0B45 EB                 3429 	mov	a,r3
   0B46 34s00              3430 	addc	a,#(_get_hex_val_1_1 >> 8)
   0B48 F5 83              3431 	mov	dph,a
                           3432 ;	genPointerGet
                           3433 ;	genFarPointerGet
   0B4A E0                 3434 	movx	a,@dptr
                           3435 ;	genCmpLt
                           3436 ;	genCmp
   0B4B FC                 3437 	mov	r4,a
   0B4C C3                 3438 	clr	c
                           3439 ;	Peephole 106	removed redundant mov
   0B4D 64 80              3440 	xrl	a,#0x80
   0B4F 94 C1              3441 	subb	a,#0xc1
                           3442 ;	genIfxJump
                           3443 ;	Peephole 112.b	changed ljmp to sjmp
                           3444 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3445 ;	genCmpGt
                           3446 ;	genCmp
   0B51 40 3A              3447 	jc	00122$
                           3448 ;	Peephole 300	removed redundant label 00163$
                           3449 ;	Peephole 256.a	removed redundant clr c
                           3450 ;	Peephole 159	avoided xrl during execution
   0B53 74 C6              3451 	mov	a,#(0x46 ^ 0x80)
   0B55 8C F0              3452 	mov	b,r4
   0B57 63 F0 80           3453 	xrl	b,#0x80
   0B5A 95 F0              3454 	subb	a,b
                           3455 ;	genIfxJump
                           3456 ;	Peephole 112.b	changed ljmp to sjmp
                           3457 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0B5C 40 2F              3458 	jc	00122$
                           3459 ;	Peephole 300	removed redundant label 00164$
                           3460 ;	main.c:479: val1 = (val1*16)+(val[i]-55);
                           3461 ;	genAssign
   0B5E 90s00r96           3462 	mov	dptr,#_get_hex_val1_1_1
   0B61 E0                 3463 	movx	a,@dptr
   0B62 FD                 3464 	mov	r5,a
   0B63 A3                 3465 	inc	dptr
   0B64 E0                 3466 	movx	a,@dptr
                           3467 ;	genLeftShift
                           3468 ;	genLeftShiftLiteral
                           3469 ;	genlshTwo
   0B65 FE                 3470 	mov	r6,a
                           3471 ;	Peephole 105	removed redundant mov
   0B66 C4                 3472 	swap	a
   0B67 54 F0              3473 	anl	a,#0xf0
   0B69 CD                 3474 	xch	a,r5
   0B6A C4                 3475 	swap	a
   0B6B CD                 3476 	xch	a,r5
   0B6C 6D                 3477 	xrl	a,r5
   0B6D CD                 3478 	xch	a,r5
   0B6E 54 F0              3479 	anl	a,#0xf0
   0B70 CD                 3480 	xch	a,r5
   0B71 6D                 3481 	xrl	a,r5
   0B72 FE                 3482 	mov	r6,a
                           3483 ;	genCast
                           3484 ;	peephole 177.h	optimized mov sequence
   0B73 EC                 3485 	mov	a,r4
                           3486 ;	Peephole 236.i	used r7 instead of ar7
   0B74 FF                 3487 	mov	r7,a
   0B75 33                 3488 	rlc	a
   0B76 95 E0              3489 	subb	a,acc
   0B78 F8                 3490 	mov	r0,a
                           3491 ;	genMinus
   0B79 EF                 3492 	mov	a,r7
   0B7A 24 C9              3493 	add	a,#0xc9
   0B7C FF                 3494 	mov	r7,a
   0B7D E8                 3495 	mov	a,r0
   0B7E 34 FF              3496 	addc	a,#0xff
   0B80 F8                 3497 	mov	r0,a
                           3498 ;	genPlus
   0B81 90s00r96           3499 	mov	dptr,#_get_hex_val1_1_1
                           3500 ;	Peephole 236.g	used r7 instead of ar7
   0B84 EF                 3501 	mov	a,r7
                           3502 ;	Peephole 236.a	used r5 instead of ar5
   0B85 2D                 3503 	add	a,r5
   0B86 F0                 3504 	movx	@dptr,a
                           3505 ;	Peephole 236.g	used r0 instead of ar0
   0B87 E8                 3506 	mov	a,r0
                           3507 ;	Peephole 236.b	used r6 instead of ar6
   0B88 3E                 3508 	addc	a,r6
   0B89 A3                 3509 	inc	dptr
   0B8A F0                 3510 	movx	@dptr,a
                           3511 ;	Peephole 112.b	changed ljmp to sjmp
   0B8B 80 3F              3512 	sjmp	00127$
   0B8D                    3513 00122$:
                           3514 ;	main.c:481: else if(val[i]>='a'&&val[i]<='f')
                           3515 ;	genCmpLt
                           3516 ;	genCmp
   0B8D C3                 3517 	clr	c
   0B8E EC                 3518 	mov	a,r4
   0B8F 64 80              3519 	xrl	a,#0x80
   0B91 94 E1              3520 	subb	a,#0xe1
                           3521 ;	genIfxJump
                           3522 ;	Peephole 112.b	changed ljmp to sjmp
                           3523 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3524 ;	genCmpGt
                           3525 ;	genCmp
   0B93 40 37              3526 	jc	00127$
                           3527 ;	Peephole 300	removed redundant label 00165$
                           3528 ;	Peephole 256.a	removed redundant clr c
                           3529 ;	Peephole 159	avoided xrl during execution
   0B95 74 E6              3530 	mov	a,#(0x66 ^ 0x80)
   0B97 8C F0              3531 	mov	b,r4
   0B99 63 F0 80           3532 	xrl	b,#0x80
   0B9C 95 F0              3533 	subb	a,b
                           3534 ;	genIfxJump
                           3535 ;	Peephole 112.b	changed ljmp to sjmp
                           3536 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0B9E 40 2C              3537 	jc	00127$
                           3538 ;	Peephole 300	removed redundant label 00166$
                           3539 ;	main.c:483: val1 = (val1*16)+(val[i]-87);
                           3540 ;	genAssign
   0BA0 90s00r96           3541 	mov	dptr,#_get_hex_val1_1_1
   0BA3 E0                 3542 	movx	a,@dptr
   0BA4 FD                 3543 	mov	r5,a
   0BA5 A3                 3544 	inc	dptr
   0BA6 E0                 3545 	movx	a,@dptr
                           3546 ;	genLeftShift
                           3547 ;	genLeftShiftLiteral
                           3548 ;	genlshTwo
   0BA7 FE                 3549 	mov	r6,a
                           3550 ;	Peephole 105	removed redundant mov
   0BA8 C4                 3551 	swap	a
   0BA9 54 F0              3552 	anl	a,#0xf0
   0BAB CD                 3553 	xch	a,r5
   0BAC C4                 3554 	swap	a
   0BAD CD                 3555 	xch	a,r5
   0BAE 6D                 3556 	xrl	a,r5
   0BAF CD                 3557 	xch	a,r5
   0BB0 54 F0              3558 	anl	a,#0xf0
   0BB2 CD                 3559 	xch	a,r5
   0BB3 6D                 3560 	xrl	a,r5
   0BB4 FE                 3561 	mov	r6,a
                           3562 ;	genCast
   0BB5 EC                 3563 	mov	a,r4
   0BB6 33                 3564 	rlc	a
   0BB7 95 E0              3565 	subb	a,acc
   0BB9 FF                 3566 	mov	r7,a
                           3567 ;	genMinus
   0BBA EC                 3568 	mov	a,r4
   0BBB 24 A9              3569 	add	a,#0xa9
   0BBD FC                 3570 	mov	r4,a
   0BBE EF                 3571 	mov	a,r7
   0BBF 34 FF              3572 	addc	a,#0xff
   0BC1 FF                 3573 	mov	r7,a
                           3574 ;	genPlus
   0BC2 90s00r96           3575 	mov	dptr,#_get_hex_val1_1_1
                           3576 ;	Peephole 236.g	used r4 instead of ar4
   0BC5 EC                 3577 	mov	a,r4
                           3578 ;	Peephole 236.a	used r5 instead of ar5
   0BC6 2D                 3579 	add	a,r5
   0BC7 F0                 3580 	movx	@dptr,a
                           3581 ;	Peephole 236.g	used r7 instead of ar7
   0BC8 EF                 3582 	mov	a,r7
                           3583 ;	Peephole 236.b	used r6 instead of ar6
   0BC9 3E                 3584 	addc	a,r6
   0BCA A3                 3585 	inc	dptr
   0BCB F0                 3586 	movx	@dptr,a
   0BCC                    3587 00127$:
                           3588 ;	main.c:485: i++;
                           3589 ;	genPlus
                           3590 ;     genPlusIncr
   0BCC 0A                 3591 	inc	r2
   0BCD BA 00 01           3592 	cjne	r2,#0x00,00167$
   0BD0 0B                 3593 	inc	r3
   0BD1                    3594 00167$:
   0BD1 02s0ArEC           3595 	ljmp	00129$
   0BD4                    3596 00131$:
                           3597 ;	main.c:487: return val1;
                           3598 ;	genAssign
   0BD4 90s00r96           3599 	mov	dptr,#_get_hex_val1_1_1
   0BD7 E0                 3600 	movx	a,@dptr
   0BD8 FA                 3601 	mov	r2,a
   0BD9 A3                 3602 	inc	dptr
   0BDA E0                 3603 	movx	a,@dptr
                           3604 ;	genRet
                           3605 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   0BDB 8A 82              3606 	mov	dpl,r2
   0BDD F5 83              3607 	mov	dph,a
                           3608 ;	Peephole 300	removed redundant label 00132$
   0BDF 22                 3609 	ret
                           3610 ;------------------------------------------------------------
                           3611 ;Allocation info for local variables in function 'lcd_dump_ddram'
                           3612 ;------------------------------------------------------------
                           3613 ;add                       Allocated with name '_lcd_dump_ddram_add_1_1'
                           3614 ;------------------------------------------------------------
                           3615 ;	main.c:492: void lcd_dump_ddram()
                           3616 ;	-----------------------------------------
                           3617 ;	 function lcd_dump_ddram
                           3618 ;	-----------------------------------------
   0BE0                    3619 _lcd_dump_ddram:
                           3620 ;	main.c:493: {    uint8_t add=0;
                           3621 ;	genAssign
   0BE0 90s00r98           3622 	mov	dptr,#_lcd_dump_ddram_add_1_1
                           3623 ;	Peephole 181	changed mov to clr
   0BE3 E4                 3624 	clr	a
   0BE4 F0                 3625 	movx	@dptr,a
                           3626 ;	main.c:494: *write_cmd = 0x80;
                           3627 ;	genAssign
   0BE5 75 82 00           3628 	mov	dpl,#0x00
                           3629 ;	genPointerSet
                           3630 ;     genFarPointerSet
                           3631 ;	peephole 177.h	optimized mov sequence
   0BE8 74 80              3632 	mov	a,#0x80
   0BEA F5 83              3633 	mov	dph,a
   0BEC F0                 3634 	movx	@dptr,a
                           3635 ;	main.c:496: while(add<=0x5f)
   0BED                    3636 00106$:
                           3637 ;	genAssign
   0BED 90s00r98           3638 	mov	dptr,#_lcd_dump_ddram_add_1_1
   0BF0 E0                 3639 	movx	a,@dptr
                           3640 ;	genCmpGt
                           3641 ;	genCmp
                           3642 ;	genIfxJump
                           3643 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0BF1 FA                 3644 	mov  r2,a
                           3645 ;	Peephole 177.a	removed redundant mov
   0BF2 24 A0              3646 	add	a,#0xff - 0x5F
                           3647 ;	Peephole 112.b	changed ljmp to sjmp
                           3648 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0BF4 40 5F              3649 	jc	00109$
                           3650 ;	Peephole 300	removed redundant label 00115$
                           3651 ;	main.c:498: if(add%16==0)
                           3652 ;	genAnd
   0BF6 EA                 3653 	mov	a,r2
   0BF7 54 0F              3654 	anl	a,#0x0F
                           3655 ;	Peephole 160.c	removed sjmp by inverse jump logic
   0BF9 60 02              3656 	jz	00117$
                           3657 ;	Peephole 300	removed redundant label 00116$
                           3658 ;	Peephole 112.b	changed ljmp to sjmp
   0BFB 80 17              3659 	sjmp	00102$
   0BFD                    3660 00117$:
                           3661 ;	main.c:500: printf_tiny(" \n\r %x\t ",add);
                           3662 ;	genCast
   0BFD 7B 00              3663 	mov	r3,#0x00
                           3664 ;	genIpush
   0BFF C0 02              3665 	push	ar2
   0C01 C0 03              3666 	push	ar3
                           3667 ;	genIpush
   0C03 74rC5              3668 	mov	a,#__str_15
   0C05 C0 E0              3669 	push	acc
   0C07 74s01              3670 	mov	a,#(__str_15 >> 8)
   0C09 C0 E0              3671 	push	acc
                           3672 ;	genCall
   0C0B 12s00r00           3673 	lcall	_printf_tiny
   0C0E E5 81              3674 	mov	a,sp
   0C10 24 FC              3675 	add	a,#0xfc
   0C12 F5 81              3676 	mov	sp,a
   0C14                    3677 00102$:
                           3678 ;	main.c:502: lcdbusywait();
                           3679 ;	genCall
   0C14 12s04r0D           3680 	lcall	_lcdbusywait
                           3681 ;	main.c:503: printf_tiny(" %x ",*read_data);
                           3682 ;	genAssign
                           3683 ;	Peephole 182.b	used 16 bit load of dptr
   0C17 90 E0 00           3684 	mov	dptr,#0xE000
                           3685 ;	genPointerGet
                           3686 ;	genFarPointerGet
   0C1A E0                 3687 	movx	a,@dptr
   0C1B FA                 3688 	mov	r2,a
                           3689 ;	genCast
   0C1C 7B 00              3690 	mov	r3,#0x00
                           3691 ;	genIpush
   0C1E C0 02              3692 	push	ar2
   0C20 C0 03              3693 	push	ar3
                           3694 ;	genIpush
   0C22 74rCE              3695 	mov	a,#__str_16
   0C24 C0 E0              3696 	push	acc
   0C26 74s01              3697 	mov	a,#(__str_16 >> 8)
   0C28 C0 E0              3698 	push	acc
                           3699 ;	genCall
   0C2A 12s00r00           3700 	lcall	_printf_tiny
   0C2D E5 81              3701 	mov	a,sp
   0C2F 24 FC              3702 	add	a,#0xfc
   0C31 F5 81              3703 	mov	sp,a
                           3704 ;	main.c:504: if (add==0x1f)
                           3705 ;	genAssign
   0C33 90s00r98           3706 	mov	dptr,#_lcd_dump_ddram_add_1_1
   0C36 E0                 3707 	movx	a,@dptr
   0C37 FA                 3708 	mov	r2,a
                           3709 ;	genCmpEq
                           3710 ;	gencjneshort
                           3711 ;	Peephole 112.b	changed ljmp to sjmp
                           3712 ;	Peephole 198.b	optimized misc jump sequence
   0C38 BA 1F 11           3713 	cjne	r2,#0x1F,00104$
                           3714 ;	Peephole 200.b	removed redundant sjmp
                           3715 ;	Peephole 300	removed redundant label 00118$
                           3716 ;	Peephole 300	removed redundant label 00119$
                           3717 ;	main.c:506: lcdbusywait();
                           3718 ;	genCall
   0C3B 12s04r0D           3719 	lcall	_lcdbusywait
                           3720 ;	main.c:507: lcdgotoaddress(0x40);
                           3721 ;	genCall
   0C3E 75 82 40           3722 	mov	dpl,#0x40
   0C41 12s04r16           3723 	lcall	_lcdgotoaddress
                           3724 ;	main.c:508: add=0x40;
                           3725 ;	genAssign
   0C44 90s00r98           3726 	mov	dptr,#_lcd_dump_ddram_add_1_1
   0C47 74 40              3727 	mov	a,#0x40
   0C49 F0                 3728 	movx	@dptr,a
                           3729 ;	Peephole 112.b	changed ljmp to sjmp
   0C4A 80 A1              3730 	sjmp	00106$
   0C4C                    3731 00104$:
                           3732 ;	main.c:512: add++;
                           3733 ;	genPlus
   0C4C 90s00r98           3734 	mov	dptr,#_lcd_dump_ddram_add_1_1
                           3735 ;     genPlusIncr
   0C4F 74 01              3736 	mov	a,#0x01
                           3737 ;	Peephole 236.a	used r2 instead of ar2
   0C51 2A                 3738 	add	a,r2
   0C52 F0                 3739 	movx	@dptr,a
                           3740 ;	Peephole 112.b	changed ljmp to sjmp
   0C53 80 98              3741 	sjmp	00106$
   0C55                    3742 00109$:
   0C55 22                 3743 	ret
                           3744 ;------------------------------------------------------------
                           3745 ;Allocation info for local variables in function 'lcd_dump_cgram'
                           3746 ;------------------------------------------------------------
                           3747 ;add                       Allocated with name '_lcd_dump_cgram_add_1_1'
                           3748 ;------------------------------------------------------------
                           3749 ;	main.c:519: void lcd_dump_cgram() // reading and printing contents of cgram
                           3750 ;	-----------------------------------------
                           3751 ;	 function lcd_dump_cgram
                           3752 ;	-----------------------------------------
   0C56                    3753 _lcd_dump_cgram:
                           3754 ;	main.c:523: while(add<=64)
                           3755 ;	genAssign
   0C56 7A 00              3756 	mov	r2,#0x00
   0C58                    3757 00103$:
                           3758 ;	genCmpGt
                           3759 ;	genCmp
                           3760 ;	genIfxJump
                           3761 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0C58 EA                 3762 	mov	a,r2
   0C59 24 BF              3763 	add	a,#0xff - 0x40
                           3764 ;	Peephole 112.b	changed ljmp to sjmp
                           3765 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C5B 40 66              3766 	jc	00106$
                           3767 ;	Peephole 300	removed redundant label 00112$
                           3768 ;	main.c:525: if(add%8==0)
                           3769 ;	genAnd
   0C5D EA                 3770 	mov	a,r2
   0C5E 54 07              3771 	anl	a,#0x07
                           3772 ;	Peephole 160.c	removed sjmp by inverse jump logic
   0C60 60 02              3773 	jz	00114$
                           3774 ;	Peephole 300	removed redundant label 00113$
                           3775 ;	Peephole 112.b	changed ljmp to sjmp
   0C62 80 35              3776 	sjmp	00102$
   0C64                    3777 00114$:
                           3778 ;	main.c:527: printf_tiny(" \n\r %x\t ",add);
                           3779 ;	genCast
   0C64 8A 03              3780 	mov	ar3,r2
   0C66 7C 00              3781 	mov	r4,#0x00
                           3782 ;	genIpush
   0C68 C0 02              3783 	push	ar2
   0C6A C0 03              3784 	push	ar3
   0C6C C0 04              3785 	push	ar4
                           3786 ;	genIpush
   0C6E 74rC5              3787 	mov	a,#__str_15
   0C70 C0 E0              3788 	push	acc
   0C72 74s01              3789 	mov	a,#(__str_15 >> 8)
   0C74 C0 E0              3790 	push	acc
                           3791 ;	genCall
   0C76 12s00r00           3792 	lcall	_printf_tiny
   0C79 E5 81              3793 	mov	a,sp
   0C7B 24 FC              3794 	add	a,#0xfc
   0C7D F5 81              3795 	mov	sp,a
   0C7F D0 02              3796 	pop	ar2
                           3797 ;	main.c:528: lcdbusywait();
                           3798 ;	genCall
   0C81 C0 02              3799 	push	ar2
   0C83 12s04r0D           3800 	lcall	_lcdbusywait
   0C86 D0 02              3801 	pop	ar2
                           3802 ;	main.c:529: *write_cmd=0x40|((add/8)<<3);
                           3803 ;	genAssign
                           3804 ;	Peephole 182.b	used 16 bit load of dptr
   0C88 90 80 00           3805 	mov	dptr,#0x8000
                           3806 ;	genRightShift
                           3807 ;	genRightShiftLiteral
                           3808 ;	genrshOne
   0C8B EA                 3809 	mov	a,r2
   0C8C C4                 3810 	swap	a
   0C8D 23                 3811 	rl	a
   0C8E 54 1F              3812 	anl	a,#0x1f
                           3813 ;	genLeftShift
                           3814 ;	genLeftShiftLiteral
                           3815 ;	genlshOne
   0C90 FB                 3816 	mov	r3,a
                           3817 ;	Peephole 105	removed redundant mov
   0C91 C4                 3818 	swap	a
   0C92 03                 3819 	rr	a
   0C93 54 F8              3820 	anl	a,#0xf8
                           3821 ;	genOr
                           3822 ;	genPointerSet
                           3823 ;     genFarPointerSet
                           3824 ;	Peephole 139.b	removed redundant mov
   0C95 44 40              3825 	orl	a,#0x40
   0C97 FB                 3826 	mov	r3,a 
   0C98 F0                 3827 	movx	@dptr,a
   0C99                    3828 00102$:
                           3829 ;	main.c:532: lcdbusywait();
                           3830 ;	genCall
   0C99 C0 02              3831 	push	ar2
   0C9B 12s04r0D           3832 	lcall	_lcdbusywait
   0C9E D0 02              3833 	pop	ar2
                           3834 ;	main.c:533: printf_tiny(" %x ",*read_data);
                           3835 ;	genAssign
                           3836 ;	Peephole 182.b	used 16 bit load of dptr
   0CA0 90 E0 00           3837 	mov	dptr,#0xE000
                           3838 ;	genPointerGet
                           3839 ;	genFarPointerGet
   0CA3 E0                 3840 	movx	a,@dptr
   0CA4 FB                 3841 	mov	r3,a
                           3842 ;	genCast
   0CA5 7C 00              3843 	mov	r4,#0x00
                           3844 ;	genIpush
   0CA7 C0 02              3845 	push	ar2
   0CA9 C0 03              3846 	push	ar3
   0CAB C0 04              3847 	push	ar4
                           3848 ;	genIpush
   0CAD 74rCE              3849 	mov	a,#__str_16
   0CAF C0 E0              3850 	push	acc
   0CB1 74s01              3851 	mov	a,#(__str_16 >> 8)
   0CB3 C0 E0              3852 	push	acc
                           3853 ;	genCall
   0CB5 12s00r00           3854 	lcall	_printf_tiny
   0CB8 E5 81              3855 	mov	a,sp
   0CBA 24 FC              3856 	add	a,#0xfc
   0CBC F5 81              3857 	mov	sp,a
   0CBE D0 02              3858 	pop	ar2
                           3859 ;	main.c:534: add++;
                           3860 ;	genPlus
                           3861 ;     genPlusIncr
   0CC0 0A                 3862 	inc	r2
                           3863 ;	Peephole 112.b	changed ljmp to sjmp
   0CC1 80 95              3864 	sjmp	00103$
   0CC3                    3865 00106$:
   0CC3 22                 3866 	ret
                           3867 	.area CSEG    (CODE)
                           3868 	.area CONST   (CODE)
   0000                    3869 __str_0:
   0000 6F 70 74 69 6F 6E  3870 	.ascii "options:"
        73 3A
   0008 0A                 3871 	.db 0x0A
   0009 0A                 3872 	.db 0x0A
   000A 0D                 3873 	.db 0x0D
   000B 31 3E 43 6C 65 61  3874 	.ascii "1>Clear lcd"
        72 20 6C 63 64
   0016 0A                 3875 	.db 0x0A
   0017 0D                 3876 	.db 0x0D
   0018 32 3E 67 6F 74 6F  3877 	.ascii "2>goto row colomn"
        20 72 6F 77 20 63
        6F 6C 6F 6D 6E
   0029 0A                 3878 	.db 0x0A
   002A 0D                 3879 	.db 0x0D
   002B 33 3E 65 6E 74 65  3880 	.ascii "3>enter string"
        72 20 73 74 72 69
        6E 67
   0039 0A                 3881 	.db 0x0A
   003A 0D                 3882 	.db 0x0D
   003B 34                 3883 	.ascii "4"
   003C 3E 73 74 6F 70 20  3884 	.ascii ">stop clock"
        63 6C 6F 63 6B
   0047 0A                 3885 	.db 0x0A
   0048 0D                 3886 	.db 0x0D
   0049 35 3E 72 65 73 74  3887 	.ascii "5>restart clock"
        61 72 74 20 63 6C
        6F 63 6B
   0058 0A                 3888 	.db 0x0A
   0059 0D                 3889 	.db 0x0D
   005A 36 3E 72 65 73 65  3890 	.ascii "6>reset clock"
        74 20 63 6C 6F 63
        6B
   0067 0A                 3891 	.db 0x0A
   0068 0D                 3892 	.db 0x0D
   0069 37 3E 63 75 73 74  3893 	.ascii "7>custom charac"
        6F 6D 20 63 68 61
        72 61 63
   0078 74 65 72 20 69 6E  3894 	.ascii "ter input"
        70 75 74
   0081 0A                 3895 	.db 0x0A
   0082 0D                 3896 	.db 0x0D
   0083 38 3E 70 72 69 6E  3897 	.ascii "8>print custom characters"
        74 20 63 75 73 74
        6F 6D 20 63 68 61
        72 61 63 74 65 72
        73
   009C 0A                 3898 	.db 0x0A
   009D 0D                 3899 	.db 0x0D
   009E 39 3E 52 65 61 64  3900 	.ascii "9>Read contents of DDR"
        20 63 6F 6E 74 65
        6E 74 73 20 6F 66
        20 44 44 52
   00B4 41 4D              3901 	.ascii "AM"
   00B6 0A                 3902 	.db 0x0A
   00B7 0D                 3903 	.db 0x0D
   00B8 31 30 3E 72 65 61  3904 	.ascii "10>read contents of cgram"
        64 20 63 6F 6E 74
        65 6E 74 73 20 6F
        66 20 63 67 72 61
        6D
   00D1 0A                 3905 	.db 0x0A
   00D2 0D                 3906 	.db 0x0D
   00D3 00                 3907 	.db 0x00
   00D4                    3908 __str_1:
   00D4 0A                 3909 	.db 0x0A
   00D5 0D                 3910 	.db 0x0D
   00D6 65 6E 74 65 72 20  3911 	.ascii "enter option number:"
        6F 70 74 69 6F 6E
        20 6E 75 6D 62 65
        72 3A
   00EA 00                 3912 	.db 0x00
   00EB                    3913 __str_2:
   00EB 65 6E 74 65 72 20  3914 	.ascii "enter row "
        72 6F 77 20
   00F5 00                 3915 	.db 0x00
   00F6                    3916 __str_3:
   00F6 65 6E 74 65 72 20  3917 	.ascii "enter column"
        63 6F 6C 75 6D 6E
   0102 00                 3918 	.db 0x00
   0103                    3919 __str_4:
   0103 65 6E 74 65 72 20  3920 	.ascii "enter string"
        73 74 72 69 6E 67
   010F 00                 3921 	.db 0x00
   0110                    3922 __str_5:
   0110 65 6E 74 65 72 20  3923 	.ascii "enter chracter code"
        63 68 72 61 63 74
        65 72 20 63 6F 64
        65
   0123 00                 3924 	.db 0x00
   0124                    3925 __str_6:
   0124 65 6E 74 65 72 20  3926 	.ascii "enter row1 value"
        72 6F 77 31 20 76
        61 6C 75 65
   0134 00                 3927 	.db 0x00
   0135                    3928 __str_7:
   0135 65 6E 74 65 72 20  3929 	.ascii "enter row2 value"
        72 6F 77 32 20 76
        61 6C 75 65
   0145 00                 3930 	.db 0x00
   0146                    3931 __str_8:
   0146 65 6E 74 65 72 20  3932 	.ascii "enter row3 value"
        72 6F 77 33 20 76
        61 6C 75 65
   0156 00                 3933 	.db 0x00
   0157                    3934 __str_9:
   0157 65 6E 74 65 72 20  3935 	.ascii "enter row4 value"
        72 6F 77 34 20 76
        61 6C 75 65
   0167 00                 3936 	.db 0x00
   0168                    3937 __str_10:
   0168 65 6E 74 65 72 20  3938 	.ascii "enter row5 value"
        72 6F 77 35 20 76
        61 6C 75 65
   0178 00                 3939 	.db 0x00
   0179                    3940 __str_11:
   0179 65 6E 74 65 72 20  3941 	.ascii "enter row6 value"
        72 6F 77 36 20 76
        61 6C 75 65
   0189 00                 3942 	.db 0x00
   018A                    3943 __str_12:
   018A 65 6E 74 65 72 20  3944 	.ascii "enter row7 value"
        72 6F 77 37 20 76
        61 6C 75 65
   019A 00                 3945 	.db 0x00
   019B                    3946 __str_13:
   019B 65 6E 74 65 72 20  3947 	.ascii "enter row8 value"
        72 6F 77 38 20 76
        61 6C 75 65
   01AB 00                 3948 	.db 0x00
   01AC                    3949 __str_14:
   01AC 6E 6F 74 20 76 61  3950 	.ascii "not valid enter again "
        6C 69 64 20 65 6E
        74 65 72 20 61 67
        61 69 6E 20
   01C2 0A                 3951 	.db 0x0A
   01C3 0D                 3952 	.db 0x0D
   01C4 00                 3953 	.db 0x00
   01C5                    3954 __str_15:
   01C5 20                 3955 	.ascii " "
   01C6 0A                 3956 	.db 0x0A
   01C7 0D                 3957 	.db 0x0D
   01C8 20 25 78           3958 	.ascii " %x"
   01CB 09                 3959 	.db 0x09
   01CC 20                 3960 	.ascii " "
   01CD 00                 3961 	.db 0x00
   01CE                    3962 __str_16:
   01CE 20 25 78 20        3963 	.ascii " %x "
   01D2 00                 3964 	.db 0x00
                           3965 	.area XINIT   (CODE)
   0000                    3966 __xinit__ctr:
   0000 00                 3967 	.db #0x00
   0001                    3968 __xinit__hundrdmilli:
   0001 30                 3969 	.db #0x30
   0002                    3970 __xinit__secs1:
   0002 30                 3971 	.db #0x30
   0003                    3972 __xinit__secs0:
   0003 30                 3973 	.db #0x30
   0004                    3974 __xinit__mins1:
   0004 30                 3975 	.db #0x30
   0005                    3976 __xinit__mins0:
   0005 30                 3977 	.db #0x30

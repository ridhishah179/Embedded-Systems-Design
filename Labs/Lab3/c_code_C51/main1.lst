                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Oct 27 19:32:40 2018
                              5 ;--------------------------------------------------------
                              6 	.module main1
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _dataout
                             14 	.globl __sdcc_external_startup
                             15 	.globl _TF1
                             16 	.globl _TR1
                             17 	.globl _TF0
                             18 	.globl _TR0
                             19 	.globl _IE1
                             20 	.globl _IT1
                             21 	.globl _IE0
                             22 	.globl _IT0
                             23 	.globl _SM0
                             24 	.globl _SM1
                             25 	.globl _SM2
                             26 	.globl _REN
                             27 	.globl _TB8
                             28 	.globl _RB8
                             29 	.globl _TI
                             30 	.globl _RI
                             31 	.globl _CY
                             32 	.globl _AC
                             33 	.globl _F0
                             34 	.globl _RS1
                             35 	.globl _RS0
                             36 	.globl _OV
                             37 	.globl _F1
                             38 	.globl _P
                             39 	.globl _RD
                             40 	.globl _WR
                             41 	.globl _T1
                             42 	.globl _T0
                             43 	.globl _INT1
                             44 	.globl _INT0
                             45 	.globl _TXD0
                             46 	.globl _TXD
                             47 	.globl _RXD0
                             48 	.globl _RXD
                             49 	.globl _P3_7
                             50 	.globl _P3_6
                             51 	.globl _P3_5
                             52 	.globl _P3_4
                             53 	.globl _P3_3
                             54 	.globl _P3_2
                             55 	.globl _P3_1
                             56 	.globl _P3_0
                             57 	.globl _P2_7
                             58 	.globl _P2_6
                             59 	.globl _P2_5
                             60 	.globl _P2_4
                             61 	.globl _P2_3
                             62 	.globl _P2_2
                             63 	.globl _P2_1
                             64 	.globl _P2_0
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _P0_7
                             74 	.globl _P0_6
                             75 	.globl _P0_5
                             76 	.globl _P0_4
                             77 	.globl _P0_3
                             78 	.globl _P0_2
                             79 	.globl _P0_1
                             80 	.globl _P0_0
                             81 	.globl _PS
                             82 	.globl _PT1
                             83 	.globl _PX1
                             84 	.globl _PT0
                             85 	.globl _PX0
                             86 	.globl _EA
                             87 	.globl _ES
                             88 	.globl _ET1
                             89 	.globl _EX1
                             90 	.globl _ET0
                             91 	.globl _EX0
                             92 	.globl _BREG_F7
                             93 	.globl _BREG_F6
                             94 	.globl _BREG_F5
                             95 	.globl _BREG_F4
                             96 	.globl _BREG_F3
                             97 	.globl _BREG_F2
                             98 	.globl _BREG_F1
                             99 	.globl _BREG_F0
                            100 	.globl _P5_7
                            101 	.globl _P5_6
                            102 	.globl _P5_5
                            103 	.globl _P5_4
                            104 	.globl _P5_3
                            105 	.globl _P5_2
                            106 	.globl _P5_1
                            107 	.globl _P5_0
                            108 	.globl _P4_7
                            109 	.globl _P4_6
                            110 	.globl _P4_5
                            111 	.globl _P4_4
                            112 	.globl _P4_3
                            113 	.globl _P4_2
                            114 	.globl _P4_1
                            115 	.globl _P4_0
                            116 	.globl _PX0L
                            117 	.globl _PT0L
                            118 	.globl _PX1L
                            119 	.globl _PT1L
                            120 	.globl _PLS
                            121 	.globl _PT2L
                            122 	.globl _PPCL
                            123 	.globl _EC
                            124 	.globl _CCF0
                            125 	.globl _CCF1
                            126 	.globl _CCF2
                            127 	.globl _CCF3
                            128 	.globl _CCF4
                            129 	.globl _CR
                            130 	.globl _CF
                            131 	.globl _TF2
                            132 	.globl _EXF2
                            133 	.globl _RCLK
                            134 	.globl _TCLK
                            135 	.globl _EXEN2
                            136 	.globl _TR2
                            137 	.globl _C_T2
                            138 	.globl _CP_RL2
                            139 	.globl _T2CON_7
                            140 	.globl _T2CON_6
                            141 	.globl _T2CON_5
                            142 	.globl _T2CON_4
                            143 	.globl _T2CON_3
                            144 	.globl _T2CON_2
                            145 	.globl _T2CON_1
                            146 	.globl _T2CON_0
                            147 	.globl _PT2
                            148 	.globl _ET2
                            149 	.globl _TMOD
                            150 	.globl _TL1
                            151 	.globl _TL0
                            152 	.globl _TH1
                            153 	.globl _TH0
                            154 	.globl _TCON
                            155 	.globl _SP
                            156 	.globl _SCON
                            157 	.globl _SBUF0
                            158 	.globl _SBUF
                            159 	.globl _PSW
                            160 	.globl _PCON
                            161 	.globl _P3
                            162 	.globl _P2
                            163 	.globl _P1
                            164 	.globl _P0
                            165 	.globl _IP
                            166 	.globl _IE
                            167 	.globl _DP0L
                            168 	.globl _DPL
                            169 	.globl _DP0H
                            170 	.globl _DPH
                            171 	.globl _B
                            172 	.globl _ACC
                            173 	.globl _EECON
                            174 	.globl _KBF
                            175 	.globl _KBE
                            176 	.globl _KBLS
                            177 	.globl _BRL
                            178 	.globl _BDRCON
                            179 	.globl _T2MOD
                            180 	.globl _SPDAT
                            181 	.globl _SPSTA
                            182 	.globl _SPCON
                            183 	.globl _SADEN
                            184 	.globl _SADDR
                            185 	.globl _WDTPRG
                            186 	.globl _WDTRST
                            187 	.globl _P5
                            188 	.globl _P4
                            189 	.globl _IPH1
                            190 	.globl _IPL1
                            191 	.globl _IPH0
                            192 	.globl _IPL0
                            193 	.globl _IEN1
                            194 	.globl _IEN0
                            195 	.globl _CMOD
                            196 	.globl _CL
                            197 	.globl _CH
                            198 	.globl _CCON
                            199 	.globl _CCAPM4
                            200 	.globl _CCAPM3
                            201 	.globl _CCAPM2
                            202 	.globl _CCAPM1
                            203 	.globl _CCAPM0
                            204 	.globl _CCAP4L
                            205 	.globl _CCAP3L
                            206 	.globl _CCAP2L
                            207 	.globl _CCAP1L
                            208 	.globl _CCAP0L
                            209 	.globl _CCAP4H
                            210 	.globl _CCAP3H
                            211 	.globl _CCAP2H
                            212 	.globl _CCAP1H
                            213 	.globl _CCAP0H
                            214 	.globl _CKCKON1
                            215 	.globl _CKCKON0
                            216 	.globl _CKRL
                            217 	.globl _AUXR1
                            218 	.globl _AUXR
                            219 	.globl _TH2
                            220 	.globl _TL2
                            221 	.globl _RCAP2H
                            222 	.globl _RCAP2L
                            223 	.globl _T2CON
                            224 	.globl _val
                            225 	.globl _heap
                            226 	.globl _putchar
                            227 	.globl _getchar
                            228 	.globl _get_num
                            229 	.globl _serial_init
                            230 ;--------------------------------------------------------
                            231 ; special function registers
                            232 ;--------------------------------------------------------
                            233 	.area RSEG    (DATA)
                    00C8    234 _T2CON	=	0x00c8
                    00CA    235 _RCAP2L	=	0x00ca
                    00CB    236 _RCAP2H	=	0x00cb
                    00CC    237 _TL2	=	0x00cc
                    00CD    238 _TH2	=	0x00cd
                    008E    239 _AUXR	=	0x008e
                    00A2    240 _AUXR1	=	0x00a2
                    0097    241 _CKRL	=	0x0097
                    008F    242 _CKCKON0	=	0x008f
                    008F    243 _CKCKON1	=	0x008f
                    00FA    244 _CCAP0H	=	0x00fa
                    00FB    245 _CCAP1H	=	0x00fb
                    00FC    246 _CCAP2H	=	0x00fc
                    00FD    247 _CCAP3H	=	0x00fd
                    00FE    248 _CCAP4H	=	0x00fe
                    00EA    249 _CCAP0L	=	0x00ea
                    00EB    250 _CCAP1L	=	0x00eb
                    00EC    251 _CCAP2L	=	0x00ec
                    00ED    252 _CCAP3L	=	0x00ed
                    00EE    253 _CCAP4L	=	0x00ee
                    00DA    254 _CCAPM0	=	0x00da
                    00DB    255 _CCAPM1	=	0x00db
                    00DC    256 _CCAPM2	=	0x00dc
                    00DD    257 _CCAPM3	=	0x00dd
                    00DE    258 _CCAPM4	=	0x00de
                    00D8    259 _CCON	=	0x00d8
                    00F9    260 _CH	=	0x00f9
                    00E9    261 _CL	=	0x00e9
                    00D9    262 _CMOD	=	0x00d9
                    00A8    263 _IEN0	=	0x00a8
                    00B1    264 _IEN1	=	0x00b1
                    00B8    265 _IPL0	=	0x00b8
                    00B7    266 _IPH0	=	0x00b7
                    00B2    267 _IPL1	=	0x00b2
                    00B3    268 _IPH1	=	0x00b3
                    00C0    269 _P4	=	0x00c0
                    00D8    270 _P5	=	0x00d8
                    00A6    271 _WDTRST	=	0x00a6
                    00A7    272 _WDTPRG	=	0x00a7
                    00A9    273 _SADDR	=	0x00a9
                    00B9    274 _SADEN	=	0x00b9
                    00C3    275 _SPCON	=	0x00c3
                    00C4    276 _SPSTA	=	0x00c4
                    00C5    277 _SPDAT	=	0x00c5
                    00C9    278 _T2MOD	=	0x00c9
                    009B    279 _BDRCON	=	0x009b
                    009A    280 _BRL	=	0x009a
                    009C    281 _KBLS	=	0x009c
                    009D    282 _KBE	=	0x009d
                    009E    283 _KBF	=	0x009e
                    00D2    284 _EECON	=	0x00d2
                    00E0    285 _ACC	=	0x00e0
                    00F0    286 _B	=	0x00f0
                    0083    287 _DPH	=	0x0083
                    0083    288 _DP0H	=	0x0083
                    0082    289 _DPL	=	0x0082
                    0082    290 _DP0L	=	0x0082
                    00A8    291 _IE	=	0x00a8
                    00B8    292 _IP	=	0x00b8
                    0080    293 _P0	=	0x0080
                    0090    294 _P1	=	0x0090
                    00A0    295 _P2	=	0x00a0
                    00B0    296 _P3	=	0x00b0
                    0087    297 _PCON	=	0x0087
                    00D0    298 _PSW	=	0x00d0
                    0099    299 _SBUF	=	0x0099
                    0099    300 _SBUF0	=	0x0099
                    0098    301 _SCON	=	0x0098
                    0081    302 _SP	=	0x0081
                    0088    303 _TCON	=	0x0088
                    008C    304 _TH0	=	0x008c
                    008D    305 _TH1	=	0x008d
                    008A    306 _TL0	=	0x008a
                    008B    307 _TL1	=	0x008b
                    0089    308 _TMOD	=	0x0089
                            309 ;--------------------------------------------------------
                            310 ; special function bits
                            311 ;--------------------------------------------------------
                            312 	.area RSEG    (DATA)
                    00AD    313 _ET2	=	0x00ad
                    00BD    314 _PT2	=	0x00bd
                    00C8    315 _T2CON_0	=	0x00c8
                    00C9    316 _T2CON_1	=	0x00c9
                    00CA    317 _T2CON_2	=	0x00ca
                    00CB    318 _T2CON_3	=	0x00cb
                    00CC    319 _T2CON_4	=	0x00cc
                    00CD    320 _T2CON_5	=	0x00cd
                    00CE    321 _T2CON_6	=	0x00ce
                    00CF    322 _T2CON_7	=	0x00cf
                    00C8    323 _CP_RL2	=	0x00c8
                    00C9    324 _C_T2	=	0x00c9
                    00CA    325 _TR2	=	0x00ca
                    00CB    326 _EXEN2	=	0x00cb
                    00CC    327 _TCLK	=	0x00cc
                    00CD    328 _RCLK	=	0x00cd
                    00CE    329 _EXF2	=	0x00ce
                    00CF    330 _TF2	=	0x00cf
                    00DF    331 _CF	=	0x00df
                    00DE    332 _CR	=	0x00de
                    00DC    333 _CCF4	=	0x00dc
                    00DB    334 _CCF3	=	0x00db
                    00DA    335 _CCF2	=	0x00da
                    00D9    336 _CCF1	=	0x00d9
                    00D8    337 _CCF0	=	0x00d8
                    00AE    338 _EC	=	0x00ae
                    00BE    339 _PPCL	=	0x00be
                    00BD    340 _PT2L	=	0x00bd
                    00BC    341 _PLS	=	0x00bc
                    00BB    342 _PT1L	=	0x00bb
                    00BA    343 _PX1L	=	0x00ba
                    00B9    344 _PT0L	=	0x00b9
                    00B8    345 _PX0L	=	0x00b8
                    00C0    346 _P4_0	=	0x00c0
                    00C1    347 _P4_1	=	0x00c1
                    00C2    348 _P4_2	=	0x00c2
                    00C3    349 _P4_3	=	0x00c3
                    00C4    350 _P4_4	=	0x00c4
                    00C5    351 _P4_5	=	0x00c5
                    00C6    352 _P4_6	=	0x00c6
                    00C7    353 _P4_7	=	0x00c7
                    00D8    354 _P5_0	=	0x00d8
                    00D9    355 _P5_1	=	0x00d9
                    00DA    356 _P5_2	=	0x00da
                    00DB    357 _P5_3	=	0x00db
                    00DC    358 _P5_4	=	0x00dc
                    00DD    359 _P5_5	=	0x00dd
                    00DE    360 _P5_6	=	0x00de
                    00DF    361 _P5_7	=	0x00df
                    00F0    362 _BREG_F0	=	0x00f0
                    00F1    363 _BREG_F1	=	0x00f1
                    00F2    364 _BREG_F2	=	0x00f2
                    00F3    365 _BREG_F3	=	0x00f3
                    00F4    366 _BREG_F4	=	0x00f4
                    00F5    367 _BREG_F5	=	0x00f5
                    00F6    368 _BREG_F6	=	0x00f6
                    00F7    369 _BREG_F7	=	0x00f7
                    00A8    370 _EX0	=	0x00a8
                    00A9    371 _ET0	=	0x00a9
                    00AA    372 _EX1	=	0x00aa
                    00AB    373 _ET1	=	0x00ab
                    00AC    374 _ES	=	0x00ac
                    00AF    375 _EA	=	0x00af
                    00B8    376 _PX0	=	0x00b8
                    00B9    377 _PT0	=	0x00b9
                    00BA    378 _PX1	=	0x00ba
                    00BB    379 _PT1	=	0x00bb
                    00BC    380 _PS	=	0x00bc
                    0080    381 _P0_0	=	0x0080
                    0081    382 _P0_1	=	0x0081
                    0082    383 _P0_2	=	0x0082
                    0083    384 _P0_3	=	0x0083
                    0084    385 _P0_4	=	0x0084
                    0085    386 _P0_5	=	0x0085
                    0086    387 _P0_6	=	0x0086
                    0087    388 _P0_7	=	0x0087
                    0090    389 _P1_0	=	0x0090
                    0091    390 _P1_1	=	0x0091
                    0092    391 _P1_2	=	0x0092
                    0093    392 _P1_3	=	0x0093
                    0094    393 _P1_4	=	0x0094
                    0095    394 _P1_5	=	0x0095
                    0096    395 _P1_6	=	0x0096
                    0097    396 _P1_7	=	0x0097
                    00A0    397 _P2_0	=	0x00a0
                    00A1    398 _P2_1	=	0x00a1
                    00A2    399 _P2_2	=	0x00a2
                    00A3    400 _P2_3	=	0x00a3
                    00A4    401 _P2_4	=	0x00a4
                    00A5    402 _P2_5	=	0x00a5
                    00A6    403 _P2_6	=	0x00a6
                    00A7    404 _P2_7	=	0x00a7
                    00B0    405 _P3_0	=	0x00b0
                    00B1    406 _P3_1	=	0x00b1
                    00B2    407 _P3_2	=	0x00b2
                    00B3    408 _P3_3	=	0x00b3
                    00B4    409 _P3_4	=	0x00b4
                    00B5    410 _P3_5	=	0x00b5
                    00B6    411 _P3_6	=	0x00b6
                    00B7    412 _P3_7	=	0x00b7
                    00B0    413 _RXD	=	0x00b0
                    00B0    414 _RXD0	=	0x00b0
                    00B1    415 _TXD	=	0x00b1
                    00B1    416 _TXD0	=	0x00b1
                    00B2    417 _INT0	=	0x00b2
                    00B3    418 _INT1	=	0x00b3
                    00B4    419 _T0	=	0x00b4
                    00B5    420 _T1	=	0x00b5
                    00B6    421 _WR	=	0x00b6
                    00B7    422 _RD	=	0x00b7
                    00D0    423 _P	=	0x00d0
                    00D1    424 _F1	=	0x00d1
                    00D2    425 _OV	=	0x00d2
                    00D3    426 _RS0	=	0x00d3
                    00D4    427 _RS1	=	0x00d4
                    00D5    428 _F0	=	0x00d5
                    00D6    429 _AC	=	0x00d6
                    00D7    430 _CY	=	0x00d7
                    0098    431 _RI	=	0x0098
                    0099    432 _TI	=	0x0099
                    009A    433 _RB8	=	0x009a
                    009B    434 _TB8	=	0x009b
                    009C    435 _REN	=	0x009c
                    009D    436 _SM2	=	0x009d
                    009E    437 _SM1	=	0x009e
                    009F    438 _SM0	=	0x009f
                    0088    439 _IT0	=	0x0088
                    0089    440 _IE0	=	0x0089
                    008A    441 _IT1	=	0x008a
                    008B    442 _IE1	=	0x008b
                    008C    443 _TR0	=	0x008c
                    008D    444 _TF0	=	0x008d
                    008E    445 _TR1	=	0x008e
                    008F    446 _TF1	=	0x008f
                            447 ;--------------------------------------------------------
                            448 ; overlayable register banks
                            449 ;--------------------------------------------------------
                            450 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     451 	.ds 8
                            452 ;--------------------------------------------------------
                            453 ; internal ram data
                            454 ;--------------------------------------------------------
                            455 	.area DSEG    (DATA)
   0000                     456 _main_sloc0_1_0:
   0000                     457 	.ds 3
   0003                     458 _main_sloc1_1_0:
   0003                     459 	.ds 3
   0006                     460 _main_sloc2_1_0:
   0006                     461 	.ds 3
   0009                     462 _main_sloc3_1_0:
   0009                     463 	.ds 2
   000B                     464 _main_sloc4_1_0:
   000B                     465 	.ds 3
   000E                     466 _main_sloc5_1_0:
   000E                     467 	.ds 3
   0011                     468 _main_sloc6_1_0:
   0011                     469 	.ds 3
                            470 ;--------------------------------------------------------
                            471 ; overlayable items in internal ram 
                            472 ;--------------------------------------------------------
                            473 	.area OSEG    (OVR,DATA)
                            474 ;--------------------------------------------------------
                            475 ; Stack segment in internal ram 
                            476 ;--------------------------------------------------------
                            477 	.area	SSEG	(DATA)
   0000                     478 __start__stack:
   0000                     479 	.ds	1
                            480 
                            481 ;--------------------------------------------------------
                            482 ; indirectly addressable internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area ISEG    (DATA)
                            485 ;--------------------------------------------------------
                            486 ; bit data
                            487 ;--------------------------------------------------------
                            488 	.area BSEG    (BIT)
                            489 ;--------------------------------------------------------
                            490 ; paged external ram data
                            491 ;--------------------------------------------------------
                            492 	.area PSEG    (PAG,XDATA)
                            493 ;--------------------------------------------------------
                            494 ; external ram data
                            495 ;--------------------------------------------------------
                            496 	.area XSEG    (XDATA)
   0000                     497 _heap::
   0000                     498 	.ds 6000
                    CFFF    499 _val	=	0xcfff
   1770                     500 _dataout_a_1_1:
   1770                     501 	.ds 1
   1771                     502 _main_x1_1_1:
   1771                     503 	.ds 2
   1773                     504 _main_x2_1_1:
   1773                     505 	.ds 2
   1775                     506 _main_buffsize_1_1:
   1775                     507 	.ds 200
   183D                     508 _main_buffAddress_1_1:
   183D                     509 	.ds 300
   1969                     510 _main_buffer0_1_1:
   1969                     511 	.ds 3
   196C                     512 _main_buffer1_1_1:
   196C                     513 	.ds 3
   196F                     514 _main_buffCnt_1_1:
   196F                     515 	.ds 2
   1971                     516 _main_Numchar_1_1:
   1971                     517 	.ds 2
   1973                     518 _main_start_1_1:
   1973                     519 	.ds 1
   1974                     520 _main_b0chr_1_1:
   1974                     521 	.ds 2
   1976                     522 _main_bData_1_1:
   1976                     523 	.ds 2
   1978                     524 _main_counter_1_1:
   1978                     525 	.ds 2
   197A                     526 _putchar_c_1_1:
   197A                     527 	.ds 1
   197B                     528 _get_num_str_1_1:
   197B                     529 	.ds 10
   1985                     530 _get_num_i_1_1:
   1985                     531 	.ds 2
                            532 ;--------------------------------------------------------
                            533 ; external initialized ram data
                            534 ;--------------------------------------------------------
                            535 	.area XISEG   (XDATA)
                            536 	.area HOME    (CODE)
                            537 	.area GSINIT0 (CODE)
                            538 	.area GSINIT1 (CODE)
                            539 	.area GSINIT2 (CODE)
                            540 	.area GSINIT3 (CODE)
                            541 	.area GSINIT4 (CODE)
                            542 	.area GSINIT5 (CODE)
                            543 	.area GSINIT  (CODE)
                            544 	.area GSFINAL (CODE)
                            545 	.area CSEG    (CODE)
                            546 ;--------------------------------------------------------
                            547 ; interrupt vector 
                            548 ;--------------------------------------------------------
                            549 	.area HOME    (CODE)
   0000                     550 __interrupt_vect:
   0000 02s00r00            551 	ljmp	__sdcc_gsinit_startup
                            552 ;--------------------------------------------------------
                            553 ; global & static initialisations
                            554 ;--------------------------------------------------------
                            555 	.area HOME    (CODE)
                            556 	.area GSINIT  (CODE)
                            557 	.area GSFINAL (CODE)
                            558 	.area GSINIT  (CODE)
                            559 	.globl __sdcc_gsinit_startup
                            560 	.globl __sdcc_program_startup
                            561 	.globl __start__stack
                            562 	.globl __mcs51_genXINIT
                            563 	.globl __mcs51_genXRAMCLEAR
                            564 	.globl __mcs51_genRAMCLEAR
                            565 	.area GSFINAL (CODE)
   0000 02s00r00            566 	ljmp	__sdcc_program_startup
                            567 ;--------------------------------------------------------
                            568 ; Home
                            569 ;--------------------------------------------------------
                            570 	.area HOME    (CODE)
                            571 	.area CSEG    (CODE)
   0000                     572 __sdcc_program_startup:
   0000 12s00r1F            573 	lcall	_main
                            574 ;	return from main will lock up
   0003 80 FE               575 	sjmp .
                            576 ;--------------------------------------------------------
                            577 ; code
                            578 ;--------------------------------------------------------
                            579 	.area CSEG    (CODE)
                            580 ;------------------------------------------------------------
                            581 ;Allocation info for local variables in function '_sdcc_external_startup'
                            582 ;------------------------------------------------------------
                            583 ;------------------------------------------------------------
                            584 ;	main1.c:23: _sdcc_external_startup()
                            585 ;	-----------------------------------------
                            586 ;	 function _sdcc_external_startup
                            587 ;	-----------------------------------------
   0005                     588 __sdcc_external_startup:
                    0002    589 	ar2 = 0x02
                    0003    590 	ar3 = 0x03
                    0004    591 	ar4 = 0x04
                    0005    592 	ar5 = 0x05
                    0006    593 	ar6 = 0x06
                    0007    594 	ar7 = 0x07
                    0000    595 	ar0 = 0x00
                    0001    596 	ar1 = 0x01
                            597 ;	main1.c:25: AUXR |= 0x0C;
                            598 ;	genOr
   0005 43 8E 0C            599 	orl	_AUXR,#0x0C
                            600 ;	main1.c:26: AUXR &= 0xFD;
                            601 ;	genAnd
   0008 53 8E FD            602 	anl	_AUXR,#0xFD
                            603 ;	main1.c:27: return 0;
                            604 ;	genRet
                            605 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 00            606 	mov	dptr,#0x0000
                            607 ;	Peephole 300	removed redundant label 00101$
   000E 22                  608 	ret
                            609 ;------------------------------------------------------------
                            610 ;Allocation info for local variables in function 'dataout'
                            611 ;------------------------------------------------------------
                            612 ;a                         Allocated with name '_dataout_a_1_1'
                            613 ;------------------------------------------------------------
                            614 ;	main1.c:29: void dataout(uint8_t a)
                            615 ;	-----------------------------------------
                            616 ;	 function dataout
                            617 ;	-----------------------------------------
   000F                     618 _dataout:
                            619 ;	genReceive
   000F E5 82               620 	mov	a,dpl
   0011 90s17r70            621 	mov	dptr,#_dataout_a_1_1
   0014 F0                  622 	movx	@dptr,a
                            623 ;	main1.c:31: val = a;
                            624 ;	genAssign
   0015 90s17r70            625 	mov	dptr,#_dataout_a_1_1
   0018 E0                  626 	movx	a,@dptr
                            627 ;	genAssign
   0019 FA                  628 	mov	r2,a
   001A 90 CF FF            629 	mov	dptr,#_val
                            630 ;	Peephole 100	removed redundant mov
   001D F0                  631 	movx	@dptr,a
                            632 ;	Peephole 300	removed redundant label 00101$
   001E 22                  633 	ret
                            634 ;------------------------------------------------------------
                            635 ;Allocation info for local variables in function 'main'
                            636 ;------------------------------------------------------------
                            637 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            638 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            639 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                            640 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                            641 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                            642 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                            643 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                            644 ;str                       Allocated with name '_main_str_1_1'
                            645 ;x1                        Allocated with name '_main_x1_1_1'
                            646 ;x2                        Allocated with name '_main_x2_1_1'
                            647 ;x3                        Allocated with name '_main_x3_1_1'
                            648 ;buffsize                  Allocated with name '_main_buffsize_1_1'
                            649 ;buffAddress               Allocated with name '_main_buffAddress_1_1'
                            650 ;buffer0                   Allocated with name '_main_buffer0_1_1'
                            651 ;buffer1                   Allocated with name '_main_buffer1_1_1'
                            652 ;buffern                   Allocated with name '_main_buffern_1_1'
                            653 ;buffCnt                   Allocated with name '_main_buffCnt_1_1'
                            654 ;Numchar                   Allocated with name '_main_Numchar_1_1'
                            655 ;start                     Allocated with name '_main_start_1_1'
                            656 ;c                         Allocated with name '_main_c_1_1'
                            657 ;b0chr                     Allocated with name '_main_b0chr_1_1'
                            658 ;b1chr                     Allocated with name '_main_b1chr_1_1'
                            659 ;count1                    Allocated with name '_main_count1_1_1'
                            660 ;bnumber                   Allocated with name '_main_bnumber_1_1'
                            661 ;buffNo                    Allocated with name '_main_buffNo_1_1'
                            662 ;bufferLen                 Allocated with name '_main_bufferLen_1_1'
                            663 ;bData                     Allocated with name '_main_bData_1_1'
                            664 ;buffAdd                   Allocated with name '_main_buffAdd_1_1'
                            665 ;counter                   Allocated with name '_main_counter_1_1'
                            666 ;ncnt                      Allocated with name '_main_ncnt_1_1'
                            667 ;------------------------------------------------------------
                            668 ;	main1.c:37: void main()
                            669 ;	-----------------------------------------
                            670 ;	 function main
                            671 ;	-----------------------------------------
   001F                     672 _main:
                            673 ;	main1.c:40: unsigned int x1=0,x2=0,x3=0;
                            674 ;	genAssign
   001F 90s17r71            675 	mov	dptr,#_main_x1_1_1
   0022 E4                  676 	clr	a
   0023 F0                  677 	movx	@dptr,a
   0024 A3                  678 	inc	dptr
   0025 F0                  679 	movx	@dptr,a
                            680 ;	genAssign
   0026 90s17r73            681 	mov	dptr,#_main_x2_1_1
   0029 E4                  682 	clr	a
   002A F0                  683 	movx	@dptr,a
   002B A3                  684 	inc	dptr
   002C F0                  685 	movx	@dptr,a
                            686 ;	main1.c:41: unsigned int buffsize[100]={0};
                            687 ;	genPointerSet
                            688 ;     genFarPointerSet
   002D 90s17r75            689 	mov	dptr,#_main_buffsize_1_1
                            690 ;	Peephole 181	changed mov to clr
   0030 E4                  691 	clr	a
   0031 F0                  692 	movx	@dptr,a
   0032 A3                  693 	inc	dptr
                            694 ;	Peephole 101	removed redundant mov
   0033 F0                  695 	movx	@dptr,a
                            696 ;	main1.c:46: unsigned int  buffCnt=0;
                            697 ;	genAssign
   0034 90s19r6F            698 	mov	dptr,#_main_buffCnt_1_1
   0037 E4                  699 	clr	a
   0038 F0                  700 	movx	@dptr,a
   0039 A3                  701 	inc	dptr
   003A F0                  702 	movx	@dptr,a
                            703 ;	main1.c:47: unsigned int Numchar=0;
                            704 ;	genAssign
   003B 90s19r71            705 	mov	dptr,#_main_Numchar_1_1
   003E E4                  706 	clr	a
   003F F0                  707 	movx	@dptr,a
   0040 A3                  708 	inc	dptr
   0041 F0                  709 	movx	@dptr,a
                            710 ;	main1.c:48: volatile unsigned char start  = 0;
                            711 ;	genAssign
   0042 90s19r73            712 	mov	dptr,#_main_start_1_1
                            713 ;	Peephole 181	changed mov to clr
                            714 ;	main1.c:50: unsigned int b0chr=0;
                            715 ;	genAssign
                            716 ;	Peephole 219.a	removed redundant clear
   0045 E4                  717 	clr	a
   0046 F0                  718 	movx	@dptr,a
   0047 90s19r74            719 	mov	dptr,#_main_b0chr_1_1
   004A F0                  720 	movx	@dptr,a
   004B A3                  721 	inc	dptr
   004C F0                  722 	movx	@dptr,a
                            723 ;	main1.c:56: volatile unsigned int bData=0;
                            724 ;	genAssign
   004D 90s19r76            725 	mov	dptr,#_main_bData_1_1
   0050 E4                  726 	clr	a
   0051 F0                  727 	movx	@dptr,a
   0052 A3                  728 	inc	dptr
   0053 F0                  729 	movx	@dptr,a
                            730 ;	main1.c:61: init_dynamic_memory((MEMHEADER xdata *)heap, heapsz);//allocating heap
                            731 ;	genAssign
   0054 90s00r00            732 	mov	dptr,#_init_dynamic_memory_PARM_2
   0057 74 70               733 	mov	a,#0x70
   0059 F0                  734 	movx	@dptr,a
   005A A3                  735 	inc	dptr
   005B 74 17               736 	mov	a,#0x17
   005D F0                  737 	movx	@dptr,a
                            738 ;	genCall
                            739 ;	Peephole 182.a	used 16 bit load of DPTR
   005E 90s00r00            740 	mov	dptr,#_heap
   0061 12s00r00            741 	lcall	_init_dynamic_memory
                            742 ;	main1.c:62: serial_init();
                            743 ;	genCall
   0064 12s0FrA6            744 	lcall	_serial_init
                            745 ;	main1.c:63: buffer0 = 0;
                            746 ;	genAssign
   0067 90s19r69            747 	mov	dptr,#_main_buffer0_1_1
   006A E4                  748 	clr	a
   006B F0                  749 	movx	@dptr,a
   006C A3                  750 	inc	dptr
   006D F0                  751 	movx	@dptr,a
   006E A3                  752 	inc	dptr
   006F F0                  753 	movx	@dptr,a
                            754 ;	main1.c:64: buffer1 = 0;
                            755 ;	genAssign
   0070 90s19r6C            756 	mov	dptr,#_main_buffer1_1_1
   0073 E4                  757 	clr	a
   0074 F0                  758 	movx	@dptr,a
   0075 A3                  759 	inc	dptr
   0076 F0                  760 	movx	@dptr,a
   0077 A3                  761 	inc	dptr
   0078 F0                  762 	movx	@dptr,a
                            763 ;	main1.c:67: DEBUGPORT(1)//calling bebug function
                            764 ;	genCall
   0079 75 82 01            765 	mov	dpl,#0x01
   007C 12s00r0F            766 	lcall	_dataout
                            767 ;	main1.c:69: while((buffer0==0)&& (buffer1==0))
   007F                     768 00114$:
                            769 ;	genAssign
   007F 90s19r69            770 	mov	dptr,#_main_buffer0_1_1
   0082 E0                  771 	movx	a,@dptr
   0083 FA                  772 	mov	r2,a
   0084 A3                  773 	inc	dptr
   0085 E0                  774 	movx	a,@dptr
   0086 FB                  775 	mov	r3,a
   0087 A3                  776 	inc	dptr
   0088 E0                  777 	movx	a,@dptr
   0089 FC                  778 	mov	r4,a
                            779 ;	genIfx
   008A EA                  780 	mov	a,r2
   008B 4B                  781 	orl	a,r3
   008C 4C                  782 	orl	a,r4
                            783 ;	genIfxJump
   008D 60 03               784 	jz	00251$
   008F 02s02r24            785 	ljmp	00116$
   0092                     786 00251$:
                            787 ;	genAssign
   0092 90s19r6C            788 	mov	dptr,#_main_buffer1_1_1
   0095 E0                  789 	movx	a,@dptr
   0096 FA                  790 	mov	r2,a
   0097 A3                  791 	inc	dptr
   0098 E0                  792 	movx	a,@dptr
   0099 FB                  793 	mov	r3,a
   009A A3                  794 	inc	dptr
   009B E0                  795 	movx	a,@dptr
   009C FC                  796 	mov	r4,a
                            797 ;	genIfx
   009D EA                  798 	mov	a,r2
   009E 4B                  799 	orl	a,r3
   009F 4C                  800 	orl	a,r4
                            801 ;	genIfxJump
   00A0 60 03               802 	jz	00252$
   00A2 02s02r24            803 	ljmp	00116$
   00A5                     804 00252$:
                            805 ;	main1.c:71: label1:
   00A5                     806 00101$:
                            807 ;	main1.c:72: if(x2==0)//using x2 as a flag
                            808 ;	genAssign
   00A5 90s17r73            809 	mov	dptr,#_main_x2_1_1
   00A8 E0                  810 	movx	a,@dptr
   00A9 FA                  811 	mov	r2,a
   00AA A3                  812 	inc	dptr
   00AB E0                  813 	movx	a,@dptr
                            814 ;	genIfx
   00AC FB                  815 	mov	r3,a
                            816 ;	Peephole 135	removed redundant mov
   00AD 4A                  817 	orl	a,r2
                            818 ;	genIfxJump
                            819 ;	Peephole 108.b	removed ljmp by inverse jump logic
   00AE 70 11               820 	jnz	00103$
                            821 ;	Peephole 300	removed redundant label 00253$
                            822 ;	main1.c:74: printf_tiny("\r\nEnter the Buffer0 and Buffer1 size between 16 and 3200,divisible by 16:\n");
                            823 ;	genIpush
   00B0 74r00               824 	mov	a,#__str_0
   00B2 C0 E0               825 	push	acc
   00B4 74s00               826 	mov	a,#(__str_0 >> 8)
   00B6 C0 E0               827 	push	acc
                            828 ;	genCall
   00B8 12s00r00            829 	lcall	_printf_tiny
   00BB 15 81               830 	dec	sp
   00BD 15 81               831 	dec	sp
                            832 ;	Peephole 112.b	changed ljmp to sjmp
   00BF 80 31               833 	sjmp	00104$
   00C1                     834 00103$:
                            835 ;	main1.c:78: printf_tiny("\r\nSize Error! \n");
                            836 ;	genIpush
   00C1 74r4B               837 	mov	a,#__str_1
   00C3 C0 E0               838 	push	acc
   00C5 74s00               839 	mov	a,#(__str_1 >> 8)
   00C7 C0 E0               840 	push	acc
                            841 ;	genCall
   00C9 12s00r00            842 	lcall	_printf_tiny
   00CC 15 81               843 	dec	sp
   00CE 15 81               844 	dec	sp
                            845 ;	main1.c:79: x2=0;
                            846 ;	genAssign
   00D0 90s17r73            847 	mov	dptr,#_main_x2_1_1
   00D3 E4                  848 	clr	a
   00D4 F0                  849 	movx	@dptr,a
   00D5 A3                  850 	inc	dptr
   00D6 F0                  851 	movx	@dptr,a
                            852 ;	main1.c:80: printf_tiny("\r\nEnter the Buffer0 and Buffer1 size between 16 and 3200,divisible by 16 less than %d:\n",x1);
                            853 ;	genIpush
   00D7 90s17r71            854 	mov	dptr,#_main_x1_1_1
   00DA E0                  855 	movx	a,@dptr
   00DB C0 E0               856 	push	acc
   00DD A3                  857 	inc	dptr
   00DE E0                  858 	movx	a,@dptr
   00DF C0 E0               859 	push	acc
                            860 ;	genIpush
   00E1 74r5B               861 	mov	a,#__str_2
   00E3 C0 E0               862 	push	acc
   00E5 74s00               863 	mov	a,#(__str_2 >> 8)
   00E7 C0 E0               864 	push	acc
                            865 ;	genCall
   00E9 12s00r00            866 	lcall	_printf_tiny
   00EC E5 81               867 	mov	a,sp
   00EE 24 FC               868 	add	a,#0xfc
   00F0 F5 81               869 	mov	sp,a
   00F2                     870 00104$:
                            871 ;	main1.c:82: x1=get_num(); // get size of buffer from user
                            872 ;	genCall
   00F2 12s0ErB9            873 	lcall	_get_num
   00F5 AA 82               874 	mov	r2,dpl
   00F7 AB 83               875 	mov	r3,dph
                            876 ;	genAssign
   00F9 90s17r71            877 	mov	dptr,#_main_x1_1_1
   00FC EA                  878 	mov	a,r2
   00FD F0                  879 	movx	@dptr,a
   00FE A3                  880 	inc	dptr
   00FF EB                  881 	mov	a,r3
   0100 F0                  882 	movx	@dptr,a
                            883 ;	main1.c:84: if(((x1<16)||(x1>3200))&& ((x1%16)!=0) )//Check if size allocated is in between 16 and 3200 and divisible by 16.
                            884 ;	genAssign
   0101 8A 04               885 	mov	ar4,r2
   0103 8B 05               886 	mov	ar5,r3
                            887 ;	genCmpLt
                            888 ;	genCmp
   0105 C3                  889 	clr	c
   0106 EC                  890 	mov	a,r4
   0107 94 10               891 	subb	a,#0x10
   0109 ED                  892 	mov	a,r5
   010A 94 00               893 	subb	a,#0x00
                            894 ;	genIfxJump
                            895 ;	Peephole 112.b	changed ljmp to sjmp
                            896 ;	Peephole 160.a	removed sjmp by inverse jump logic
   010C 40 0D               897 	jc	00108$
                            898 ;	Peephole 300	removed redundant label 00254$
                            899 ;	genAssign
   010E 8A 04               900 	mov	ar4,r2
   0110 8B 05               901 	mov	ar5,r3
                            902 ;	genCmpGt
                            903 ;	genCmp
   0112 C3                  904 	clr	c
   0113 74 80               905 	mov	a,#0x80
   0115 9C                  906 	subb	a,r4
   0116 74 0C               907 	mov	a,#0x0C
   0118 9D                  908 	subb	a,r5
                            909 ;	genIfxJump
                            910 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0119 50 20               911 	jnc	00106$
                            912 ;	Peephole 300	removed redundant label 00255$
   011B                     913 00108$:
                            914 ;	genAnd
   011B 74 0F               915 	mov	a,#0x0F
   011D 5A                  916 	anl	a,r2
   011E FC                  917 	mov	r4,a
   011F 7D 00               918 	mov	r5,#0x00
                            919 ;	genCmpEq
                            920 ;	gencjneshort
   0121 BC 00 05            921 	cjne	r4,#0x00,00256$
   0124 BD 00 02            922 	cjne	r5,#0x00,00256$
                            923 ;	Peephole 112.b	changed ljmp to sjmp
   0127 80 12               924 	sjmp	00106$
   0129                     925 00256$:
                            926 ;	main1.c:86: printf_tiny("\r\Entered size out of range!\n");
                            927 ;	genIpush
   0129 74rB3               928 	mov	a,#__str_3
   012B C0 E0               929 	push	acc
   012D 74s00               930 	mov	a,#(__str_3 >> 8)
   012F C0 E0               931 	push	acc
                            932 ;	genCall
   0131 12s00r00            933 	lcall	_printf_tiny
   0134 15 81               934 	dec	sp
   0136 15 81               935 	dec	sp
                            936 ;	main1.c:87: goto label1;
   0138 02s00rA5            937 	ljmp	00101$
   013B                     938 00106$:
                            939 ;	main1.c:90: buffer0 = malloc(x1);
                            940 ;	genCall
   013B 8A 82               941 	mov	dpl,r2
   013D 8B 83               942 	mov	dph,r3
   013F C0 02               943 	push	ar2
   0141 C0 03               944 	push	ar3
   0143 12s00r00            945 	lcall	_malloc
   0146 AC 82               946 	mov	r4,dpl
   0148 AD 83               947 	mov	r5,dph
   014A D0 03               948 	pop	ar3
   014C D0 02               949 	pop	ar2
                            950 ;	genCast
   014E 7E 00               951 	mov	r6,#0x0
                            952 ;	genAssign
   0150 90s19r69            953 	mov	dptr,#_main_buffer0_1_1
   0153 EC                  954 	mov	a,r4
   0154 F0                  955 	movx	@dptr,a
   0155 A3                  956 	inc	dptr
   0156 ED                  957 	mov	a,r5
   0157 F0                  958 	movx	@dptr,a
   0158 A3                  959 	inc	dptr
   0159 EE                  960 	mov	a,r6
   015A F0                  961 	movx	@dptr,a
                            962 ;	main1.c:91: buffer1 = malloc(x1);
                            963 ;	genCall
   015B 8A 82               964 	mov	dpl,r2
   015D 8B 83               965 	mov	dph,r3
   015F C0 02               966 	push	ar2
   0161 C0 03               967 	push	ar3
   0163 C0 04               968 	push	ar4
   0165 C0 05               969 	push	ar5
   0167 C0 06               970 	push	ar6
   0169 12s00r00            971 	lcall	_malloc
   016C AF 82               972 	mov	r7,dpl
   016E A8 83               973 	mov	r0,dph
   0170 D0 06               974 	pop	ar6
   0172 D0 05               975 	pop	ar5
   0174 D0 04               976 	pop	ar4
   0176 D0 03               977 	pop	ar3
   0178 D0 02               978 	pop	ar2
                            979 ;	genCast
   017A 79 00               980 	mov	r1,#0x0
                            981 ;	genAssign
   017C 90s19r6C            982 	mov	dptr,#_main_buffer1_1_1
   017F EF                  983 	mov	a,r7
   0180 F0                  984 	movx	@dptr,a
   0181 A3                  985 	inc	dptr
   0182 E8                  986 	mov	a,r0
   0183 F0                  987 	movx	@dptr,a
   0184 A3                  988 	inc	dptr
   0185 E9                  989 	mov	a,r1
   0186 F0                  990 	movx	@dptr,a
                            991 ;	main1.c:93: if (((buffer0)!= 0)&&((buffer1)!= 0)) // if both buffer 0 and buffer 1 are not NULL i.e  allocated
                            992 ;	genCmpEq
                            993 ;	gencjneshort
   0187 BC 00 08            994 	cjne	r4,#0x00,00257$
   018A BD 00 05            995 	cjne	r5,#0x00,00257$
   018D BE 00 02            996 	cjne	r6,#0x00,00257$
                            997 ;	Peephole 112.b	changed ljmp to sjmp
   0190 80 4C               998 	sjmp	00110$
   0192                     999 00257$:
                           1000 ;	genCmpEq
                           1001 ;	gencjneshort
   0192 BF 00 08           1002 	cjne	r7,#0x00,00258$
   0195 B8 00 05           1003 	cjne	r0,#0x00,00258$
   0198 B9 00 02           1004 	cjne	r1,#0x00,00258$
                           1005 ;	Peephole 112.b	changed ljmp to sjmp
   019B 80 41              1006 	sjmp	00110$
   019D                    1007 00258$:
                           1008 ;	main1.c:95: printf_tiny("\r\n Buffer 0 Allocated!");
                           1009 ;	genIpush
   019D C0 02              1010 	push	ar2
   019F C0 03              1011 	push	ar3
   01A1 74rD0              1012 	mov	a,#__str_4
   01A3 C0 E0              1013 	push	acc
   01A5 74s00              1014 	mov	a,#(__str_4 >> 8)
   01A7 C0 E0              1015 	push	acc
                           1016 ;	genCall
   01A9 12s00r00           1017 	lcall	_printf_tiny
   01AC 15 81              1018 	dec	sp
   01AE 15 81              1019 	dec	sp
   01B0 D0 03              1020 	pop	ar3
   01B2 D0 02              1021 	pop	ar2
                           1022 ;	main1.c:96: printf_tiny("\r\n Buffer 1 Allocated!");
                           1023 ;	genIpush
   01B4 C0 02              1024 	push	ar2
   01B6 C0 03              1025 	push	ar3
   01B8 74rE7              1026 	mov	a,#__str_5
   01BA C0 E0              1027 	push	acc
   01BC 74s00              1028 	mov	a,#(__str_5 >> 8)
   01BE C0 E0              1029 	push	acc
                           1030 ;	genCall
   01C0 12s00r00           1031 	lcall	_printf_tiny
   01C3 15 81              1032 	dec	sp
   01C5 15 81              1033 	dec	sp
   01C7 D0 03              1034 	pop	ar3
   01C9 D0 02              1035 	pop	ar2
                           1036 ;	main1.c:97: buffsize[0]=x1;//size of buffer 0 in size array
                           1037 ;	genPointerSet
                           1038 ;     genFarPointerSet
   01CB 90s17r75           1039 	mov	dptr,#_main_buffsize_1_1
   01CE EA                 1040 	mov	a,r2
   01CF F0                 1041 	movx	@dptr,a
   01D0 A3                 1042 	inc	dptr
   01D1 EB                 1043 	mov	a,r3
   01D2 F0                 1044 	movx	@dptr,a
                           1045 ;	main1.c:98: buffsize[1]=x1;//size of buufer 1 in size array
                           1046 ;	genPointerSet
                           1047 ;     genFarPointerSet
   01D3 90s17r77           1048 	mov	dptr,#(_main_buffsize_1_1 + 0x0002)
   01D6 EA                 1049 	mov	a,r2
   01D7 F0                 1050 	movx	@dptr,a
   01D8 A3                 1051 	inc	dptr
   01D9 EB                 1052 	mov	a,r3
   01DA F0                 1053 	movx	@dptr,a
   01DB 02s00r7F           1054 	ljmp	00114$
   01DE                    1055 00110$:
                           1056 ;	main1.c:102: x2=1; // if buffers are not allocated set flag x2 to 1
                           1057 ;	genAssign
   01DE 90s17r73           1058 	mov	dptr,#_main_x2_1_1
   01E1 74 01              1059 	mov	a,#0x01
   01E3 F0                 1060 	movx	@dptr,a
   01E4 E4                 1061 	clr	a
   01E5 A3                 1062 	inc	dptr
   01E6 F0                 1063 	movx	@dptr,a
                           1064 ;	main1.c:103: free(buffer0);
                           1065 ;	genAssign
   01E7 90s19r69           1066 	mov	dptr,#_main_buffer0_1_1
   01EA E0                 1067 	movx	a,@dptr
   01EB FA                 1068 	mov	r2,a
   01EC A3                 1069 	inc	dptr
   01ED E0                 1070 	movx	a,@dptr
   01EE FB                 1071 	mov	r3,a
   01EF A3                 1072 	inc	dptr
   01F0 E0                 1073 	movx	a,@dptr
   01F1 FC                 1074 	mov	r4,a
                           1075 ;	genCall
   01F2 8A 82              1076 	mov	dpl,r2
   01F4 8B 83              1077 	mov	dph,r3
   01F6 8C F0              1078 	mov	b,r4
   01F8 12s00r00           1079 	lcall	_free
                           1080 ;	main1.c:104: free(buffer1);
                           1081 ;	genAssign
   01FB 90s19r6C           1082 	mov	dptr,#_main_buffer1_1_1
   01FE E0                 1083 	movx	a,@dptr
   01FF FA                 1084 	mov	r2,a
   0200 A3                 1085 	inc	dptr
   0201 E0                 1086 	movx	a,@dptr
   0202 FB                 1087 	mov	r3,a
   0203 A3                 1088 	inc	dptr
   0204 E0                 1089 	movx	a,@dptr
   0205 FC                 1090 	mov	r4,a
                           1091 ;	genCall
   0206 8A 82              1092 	mov	dpl,r2
   0208 8B 83              1093 	mov	dph,r3
   020A 8C F0              1094 	mov	b,r4
   020C 12s00r00           1095 	lcall	_free
                           1096 ;	main1.c:105: buffer0=0;
                           1097 ;	genAssign
   020F 90s19r69           1098 	mov	dptr,#_main_buffer0_1_1
   0212 E4                 1099 	clr	a
   0213 F0                 1100 	movx	@dptr,a
   0214 A3                 1101 	inc	dptr
   0215 F0                 1102 	movx	@dptr,a
   0216 A3                 1103 	inc	dptr
   0217 F0                 1104 	movx	@dptr,a
                           1105 ;	main1.c:106: buffer1=0;
                           1106 ;	genAssign
   0218 90s19r6C           1107 	mov	dptr,#_main_buffer1_1_1
   021B E4                 1108 	clr	a
   021C F0                 1109 	movx	@dptr,a
   021D A3                 1110 	inc	dptr
   021E F0                 1111 	movx	@dptr,a
   021F A3                 1112 	inc	dptr
   0220 F0                 1113 	movx	@dptr,a
   0221 02s00r7F           1114 	ljmp	00114$
   0224                    1115 00116$:
                           1116 ;	main1.c:111: buffAddress[0]=buffer0;
                           1117 ;	genAssign
   0224 90s19r69           1118 	mov	dptr,#_main_buffer0_1_1
   0227 E0                 1119 	movx	a,@dptr
   0228 FA                 1120 	mov	r2,a
   0229 A3                 1121 	inc	dptr
   022A E0                 1122 	movx	a,@dptr
   022B FB                 1123 	mov	r3,a
   022C A3                 1124 	inc	dptr
   022D E0                 1125 	movx	a,@dptr
   022E FC                 1126 	mov	r4,a
                           1127 ;	genPointerSet
                           1128 ;     genFarPointerSet
   022F 90s18r3D           1129 	mov	dptr,#_main_buffAddress_1_1
   0232 EA                 1130 	mov	a,r2
   0233 F0                 1131 	movx	@dptr,a
   0234 A3                 1132 	inc	dptr
   0235 EB                 1133 	mov	a,r3
   0236 F0                 1134 	movx	@dptr,a
   0237 A3                 1135 	inc	dptr
   0238 EC                 1136 	mov	a,r4
   0239 F0                 1137 	movx	@dptr,a
                           1138 ;	main1.c:112: buffAddress[1]=buffer1;
                           1139 ;	genAssign
   023A 90s19r6C           1140 	mov	dptr,#_main_buffer1_1_1
   023D E0                 1141 	movx	a,@dptr
   023E FD                 1142 	mov	r5,a
   023F A3                 1143 	inc	dptr
   0240 E0                 1144 	movx	a,@dptr
   0241 FE                 1145 	mov	r6,a
   0242 A3                 1146 	inc	dptr
   0243 E0                 1147 	movx	a,@dptr
   0244 FF                 1148 	mov	r7,a
                           1149 ;	genPointerSet
                           1150 ;     genFarPointerSet
   0245 90s18r40           1151 	mov	dptr,#(_main_buffAddress_1_1 + 0x0003)
   0248 ED                 1152 	mov	a,r5
   0249 F0                 1153 	movx	@dptr,a
   024A A3                 1154 	inc	dptr
   024B EE                 1155 	mov	a,r6
   024C F0                 1156 	movx	@dptr,a
   024D A3                 1157 	inc	dptr
   024E EF                 1158 	mov	a,r7
   024F F0                 1159 	movx	@dptr,a
                           1160 ;	main1.c:113: buffsize[0]=x1;
                           1161 ;	genAssign
   0250 90s17r71           1162 	mov	dptr,#_main_x1_1_1
   0253 E0                 1163 	movx	a,@dptr
   0254 FD                 1164 	mov	r5,a
   0255 A3                 1165 	inc	dptr
   0256 E0                 1166 	movx	a,@dptr
   0257 FE                 1167 	mov	r6,a
                           1168 ;	genPointerSet
                           1169 ;     genFarPointerSet
   0258 90s17r75           1170 	mov	dptr,#_main_buffsize_1_1
   025B ED                 1171 	mov	a,r5
   025C F0                 1172 	movx	@dptr,a
   025D A3                 1173 	inc	dptr
   025E EE                 1174 	mov	a,r6
   025F F0                 1175 	movx	@dptr,a
                           1176 ;	main1.c:114: buffsize[1]=x1;
                           1177 ;	genPointerSet
                           1178 ;     genFarPointerSet
   0260 90s17r77           1179 	mov	dptr,#(_main_buffsize_1_1 + 0x0002)
   0263 ED                 1180 	mov	a,r5
   0264 F0                 1181 	movx	@dptr,a
   0265 A3                 1182 	inc	dptr
   0266 EE                 1183 	mov	a,r6
   0267 F0                 1184 	movx	@dptr,a
                           1185 ;	main1.c:115: buffCnt=buffCnt+2;//count of the number of bufffers
                           1186 ;	genAssign
   0268 90s19r6F           1187 	mov	dptr,#_main_buffCnt_1_1
   026B E0                 1188 	movx	a,@dptr
   026C FD                 1189 	mov	r5,a
   026D A3                 1190 	inc	dptr
   026E E0                 1191 	movx	a,@dptr
   026F FE                 1192 	mov	r6,a
                           1193 ;	genPlus
   0270 90s19r6F           1194 	mov	dptr,#_main_buffCnt_1_1
                           1195 ;     genPlusIncr
   0273 74 02              1196 	mov	a,#0x02
                           1197 ;	Peephole 236.a	used r5 instead of ar5
   0275 2D                 1198 	add	a,r5
   0276 F0                 1199 	movx	@dptr,a
                           1200 ;	Peephole 181	changed mov to clr
   0277 E4                 1201 	clr	a
                           1202 ;	Peephole 236.b	used r6 instead of ar6
   0278 3E                 1203 	addc	a,r6
   0279 A3                 1204 	inc	dptr
   027A F0                 1205 	movx	@dptr,a
                           1206 ;	main1.c:117: printf_tiny("\n\raddress of b0 = 0x%x",(uint16_t)buffAddress[0]); // printing address of buffer 0
                           1207 ;	genCast
   027B 8A 05              1208 	mov	ar5,r2
   027D 8B 06              1209 	mov	ar6,r3
                           1210 ;	genIpush
   027F C0 02              1211 	push	ar2
   0281 C0 03              1212 	push	ar3
   0283 C0 04              1213 	push	ar4
   0285 C0 05              1214 	push	ar5
   0287 C0 06              1215 	push	ar6
                           1216 ;	genIpush
   0289 74rFE              1217 	mov	a,#__str_6
   028B C0 E0              1218 	push	acc
   028D 74s00              1219 	mov	a,#(__str_6 >> 8)
   028F C0 E0              1220 	push	acc
                           1221 ;	genCall
   0291 12s00r00           1222 	lcall	_printf_tiny
   0294 E5 81              1223 	mov	a,sp
   0296 24 FC              1224 	add	a,#0xfc
   0298 F5 81              1225 	mov	sp,a
   029A D0 04              1226 	pop	ar4
   029C D0 03              1227 	pop	ar3
   029E D0 02              1228 	pop	ar2
                           1229 ;	main1.c:118: printf_tiny("\n\raddress of b1 = 0x%x",(uint16_t)buffAddress[1]);// printing address of buffer 1
                           1230 ;	genPointerGet
                           1231 ;	genFarPointerGet
   02A0 90s18r40           1232 	mov	dptr,#(_main_buffAddress_1_1 + 0x0003)
   02A3 E0                 1233 	movx	a,@dptr
   02A4 FD                 1234 	mov	r5,a
   02A5 A3                 1235 	inc	dptr
   02A6 E0                 1236 	movx	a,@dptr
   02A7 FE                 1237 	mov	r6,a
   02A8 A3                 1238 	inc	dptr
   02A9 E0                 1239 	movx	a,@dptr
   02AA FF                 1240 	mov	r7,a
                           1241 ;	genCast
                           1242 ;	genIpush
   02AB C0 02              1243 	push	ar2
   02AD C0 03              1244 	push	ar3
   02AF C0 04              1245 	push	ar4
   02B1 C0 05              1246 	push	ar5
   02B3 C0 06              1247 	push	ar6
                           1248 ;	genIpush
   02B5 74r15              1249 	mov	a,#__str_7
   02B7 C0 E0              1250 	push	acc
   02B9 74s01              1251 	mov	a,#(__str_7 >> 8)
   02BB C0 E0              1252 	push	acc
                           1253 ;	genCall
   02BD 12s00r00           1254 	lcall	_printf_tiny
   02C0 E5 81              1255 	mov	a,sp
   02C2 24 FC              1256 	add	a,#0xfc
   02C4 F5 81              1257 	mov	sp,a
   02C6 D0 04              1258 	pop	ar4
   02C8 D0 03              1259 	pop	ar3
   02CA D0 02              1260 	pop	ar2
                           1261 ;	main1.c:119: while(start == 0)
                           1262 ;	genAssign
   02CC 8A*06              1263 	mov	_main_sloc2_1_0,r2
   02CE 8B*07              1264 	mov	(_main_sloc2_1_0 + 1),r3
   02D0 8C*08              1265 	mov	(_main_sloc2_1_0 + 2),r4
                           1266 ;	genAssign
   02D2 8A*00              1267 	mov	_main_sloc0_1_0,r2
   02D4 8B*01              1268 	mov	(_main_sloc0_1_0 + 1),r3
   02D6 8C*02              1269 	mov	(_main_sloc0_1_0 + 2),r4
                           1270 ;	genAssign
   02D8 8A*03              1271 	mov	_main_sloc1_1_0,r2
   02DA 8B*04              1272 	mov	(_main_sloc1_1_0 + 1),r3
   02DC 8C*05              1273 	mov	(_main_sloc1_1_0 + 2),r4
                           1274 ;	genAssign
   02DE 8A*11              1275 	mov	_main_sloc6_1_0,r2
   02E0 8B*12              1276 	mov	(_main_sloc6_1_0 + 1),r3
   02E2 8C*13              1277 	mov	(_main_sloc6_1_0 + 2),r4
                           1278 ;	genAssign
   02E4 90s19r71           1279 	mov	dptr,#_main_Numchar_1_1
   02E7 E0                 1280 	movx	a,@dptr
   02E8 F8                 1281 	mov	r0,a
   02E9 A3                 1282 	inc	dptr
   02EA E0                 1283 	movx	a,@dptr
   02EB F9                 1284 	mov	r1,a
   02EC                    1285 00192$:
                           1286 ;	genAssign
   02EC 90s19r73           1287 	mov	dptr,#_main_start_1_1
   02EF E0                 1288 	movx	a,@dptr
                           1289 ;	genIfx
   02F0 FD                 1290 	mov	r5,a
                           1291 ;	Peephole 105	removed redundant mov
                           1292 ;	genIfxJump
   02F1 60 01              1293 	jz	00259$
                           1294 ;	Peephole 251.a	replaced ljmp to ret with ret
   02F3 22                 1295 	ret
   02F4                    1296 00259$:
                           1297 ;	main1.c:123: printf_tiny("\r\nEnter a character: ");
                           1298 ;	genIpush
   02F4 C0 00              1299 	push	ar0
   02F6 C0 01              1300 	push	ar1
   02F8 74r2C              1301 	mov	a,#__str_8
   02FA C0 E0              1302 	push	acc
   02FC 74s01              1303 	mov	a,#(__str_8 >> 8)
   02FE C0 E0              1304 	push	acc
                           1305 ;	genCall
   0300 12s00r00           1306 	lcall	_printf_tiny
   0303 15 81              1307 	dec	sp
   0305 15 81              1308 	dec	sp
   0307 D0 01              1309 	pop	ar1
   0309 D0 00              1310 	pop	ar0
                           1311 ;	main1.c:124: c=getchar();//storing the characters entered by user in variable c
                           1312 ;	genCall
   030B C0 00              1313 	push	ar0
   030D C0 01              1314 	push	ar1
   030F 12s0ErAF           1315 	lcall	_getchar
   0312 AD 82              1316 	mov	r5,dpl
   0314 D0 01              1317 	pop	ar1
   0316 D0 00              1318 	pop	ar0
                           1319 ;	main1.c:125: Numchar++; //storing number of characters
                           1320 ;	genPlus
                           1321 ;     genPlusIncr
   0318 08                 1322 	inc	r0
   0319 B8 00 01           1323 	cjne	r0,#0x00,00260$
   031C 09                 1324 	inc	r1
   031D                    1325 00260$:
                           1326 ;	genAssign
   031D 90s19r71           1327 	mov	dptr,#_main_Numchar_1_1
   0320 E8                 1328 	mov	a,r0
   0321 F0                 1329 	movx	@dptr,a
   0322 A3                 1330 	inc	dptr
   0323 E9                 1331 	mov	a,r1
   0324 F0                 1332 	movx	@dptr,a
                           1333 ;	main1.c:127: if ((c >= 'a')&&(c <= 'z'))//for lower case from a to z
                           1334 ;	genAssign
   0325 8D 06              1335 	mov	ar6,r5
                           1336 ;	genCmpLt
                           1337 ;	genCmp
   0327 BE 61 00           1338 	cjne	r6,#0x61,00261$
   032A                    1339 00261$:
                           1340 ;	genIfxJump
   032A 50 03              1341 	jnc	00262$
   032C 02s03rC3           1342 	ljmp	00189$
   032F                    1343 00262$:
                           1344 ;	genAssign
   032F 8D 06              1345 	mov	ar6,r5
                           1346 ;	genCmpGt
                           1347 ;	genCmp
                           1348 ;	genIfxJump
                           1349 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0331 EE                 1350 	mov	a,r6
   0332 24 85              1351 	add	a,#0xff - 0x7A
   0334 50 03              1352 	jnc	00263$
   0336 02s03rC3           1353 	ljmp	00189$
   0339                    1354 00263$:
                           1355 ;	main1.c:130: if (b0chr<buffsize[0]) //bchr is counter for number of characters in buffer 0 and if it is less than size of buffer 0 then enter loop
                           1356 ;	genPointerGet
                           1357 ;	genFarPointerGet
   0339 90s17r75           1358 	mov	dptr,#_main_buffsize_1_1
   033C E0                 1359 	movx	a,@dptr
   033D FE                 1360 	mov	r6,a
   033E A3                 1361 	inc	dptr
   033F E0                 1362 	movx	a,@dptr
   0340 FF                 1363 	mov	r7,a
                           1364 ;	genAssign
   0341 90s19r74           1365 	mov	dptr,#_main_b0chr_1_1
   0344 E0                 1366 	movx	a,@dptr
   0345 FA                 1367 	mov	r2,a
   0346 A3                 1368 	inc	dptr
   0347 E0                 1369 	movx	a,@dptr
   0348 FB                 1370 	mov	r3,a
                           1371 ;	genCmpLt
                           1372 ;	genCmp
   0349 C3                 1373 	clr	c
   034A EA                 1374 	mov	a,r2
   034B 9E                 1375 	subb	a,r6
   034C EB                 1376 	mov	a,r3
   034D 9F                 1377 	subb	a,r7
                           1378 ;	genIfxJump
                           1379 ;	Peephole 108.a	removed ljmp by inverse jump logic
   034E 50 59              1380 	jnc	00118$
                           1381 ;	Peephole 300	removed redundant label 00264$
                           1382 ;	main1.c:131: {   *(buffer0+b0chr) = c;
                           1383 ;	genIpush
   0350 C0 00              1384 	push	ar0
   0352 C0 01              1385 	push	ar1
                           1386 ;	genLeftShift
                           1387 ;	genLeftShiftLiteral
                           1388 ;	genlshTwo
   0354 8A 06              1389 	mov	ar6,r2
   0356 EB                 1390 	mov	a,r3
   0357 CE                 1391 	xch	a,r6
   0358 25 E0              1392 	add	a,acc
   035A CE                 1393 	xch	a,r6
   035B 33                 1394 	rlc	a
   035C FF                 1395 	mov	r7,a
                           1396 ;	genPlus
                           1397 ;	Peephole 236.g	used r6 instead of ar6
   035D EE                 1398 	mov	a,r6
   035E 25*06              1399 	add	a,_main_sloc2_1_0
   0360 F5*0B              1400 	mov	_main_sloc4_1_0,a
                           1401 ;	Peephole 236.g	used r7 instead of ar7
   0362 EF                 1402 	mov	a,r7
   0363 35*07              1403 	addc	a,(_main_sloc2_1_0 + 1)
   0365 F5*0C              1404 	mov	(_main_sloc4_1_0 + 1),a
   0367 85*08*0D           1405 	mov	(_main_sloc4_1_0 + 2),(_main_sloc2_1_0 + 2)
                           1406 ;	genAssign
   036A 8D 01              1407 	mov	ar1,r5
                           1408 ;	genCast
   036C 7E 00              1409 	mov	r6,#0x00
                           1410 ;	genPointerSet
                           1411 ;	genGenPointerSet
   036E 85*0B 82           1412 	mov	dpl,_main_sloc4_1_0
   0371 85*0C 83           1413 	mov	dph,(_main_sloc4_1_0 + 1)
   0374 85*0D F0           1414 	mov	b,(_main_sloc4_1_0 + 2)
   0377 E9                 1415 	mov	a,r1
   0378 12s00r00           1416 	lcall	__gptrput
   037B A3                 1417 	inc	dptr
   037C EE                 1418 	mov	a,r6
   037D 12s00r00           1419 	lcall	__gptrput
                           1420 ;	main1.c:132: b0chr++;
                           1421 ;	genPlus
   0380 90s19r74           1422 	mov	dptr,#_main_b0chr_1_1
                           1423 ;     genPlusIncr
   0383 74 01              1424 	mov	a,#0x01
                           1425 ;	Peephole 236.a	used r2 instead of ar2
   0385 2A                 1426 	add	a,r2
   0386 F0                 1427 	movx	@dptr,a
                           1428 ;	Peephole 181	changed mov to clr
   0387 E4                 1429 	clr	a
                           1430 ;	Peephole 236.b	used r3 instead of ar3
   0388 3B                 1431 	addc	a,r3
   0389 A3                 1432 	inc	dptr
   038A F0                 1433 	movx	@dptr,a
                           1434 ;	main1.c:133: printf_tiny("\nstoring charcters in  buffer '0'");
                           1435 ;	genIpush
   038B C0 00              1436 	push	ar0
   038D C0 01              1437 	push	ar1
   038F 74r42              1438 	mov	a,#__str_9
   0391 C0 E0              1439 	push	acc
   0393 74s01              1440 	mov	a,#(__str_9 >> 8)
   0395 C0 E0              1441 	push	acc
                           1442 ;	genCall
   0397 12s00r00           1443 	lcall	_printf_tiny
   039A 15 81              1444 	dec	sp
   039C 15 81              1445 	dec	sp
   039E D0 01              1446 	pop	ar1
   03A0 D0 00              1447 	pop	ar0
                           1448 ;	genIpop
   03A2 D0 01              1449 	pop	ar1
   03A4 D0 00              1450 	pop	ar0
   03A6 02s02rEC           1451 	ljmp	00192$
   03A9                    1452 00118$:
                           1453 ;	main1.c:136: printf_tiny("\tBuffer '0' Full!");
                           1454 ;	genIpush
   03A9 C0 00              1455 	push	ar0
   03AB C0 01              1456 	push	ar1
   03AD 74r64              1457 	mov	a,#__str_10
   03AF C0 E0              1458 	push	acc
   03B1 74s01              1459 	mov	a,#(__str_10 >> 8)
   03B3 C0 E0              1460 	push	acc
                           1461 ;	genCall
   03B5 12s00r00           1462 	lcall	_printf_tiny
   03B8 15 81              1463 	dec	sp
   03BA 15 81              1464 	dec	sp
   03BC D0 01              1465 	pop	ar1
   03BE D0 00              1466 	pop	ar0
   03C0 02s02rEC           1467 	ljmp	00192$
   03C3                    1468 00189$:
                           1469 ;	main1.c:140: else if(c=='+')// if character entered is +
                           1470 ;	genCmpEq
                           1471 ;	gencjneshort
   03C3 BD 2B 02           1472 	cjne	r5,#0x2B,00265$
   03C6 80 03              1473 	sjmp	00266$
   03C8                    1474 00265$:
   03C8 02s05rA2           1475 	ljmp	00186$
   03CB                    1476 00266$:
                           1477 ;	main1.c:143: DEBUGPORT(2)
                           1478 ;	genCall
   03CB 75 82 02           1479 	mov	dpl,#0x02
   03CE C0 00              1480 	push	ar0
   03D0 C0 01              1481 	push	ar1
   03D2 12s00r0F           1482 	lcall	_dataout
   03D5 D0 01              1483 	pop	ar1
   03D7 D0 00              1484 	pop	ar0
                           1485 ;	main1.c:146: printf_tiny("\r-----------------------------------------------------------------------------\n");
                           1486 ;	genIpush
   03D9 C0 00              1487 	push	ar0
   03DB C0 01              1488 	push	ar1
   03DD 74r76              1489 	mov	a,#__str_11
   03DF C0 E0              1490 	push	acc
   03E1 74s01              1491 	mov	a,#(__str_11 >> 8)
   03E3 C0 E0              1492 	push	acc
                           1493 ;	genCall
   03E5 12s00r00           1494 	lcall	_printf_tiny
   03E8 15 81              1495 	dec	sp
   03EA 15 81              1496 	dec	sp
   03EC D0 01              1497 	pop	ar1
   03EE D0 00              1498 	pop	ar0
                           1499 ;	main1.c:147: printf_tiny("\r\t\t\tAdding the Buffers                                                             ");
                           1500 ;	genIpush
   03F0 C0 00              1501 	push	ar0
   03F2 C0 01              1502 	push	ar1
   03F4 74rC6              1503 	mov	a,#__str_12
   03F6 C0 E0              1504 	push	acc
   03F8 74s01              1505 	mov	a,#(__str_12 >> 8)
   03FA C0 E0              1506 	push	acc
                           1507 ;	genCall
   03FC 12s00r00           1508 	lcall	_printf_tiny
   03FF 15 81              1509 	dec	sp
   0401 15 81              1510 	dec	sp
   0403 D0 01              1511 	pop	ar1
   0405 D0 00              1512 	pop	ar0
                           1513 ;	main1.c:148: printf_tiny("\n\r----------------------------------------------------------------------------\n");
                           1514 ;	genIpush
   0407 C0 00              1515 	push	ar0
   0409 C0 01              1516 	push	ar1
   040B 74r1A              1517 	mov	a,#__str_13
   040D C0 E0              1518 	push	acc
   040F 74s02              1519 	mov	a,#(__str_13 >> 8)
   0411 C0 E0              1520 	push	acc
                           1521 ;	genCall
   0413 12s00r00           1522 	lcall	_printf_tiny
   0416 15 81              1523 	dec	sp
   0418 15 81              1524 	dec	sp
   041A D0 01              1525 	pop	ar1
   041C D0 00              1526 	pop	ar0
                           1527 ;	main1.c:150: x2=0;
                           1528 ;	genAssign
   041E 90s17r73           1529 	mov	dptr,#_main_x2_1_1
   0421 E4                 1530 	clr	a
   0422 F0                 1531 	movx	@dptr,a
   0423 A3                 1532 	inc	dptr
   0424 F0                 1533 	movx	@dptr,a
                           1534 ;	main1.c:151: label2:
   0425                    1535 00120$:
                           1536 ;	main1.c:152: if(x2==0)
                           1537 ;	genAssign
   0425 90s17r73           1538 	mov	dptr,#_main_x2_1_1
   0428 E0                 1539 	movx	a,@dptr
   0429 FE                 1540 	mov	r6,a
   042A A3                 1541 	inc	dptr
   042B E0                 1542 	movx	a,@dptr
                           1543 ;	genIfx
   042C FF                 1544 	mov	r7,a
                           1545 ;	Peephole 135	removed redundant mov
   042D 4E                 1546 	orl	a,r6
                           1547 ;	genIfxJump
                           1548 ;	Peephole 108.b	removed ljmp by inverse jump logic
   042E 70 19              1549 	jnz	00122$
                           1550 ;	Peephole 300	removed redundant label 00267$
                           1551 ;	main1.c:154: printf_tiny("\r\n Enter buffer size between 30 and 300:\  n"); //taking buffer size from user
                           1552 ;	genIpush
   0430 C0 00              1553 	push	ar0
   0432 C0 01              1554 	push	ar1
   0434 74r6A              1555 	mov	a,#__str_14
   0436 C0 E0              1556 	push	acc
   0438 74s02              1557 	mov	a,#(__str_14 >> 8)
   043A C0 E0              1558 	push	acc
                           1559 ;	genCall
   043C 12s00r00           1560 	lcall	_printf_tiny
   043F 15 81              1561 	dec	sp
   0441 15 81              1562 	dec	sp
   0443 D0 01              1563 	pop	ar1
   0445 D0 00              1564 	pop	ar0
                           1565 ;	Peephole 112.b	changed ljmp to sjmp
   0447 80 35              1566 	sjmp	00123$
   0449                    1567 00122$:
                           1568 ;	main1.c:158: printf_tiny("\r\nSize error , enter a size within the range \ n");
                           1569 ;	genIpush
   0449 C0 00              1570 	push	ar0
   044B C0 01              1571 	push	ar1
   044D 74r96              1572 	mov	a,#__str_15
   044F C0 E0              1573 	push	acc
   0451 74s02              1574 	mov	a,#(__str_15 >> 8)
   0453 C0 E0              1575 	push	acc
                           1576 ;	genCall
   0455 12s00r00           1577 	lcall	_printf_tiny
   0458 15 81              1578 	dec	sp
   045A 15 81              1579 	dec	sp
   045C D0 01              1580 	pop	ar1
   045E D0 00              1581 	pop	ar0
                           1582 ;	main1.c:159: x2=0; // if size error then display message and reset flag
                           1583 ;	genAssign
   0460 90s17r73           1584 	mov	dptr,#_main_x2_1_1
   0463 E4                 1585 	clr	a
   0464 F0                 1586 	movx	@dptr,a
   0465 A3                 1587 	inc	dptr
   0466 F0                 1588 	movx	@dptr,a
                           1589 ;	main1.c:160: printf_tiny("\r\nEnter a buffer size between 30 and 300\n");
                           1590 ;	genIpush
   0467 C0 00              1591 	push	ar0
   0469 C0 01              1592 	push	ar1
   046B 74rC6              1593 	mov	a,#__str_16
   046D C0 E0              1594 	push	acc
   046F 74s02              1595 	mov	a,#(__str_16 >> 8)
   0471 C0 E0              1596 	push	acc
                           1597 ;	genCall
   0473 12s00r00           1598 	lcall	_printf_tiny
   0476 15 81              1599 	dec	sp
   0478 15 81              1600 	dec	sp
   047A D0 01              1601 	pop	ar1
   047C D0 00              1602 	pop	ar0
   047E                    1603 00123$:
                           1604 ;	main1.c:163: x3=get_num();//storing size in x3
                           1605 ;	genIpush
   047E C0 00              1606 	push	ar0
   0480 C0 01              1607 	push	ar1
                           1608 ;	genCall
   0482 C0 00              1609 	push	ar0
   0484 C0 01              1610 	push	ar1
   0486 12s0ErB9           1611 	lcall	_get_num
   0489 AE 82              1612 	mov	r6,dpl
   048B AF 83              1613 	mov	r7,dph
   048D D0 01              1614 	pop	ar1
   048F D0 00              1615 	pop	ar0
                           1616 ;	main1.c:166: if ((x3>29) && (x3<=300))//checking if size is within the range
                           1617 ;	genAssign
   0491 8E 00              1618 	mov	ar0,r6
   0493 8F 01              1619 	mov	ar1,r7
                           1620 ;	genCmpGt
                           1621 ;	genCmp
   0495 C3                 1622 	clr	c
   0496 74 1D              1623 	mov	a,#0x1D
   0498 98                 1624 	subb	a,r0
                           1625 ;	Peephole 181	changed mov to clr
   0499 E4                 1626 	clr	a
   049A 99                 1627 	subb	a,r1
                           1628 ;	genIpop
                           1629 ;	genIfx
                           1630 ;	genIfxJump
                           1631 ;	Peephole 129.c	optimized condition
   049B D0 01              1632 	pop	ar1
   049D D0 00              1633 	pop	ar0
   049F 40 03              1634 	jc	00268$
   04A1 02s05r96           1635 	ljmp	00128$
   04A4                    1636 00268$:
                           1637 ;	genIpush
   04A4 C0 00              1638 	push	ar0
   04A6 C0 01              1639 	push	ar1
                           1640 ;	genAssign
   04A8 8E 00              1641 	mov	ar0,r6
   04AA 8F 01              1642 	mov	ar1,r7
                           1643 ;	genCmpGt
                           1644 ;	genCmp
   04AC C3                 1645 	clr	c
   04AD 74 2C              1646 	mov	a,#0x2C
   04AF 98                 1647 	subb	a,r0
   04B0 74 01              1648 	mov	a,#0x01
   04B2 99                 1649 	subb	a,r1
   04B3 E4                 1650 	clr	a
   04B4 33                 1651 	rlc	a
                           1652 ;	genIpop
   04B5 D0 01              1653 	pop	ar1
   04B7 D0 00              1654 	pop	ar0
                           1655 ;	genIfx
                           1656 ;	genIfxJump
   04B9 60 03              1657 	jz	00269$
   04BB 02s05r96           1658 	ljmp	00128$
   04BE                    1659 00269$:
                           1660 ;	main1.c:168: buffern = malloc(x3);//allocting a buffer of the given size
                           1661 ;	genIpush
   04BE C0 00              1662 	push	ar0
   04C0 C0 01              1663 	push	ar1
                           1664 ;	genCall
   04C2 8E 82              1665 	mov	dpl,r6
   04C4 8F 83              1666 	mov	dph,r7
   04C6 C0 06              1667 	push	ar6
   04C8 C0 07              1668 	push	ar7
   04CA 12s00r00           1669 	lcall	_malloc
   04CD A8 82              1670 	mov	r0,dpl
   04CF A9 83              1671 	mov	r1,dph
   04D1 D0 07              1672 	pop	ar7
   04D3 D0 06              1673 	pop	ar6
                           1674 ;	genCast
   04D5 88 02              1675 	mov	ar2,r0
   04D7 89 03              1676 	mov	ar3,r1
   04D9 7C 00              1677 	mov	r4,#0x0
                           1678 ;	main1.c:169: if (buffern != 0)  //check if buffer is not null i.e it has been allocated
                           1679 ;	genCmpEq
                           1680 ;	gencjne
                           1681 ;	gencjneshort
                           1682 ;	Peephole 241.b	optimized compare
   04DB E4                 1683 	clr	a
   04DC BA 00 07           1684 	cjne	r2,#0x00,00270$
   04DF BB 00 04           1685 	cjne	r3,#0x00,00270$
   04E2 BC 00 01           1686 	cjne	r4,#0x00,00270$
   04E5 04                 1687 	inc	a
   04E6                    1688 00270$:
                           1689 ;	Peephole 300	removed redundant label 00271$
                           1690 ;	genIpop
   04E6 D0 01              1691 	pop	ar1
   04E8 D0 00              1692 	pop	ar0
                           1693 ;	genIfx
                           1694 ;	genIfxJump
   04EA 60 03              1695 	jz	00272$
   04EC 02s05r7C           1696 	ljmp	00125$
   04EF                    1697 00272$:
                           1698 ;	main1.c:171: buffAddress[buffCnt]=buffern;//filling address array with adress of the new buffer
                           1699 ;	genIpush
   04EF C0 00              1700 	push	ar0
   04F1 C0 01              1701 	push	ar1
                           1702 ;	genAssign
   04F3 90s19r6F           1703 	mov	dptr,#_main_buffCnt_1_1
   04F6 E0                 1704 	movx	a,@dptr
   04F7 F5*09              1705 	mov	_main_sloc3_1_0,a
   04F9 A3                 1706 	inc	dptr
   04FA E0                 1707 	movx	a,@dptr
   04FB F5*0A              1708 	mov	(_main_sloc3_1_0 + 1),a
                           1709 ;	genAssign
   04FD 90s00r00           1710 	mov	dptr,#__mulint_PARM_2
   0500 74 03              1711 	mov	a,#0x03
   0502 F0                 1712 	movx	@dptr,a
   0503 E4                 1713 	clr	a
   0504 A3                 1714 	inc	dptr
   0505 F0                 1715 	movx	@dptr,a
                           1716 ;	genCall
   0506 85*09 82           1717 	mov	dpl,_main_sloc3_1_0
   0509 85*0A 83           1718 	mov	dph,(_main_sloc3_1_0 + 1)
   050C C0 02              1719 	push	ar2
   050E C0 03              1720 	push	ar3
   0510 C0 04              1721 	push	ar4
   0512 C0 06              1722 	push	ar6
   0514 C0 07              1723 	push	ar7
   0516 12s00r00           1724 	lcall	__mulint
   0519 A8 82              1725 	mov	r0,dpl
   051B A9 83              1726 	mov	r1,dph
   051D D0 07              1727 	pop	ar7
   051F D0 06              1728 	pop	ar6
   0521 D0 04              1729 	pop	ar4
   0523 D0 03              1730 	pop	ar3
   0525 D0 02              1731 	pop	ar2
                           1732 ;	genPlus
                           1733 ;	Peephole 236.g	used r0 instead of ar0
   0527 E8                 1734 	mov	a,r0
   0528 24r3D              1735 	add	a,#_main_buffAddress_1_1
   052A F5 82              1736 	mov	dpl,a
                           1737 ;	Peephole 236.g	used r1 instead of ar1
   052C E9                 1738 	mov	a,r1
   052D 34s18              1739 	addc	a,#(_main_buffAddress_1_1 >> 8)
   052F F5 83              1740 	mov	dph,a
                           1741 ;	genPointerSet
                           1742 ;     genFarPointerSet
   0531 EA                 1743 	mov	a,r2
   0532 F0                 1744 	movx	@dptr,a
   0533 A3                 1745 	inc	dptr
   0534 EB                 1746 	mov	a,r3
   0535 F0                 1747 	movx	@dptr,a
   0536 A3                 1748 	inc	dptr
   0537 EC                 1749 	mov	a,r4
   0538 F0                 1750 	movx	@dptr,a
                           1751 ;	main1.c:172: buffsize[buffCnt]=x3;//adding size of new buffer in size array
                           1752 ;	genLeftShift
                           1753 ;	genLeftShiftLiteral
                           1754 ;	genlshTwo
                           1755 ;	Peephole 252	optimized left shift
   0539 E5*09              1756 	mov	a,_main_sloc3_1_0
   053B 25 E0              1757 	add	a,acc
   053D F8                 1758 	mov	r0,a
   053E E5*0A              1759 	mov	a,(_main_sloc3_1_0 + 1)
   0540 33                 1760 	rlc	a
   0541 F9                 1761 	mov	r1,a
                           1762 ;	genPlus
                           1763 ;	Peephole 236.g	used r0 instead of ar0
   0542 E8                 1764 	mov	a,r0
   0543 24r75              1765 	add	a,#_main_buffsize_1_1
   0545 F5 82              1766 	mov	dpl,a
                           1767 ;	Peephole 236.g	used r1 instead of ar1
   0547 E9                 1768 	mov	a,r1
   0548 34s17              1769 	addc	a,#(_main_buffsize_1_1 >> 8)
   054A F5 83              1770 	mov	dph,a
                           1771 ;	genPointerSet
                           1772 ;     genFarPointerSet
   054C EE                 1773 	mov	a,r6
   054D F0                 1774 	movx	@dptr,a
   054E A3                 1775 	inc	dptr
   054F EF                 1776 	mov	a,r7
   0550 F0                 1777 	movx	@dptr,a
                           1778 ;	main1.c:173: buffCnt=buffCnt+1;//increment counter
                           1779 ;	genPlus
   0551 90s19r6F           1780 	mov	dptr,#_main_buffCnt_1_1
                           1781 ;     genPlusIncr
   0554 74 01              1782 	mov	a,#0x01
   0556 25*09              1783 	add	a,_main_sloc3_1_0
   0558 F0                 1784 	movx	@dptr,a
                           1785 ;	Peephole 181	changed mov to clr
   0559 E4                 1786 	clr	a
   055A 35*0A              1787 	addc	a,(_main_sloc3_1_0 + 1)
   055C A3                 1788 	inc	dptr
   055D F0                 1789 	movx	@dptr,a
                           1790 ;	main1.c:174: printf_tiny("\r\n  Buffer Allocated");
                           1791 ;	genIpush
   055E C0 00              1792 	push	ar0
   0560 C0 01              1793 	push	ar1
   0562 74rF0              1794 	mov	a,#__str_17
   0564 C0 E0              1795 	push	acc
   0566 74s02              1796 	mov	a,#(__str_17 >> 8)
   0568 C0 E0              1797 	push	acc
                           1798 ;	genCall
   056A 12s00r00           1799 	lcall	_printf_tiny
   056D 15 81              1800 	dec	sp
   056F 15 81              1801 	dec	sp
   0571 D0 01              1802 	pop	ar1
   0573 D0 00              1803 	pop	ar0
                           1804 ;	genIpop
   0575 D0 01              1805 	pop	ar1
   0577 D0 00              1806 	pop	ar0
   0579 02s02rEC           1807 	ljmp	00192$
   057C                    1808 00125$:
                           1809 ;	main1.c:180: printf_tiny("\r\n Allocation failed");//ELSE IF IT FAILS,GIVE THEBAD NEWS
                           1810 ;	genIpush
   057C C0 00              1811 	push	ar0
   057E C0 01              1812 	push	ar1
   0580 74r05              1813 	mov	a,#__str_18
   0582 C0 E0              1814 	push	acc
   0584 74s03              1815 	mov	a,#(__str_18 >> 8)
   0586 C0 E0              1816 	push	acc
                           1817 ;	genCall
   0588 12s00r00           1818 	lcall	_printf_tiny
   058B 15 81              1819 	dec	sp
   058D 15 81              1820 	dec	sp
   058F D0 01              1821 	pop	ar1
   0591 D0 00              1822 	pop	ar0
                           1823 ;	main1.c:182: goto label2;
   0593 02s04r25           1824 	ljmp	00120$
   0596                    1825 00128$:
                           1826 ;	main1.c:187: x2=1;
                           1827 ;	genAssign
   0596 90s17r73           1828 	mov	dptr,#_main_x2_1_1
   0599 74 01              1829 	mov	a,#0x01
   059B F0                 1830 	movx	@dptr,a
   059C E4                 1831 	clr	a
   059D A3                 1832 	inc	dptr
   059E F0                 1833 	movx	@dptr,a
                           1834 ;	main1.c:189: goto label2;
   059F 02s04r25           1835 	ljmp	00120$
   05A2                    1836 00186$:
                           1837 ;	main1.c:192: else if(c=='-')
                           1838 ;	genCmpEq
                           1839 ;	gencjneshort
   05A2 BD 2D 02           1840 	cjne	r5,#0x2D,00273$
   05A5 80 03              1841 	sjmp	00274$
   05A7                    1842 00273$:
   05A7 02s07r5B           1843 	ljmp	00183$
   05AA                    1844 00274$:
                           1845 ;	main1.c:195: printf_tiny("\r\t\t\tDeleting buffer\n");
                           1846 ;	genIpush
   05AA C0 00              1847 	push	ar0
   05AC C0 01              1848 	push	ar1
   05AE 74r1A              1849 	mov	a,#__str_19
   05B0 C0 E0              1850 	push	acc
   05B2 74s03              1851 	mov	a,#(__str_19 >> 8)
   05B4 C0 E0              1852 	push	acc
                           1853 ;	genCall
   05B6 12s00r00           1854 	lcall	_printf_tiny
   05B9 15 81              1855 	dec	sp
   05BB 15 81              1856 	dec	sp
   05BD D0 01              1857 	pop	ar1
   05BF D0 00              1858 	pop	ar0
                           1859 ;	main1.c:196: printf_tiny("\n\r----------------------------------------------------------------------------\n");
                           1860 ;	genIpush
   05C1 C0 00              1861 	push	ar0
   05C3 C0 01              1862 	push	ar1
   05C5 74r1A              1863 	mov	a,#__str_13
   05C7 C0 E0              1864 	push	acc
   05C9 74s02              1865 	mov	a,#(__str_13 >> 8)
   05CB C0 E0              1866 	push	acc
                           1867 ;	genCall
   05CD 12s00r00           1868 	lcall	_printf_tiny
   05D0 15 81              1869 	dec	sp
   05D2 15 81              1870 	dec	sp
   05D4 D0 01              1871 	pop	ar1
   05D6 D0 00              1872 	pop	ar0
                           1873 ;	main1.c:197: printf_tiny("\r\nEnter the number of the buffer to deleted ");
                           1874 ;	genIpush
   05D8 C0 00              1875 	push	ar0
   05DA C0 01              1876 	push	ar1
   05DC 74r2F              1877 	mov	a,#__str_20
   05DE C0 E0              1878 	push	acc
   05E0 74s03              1879 	mov	a,#(__str_20 >> 8)
   05E2 C0 E0              1880 	push	acc
                           1881 ;	genCall
   05E4 12s00r00           1882 	lcall	_printf_tiny
   05E7 15 81              1883 	dec	sp
   05E9 15 81              1884 	dec	sp
   05EB D0 01              1885 	pop	ar1
   05ED D0 00              1886 	pop	ar0
                           1887 ;	main1.c:199: bnumber=get_num();// getting the number of buffer to be deleted
                           1888 ;	genCall
   05EF C0 00              1889 	push	ar0
   05F1 C0 01              1890 	push	ar1
   05F3 12s0ErB9           1891 	lcall	_get_num
   05F6 AA 82              1892 	mov	r2,dpl
   05F8 AB 83              1893 	mov	r3,dph
   05FA D0 01              1894 	pop	ar1
   05FC D0 00              1895 	pop	ar0
                           1896 ;	main1.c:202: if(bnumber>100)
                           1897 ;	genCmpGt
                           1898 ;	genCmp
   05FE C3                 1899 	clr	c
   05FF 74 64              1900 	mov	a,#0x64
   0601 9A                 1901 	subb	a,r2
                           1902 ;	Peephole 159	avoided xrl during execution
   0602 74 80              1903 	mov	a,#(0x00 ^ 0x80)
   0604 8B F0              1904 	mov	b,r3
   0606 63 F0 80           1905 	xrl	b,#0x80
   0609 95 F0              1906 	subb	a,b
                           1907 ;	genIfxJump
                           1908 ;	Peephole 108.a	removed ljmp by inverse jump logic
   060B 50 1A              1909 	jnc	00143$
                           1910 ;	Peephole 300	removed redundant label 00275$
                           1911 ;	main1.c:204: printf_tiny("\r\nEnter  a valid number decimal number");
                           1912 ;	genIpush
   060D C0 00              1913 	push	ar0
   060F C0 01              1914 	push	ar1
   0611 74r5C              1915 	mov	a,#__str_21
   0613 C0 E0              1916 	push	acc
   0615 74s03              1917 	mov	a,#(__str_21 >> 8)
   0617 C0 E0              1918 	push	acc
                           1919 ;	genCall
   0619 12s00r00           1920 	lcall	_printf_tiny
   061C 15 81              1921 	dec	sp
   061E 15 81              1922 	dec	sp
   0620 D0 01              1923 	pop	ar1
   0622 D0 00              1924 	pop	ar0
   0624 02s02rEC           1925 	ljmp	00192$
   0627                    1926 00143$:
                           1927 ;	main1.c:206: else if(buffAddress[bnumber]!=0)//checking if buffer exists
                           1928 ;	genIpush
   0627 C0 00              1929 	push	ar0
   0629 C0 01              1930 	push	ar1
                           1931 ;	genAssign
   062B 90s00r00           1932 	mov	dptr,#__mulint_PARM_2
   062E 74 03              1933 	mov	a,#0x03
   0630 F0                 1934 	movx	@dptr,a
   0631 E4                 1935 	clr	a
   0632 A3                 1936 	inc	dptr
   0633 F0                 1937 	movx	@dptr,a
                           1938 ;	genCall
   0634 8A 82              1939 	mov	dpl,r2
   0636 8B 83              1940 	mov	dph,r3
   0638 C0 02              1941 	push	ar2
   063A C0 03              1942 	push	ar3
   063C 12s00r00           1943 	lcall	__mulint
   063F A8 82              1944 	mov	r0,dpl
   0641 A9 83              1945 	mov	r1,dph
   0643 D0 03              1946 	pop	ar3
   0645 D0 02              1947 	pop	ar2
                           1948 ;	genPlus
                           1949 ;	Peephole 236.g	used r0 instead of ar0
   0647 E8                 1950 	mov	a,r0
   0648 24r3D              1951 	add	a,#_main_buffAddress_1_1
   064A FC                 1952 	mov	r4,a
                           1953 ;	Peephole 236.g	used r1 instead of ar1
   064B E9                 1954 	mov	a,r1
   064C 34s18              1955 	addc	a,#(_main_buffAddress_1_1 >> 8)
   064E FD                 1956 	mov	r5,a
                           1957 ;	genPointerGet
                           1958 ;	genFarPointerGet
   064F 8C 82              1959 	mov	dpl,r4
   0651 8D 83              1960 	mov	dph,r5
   0653 E0                 1961 	movx	a,@dptr
   0654 F8                 1962 	mov	r0,a
   0655 A3                 1963 	inc	dptr
   0656 E0                 1964 	movx	a,@dptr
   0657 F9                 1965 	mov	r1,a
   0658 A3                 1966 	inc	dptr
   0659 E0                 1967 	movx	a,@dptr
   065A FE                 1968 	mov	r6,a
                           1969 ;	genCmpEq
                           1970 ;	gencjne
                           1971 ;	gencjneshort
                           1972 ;	Peephole 241.b	optimized compare
   065B E4                 1973 	clr	a
   065C B8 00 07           1974 	cjne	r0,#0x00,00276$
   065F B9 00 04           1975 	cjne	r1,#0x00,00276$
   0662 BE 00 01           1976 	cjne	r6,#0x00,00276$
   0665 04                 1977 	inc	a
   0666                    1978 00276$:
                           1979 ;	Peephole 300	removed redundant label 00277$
                           1980 ;	genIpop
   0666 D0 01              1981 	pop	ar1
   0668 D0 00              1982 	pop	ar0
                           1983 ;	genIfx
                           1984 ;	genIfxJump
   066A 60 03              1985 	jz	00278$
   066C 02s07r41           1986 	ljmp	00140$
   066F                    1987 00278$:
                           1988 ;	main1.c:208: if((bnumber>= 0)&&(bnumber <= 99))
                           1989 ;	genCmpLt
                           1990 ;	genCmp
   066F EB                 1991 	mov	a,r3
                           1992 ;	genIfxJump
   0670 30 E7 03           1993 	jnb	acc.7,00279$
   0673 02s02rEC           1994 	ljmp	00192$
   0676                    1995 00279$:
                           1996 ;	genCmpGt
                           1997 ;	genCmp
   0676 C3                 1998 	clr	c
   0677 74 63              1999 	mov	a,#0x63
   0679 9A                 2000 	subb	a,r2
                           2001 ;	Peephole 159	avoided xrl during execution
   067A 74 80              2002 	mov	a,#(0x00 ^ 0x80)
   067C 8B F0              2003 	mov	b,r3
   067E 63 F0 80           2004 	xrl	b,#0x80
   0681 95 F0              2005 	subb	a,b
                           2006 ;	genIfxJump
   0683 50 03              2007 	jnc	00280$
   0685 02s02rEC           2008 	ljmp	00192$
   0688                    2009 00280$:
                           2010 ;	main1.c:210: if(bnumber<1)//condition for buffer 0 not being deleted
                           2011 ;	genCmpLt
                           2012 ;	genCmp
   0688 C3                 2013 	clr	c
   0689 EA                 2014 	mov	a,r2
   068A 94 01              2015 	subb	a,#0x01
   068C EB                 2016 	mov	a,r3
   068D 64 80              2017 	xrl	a,#0x80
   068F 94 80              2018 	subb	a,#0x80
   0691 E4                 2019 	clr	a
   0692 33                 2020 	rlc	a
                           2021 ;	genIfx
   0693 FE                 2022 	mov	r6,a
                           2023 ;	Peephole 105	removed redundant mov
                           2024 ;	genIfxJump
                           2025 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0694 60 1A              2026 	jz	00134$
                           2027 ;	Peephole 300	removed redundant label 00281$
                           2028 ;	main1.c:212: printf_tiny("cannot delete buffer '0' ");
                           2029 ;	genIpush
   0696 C0 00              2030 	push	ar0
   0698 C0 01              2031 	push	ar1
   069A 74r83              2032 	mov	a,#__str_22
   069C C0 E0              2033 	push	acc
   069E 74s03              2034 	mov	a,#(__str_22 >> 8)
   06A0 C0 E0              2035 	push	acc
                           2036 ;	genCall
   06A2 12s00r00           2037 	lcall	_printf_tiny
   06A5 15 81              2038 	dec	sp
   06A7 15 81              2039 	dec	sp
   06A9 D0 01              2040 	pop	ar1
   06AB D0 00              2041 	pop	ar0
   06AD 02s02rEC           2042 	ljmp	00192$
   06B0                    2043 00134$:
                           2044 ;	main1.c:214: else if(bnumber >=1 )
                           2045 ;	genIfx
   06B0 EE                 2046 	mov	a,r6
                           2047 ;	genIfxJump
   06B1 60 03              2048 	jz	00282$
   06B3 02s02rEC           2049 	ljmp	00192$
   06B6                    2050 00282$:
                           2051 ;	main1.c:215: {   free (buffAddress[bnumber]);//freeing buffer
                           2052 ;	genIpush
   06B6 C0 00              2053 	push	ar0
   06B8 C0 01              2054 	push	ar1
                           2055 ;	genPointerGet
                           2056 ;	genFarPointerGet
   06BA 8C 82              2057 	mov	dpl,r4
   06BC 8D 83              2058 	mov	dph,r5
   06BE E0                 2059 	movx	a,@dptr
   06BF FE                 2060 	mov	r6,a
   06C0 A3                 2061 	inc	dptr
   06C1 E0                 2062 	movx	a,@dptr
   06C2 FF                 2063 	mov	r7,a
   06C3 A3                 2064 	inc	dptr
   06C4 E0                 2065 	movx	a,@dptr
   06C5 F8                 2066 	mov	r0,a
                           2067 ;	genCall
   06C6 8E 82              2068 	mov	dpl,r6
   06C8 8F 83              2069 	mov	dph,r7
   06CA 88 F0              2070 	mov	b,r0
   06CC C0 02              2071 	push	ar2
   06CE C0 03              2072 	push	ar3
   06D0 C0 04              2073 	push	ar4
   06D2 C0 05              2074 	push	ar5
   06D4 C0 00              2075 	push	ar0
   06D6 C0 01              2076 	push	ar1
   06D8 12s00r00           2077 	lcall	_free
   06DB D0 01              2078 	pop	ar1
   06DD D0 00              2079 	pop	ar0
   06DF D0 05              2080 	pop	ar5
   06E1 D0 04              2081 	pop	ar4
   06E3 D0 03              2082 	pop	ar3
   06E5 D0 02              2083 	pop	ar2
                           2084 ;	main1.c:216: buffAddress[bnumber] = 0;// making address in array null if buffer is deleted
                           2085 ;	genPointerSet
                           2086 ;     genFarPointerSet
   06E7 8C 82              2087 	mov	dpl,r4
   06E9 8D 83              2088 	mov	dph,r5
                           2089 ;	Peephole 181	changed mov to clr
                           2090 ;	Peephole 101	removed redundant mov
                           2091 ;	Peephole 181	changed mov to clr
   06EB E4                 2092 	clr	a
   06EC F0                 2093 	movx	@dptr,a
   06ED A3                 2094 	inc	dptr
   06EE F0                 2095 	movx	@dptr,a
   06EF A3                 2096 	inc	dptr
                           2097 ;	Peephole 226.b	removed unnecessary clr
   06F0 F0                 2098 	movx	@dptr,a
                           2099 ;	main1.c:217: buffsize[bnumber] = 0;// making size of the deleted buffer null
                           2100 ;	genLeftShift
                           2101 ;	genLeftShiftLiteral
                           2102 ;	genlshTwo
   06F1 8A 06              2103 	mov	ar6,r2
   06F3 EB                 2104 	mov	a,r3
   06F4 CE                 2105 	xch	a,r6
   06F5 25 E0              2106 	add	a,acc
   06F7 CE                 2107 	xch	a,r6
   06F8 33                 2108 	rlc	a
   06F9 FF                 2109 	mov	r7,a
                           2110 ;	genPlus
                           2111 ;	Peephole 236.g	used r6 instead of ar6
   06FA EE                 2112 	mov	a,r6
   06FB 24r75              2113 	add	a,#_main_buffsize_1_1
   06FD F5 82              2114 	mov	dpl,a
                           2115 ;	Peephole 236.g	used r7 instead of ar7
   06FF EF                 2116 	mov	a,r7
   0700 34s17              2117 	addc	a,#(_main_buffsize_1_1 >> 8)
   0702 F5 83              2118 	mov	dph,a
                           2119 ;	genPointerSet
                           2120 ;     genFarPointerSet
                           2121 ;	Peephole 181	changed mov to clr
   0704 E4                 2122 	clr	a
   0705 F0                 2123 	movx	@dptr,a
   0706 A3                 2124 	inc	dptr
                           2125 ;	Peephole 101	removed redundant mov
   0707 F0                 2126 	movx	@dptr,a
                           2127 ;	main1.c:218: buffCnt=buffCnt-1;//decreasing the count of buffers when a buffer is deleted
                           2128 ;	genAssign
   0708 90s19r6F           2129 	mov	dptr,#_main_buffCnt_1_1
   070B E0                 2130 	movx	a,@dptr
   070C FE                 2131 	mov	r6,a
   070D A3                 2132 	inc	dptr
   070E E0                 2133 	movx	a,@dptr
   070F FF                 2134 	mov	r7,a
                           2135 ;	genMinus
                           2136 ;	genMinusDec
   0710 1E                 2137 	dec	r6
   0711 BE FF 01           2138 	cjne	r6,#0xff,00283$
   0714 1F                 2139 	dec	r7
   0715                    2140 00283$:
                           2141 ;	genAssign
   0715 90s19r6F           2142 	mov	dptr,#_main_buffCnt_1_1
   0718 EE                 2143 	mov	a,r6
   0719 F0                 2144 	movx	@dptr,a
   071A A3                 2145 	inc	dptr
   071B EF                 2146 	mov	a,r7
   071C F0                 2147 	movx	@dptr,a
                           2148 ;	main1.c:219: printf_tiny("\r\n Buffer %d deleted",bnumber);
                           2149 ;	genIpush
   071D C0 00              2150 	push	ar0
   071F C0 01              2151 	push	ar1
   0721 C0 02              2152 	push	ar2
   0723 C0 03              2153 	push	ar3
                           2154 ;	genIpush
   0725 74r9D              2155 	mov	a,#__str_23
   0727 C0 E0              2156 	push	acc
   0729 74s03              2157 	mov	a,#(__str_23 >> 8)
   072B C0 E0              2158 	push	acc
                           2159 ;	genCall
   072D 12s00r00           2160 	lcall	_printf_tiny
   0730 E5 81              2161 	mov	a,sp
   0732 24 FC              2162 	add	a,#0xfc
   0734 F5 81              2163 	mov	sp,a
   0736 D0 01              2164 	pop	ar1
   0738 D0 00              2165 	pop	ar0
                           2166 ;	genIpop
   073A D0 01              2167 	pop	ar1
   073C D0 00              2168 	pop	ar0
   073E 02s02rEC           2169 	ljmp	00192$
   0741                    2170 00140$:
                           2171 ;	main1.c:225: printf_tiny("\r\n invalid input try again");// if buffer number entered is not assigned say that the input is invalid
                           2172 ;	genIpush
   0741 C0 00              2173 	push	ar0
   0743 C0 01              2174 	push	ar1
   0745 74rB2              2175 	mov	a,#__str_24
   0747 C0 E0              2176 	push	acc
   0749 74s03              2177 	mov	a,#(__str_24 >> 8)
   074B C0 E0              2178 	push	acc
                           2179 ;	genCall
   074D 12s00r00           2180 	lcall	_printf_tiny
   0750 15 81              2181 	dec	sp
   0752 15 81              2182 	dec	sp
   0754 D0 01              2183 	pop	ar1
   0756 D0 00              2184 	pop	ar0
   0758 02s02rEC           2185 	ljmp	00192$
   075B                    2186 00183$:
                           2187 ;	main1.c:228: else if(c=='@')
                           2188 ;	genCmpEq
                           2189 ;	gencjneshort
   075B BD 40 02           2190 	cjne	r5,#0x40,00284$
   075E 80 03              2191 	sjmp	00285$
   0760                    2192 00284$:
   0760 02s08r29           2193 	ljmp	00180$
   0763                    2194 00285$:
                           2195 ;	main1.c:235: printf_tiny("\n\r---------------------------------------------------------------------------\n");
                           2196 ;	genIpush
   0763 74rCD              2197 	mov	a,#__str_25
   0765 C0 E0              2198 	push	acc
   0767 74s03              2199 	mov	a,#(__str_25 >> 8)
   0769 C0 E0              2200 	push	acc
                           2201 ;	genCall
   076B 12s00r00           2202 	lcall	_printf_tiny
   076E 15 81              2203 	dec	sp
   0770 15 81              2204 	dec	sp
                           2205 ;	main1.c:236: printf_tiny("\r\n\tFreeing all Buffers\n");
                           2206 ;	genIpush
   0772 74r1C              2207 	mov	a,#__str_26
   0774 C0 E0              2208 	push	acc
   0776 74s04              2209 	mov	a,#(__str_26 >> 8)
   0778 C0 E0              2210 	push	acc
                           2211 ;	genCall
   077A 12s00r00           2212 	lcall	_printf_tiny
   077D 15 81              2213 	dec	sp
   077F 15 81              2214 	dec	sp
                           2215 ;	main1.c:238: for(buffNo=0;buffNo<buffCnt;buffNo++)//free all buffers that are allocated
                           2216 ;	genAssign
   0781 90s19r6F           2217 	mov	dptr,#_main_buffCnt_1_1
   0784 E0                 2218 	movx	a,@dptr
   0785 FE                 2219 	mov	r6,a
   0786 A3                 2220 	inc	dptr
   0787 E0                 2221 	movx	a,@dptr
   0788 FF                 2222 	mov	r7,a
                           2223 ;	genAssign
   0789 E4                 2224 	clr	a
   078A F5*0B              2225 	mov	_main_sloc4_1_0,a
   078C F5*0C              2226 	mov	(_main_sloc4_1_0 + 1),a
   078E                    2227 00195$:
                           2228 ;	genCmpLt
                           2229 ;	genCmp
   078E C3                 2230 	clr	c
   078F E5*0B              2231 	mov	a,_main_sloc4_1_0
   0791 9E                 2232 	subb	a,r6
   0792 E5*0C              2233 	mov	a,(_main_sloc4_1_0 + 1)
   0794 9F                 2234 	subb	a,r7
                           2235 ;	genIfxJump
   0795 40 03              2236 	jc	00286$
   0797 02s08r11           2237 	ljmp	00198$
   079A                    2238 00286$:
                           2239 ;	main1.c:240: free(buffAddress[buffNo]);
                           2240 ;	genIpush
   079A C0 06              2241 	push	ar6
   079C C0 07              2242 	push	ar7
                           2243 ;	genAssign
   079E 90s00r00           2244 	mov	dptr,#__mulint_PARM_2
   07A1 74 03              2245 	mov	a,#0x03
   07A3 F0                 2246 	movx	@dptr,a
   07A4 E4                 2247 	clr	a
   07A5 A3                 2248 	inc	dptr
   07A6 F0                 2249 	movx	@dptr,a
                           2250 ;	genCall
   07A7 85*0B 82           2251 	mov	dpl,_main_sloc4_1_0
   07AA 85*0C 83           2252 	mov	dph,(_main_sloc4_1_0 + 1)
   07AD 12s00r00           2253 	lcall	__mulint
   07B0 AE 82              2254 	mov	r6,dpl
   07B2 AF 83              2255 	mov	r7,dph
                           2256 ;	genPlus
                           2257 ;	Peephole 236.g	used r6 instead of ar6
   07B4 EE                 2258 	mov	a,r6
   07B5 24r3D              2259 	add	a,#_main_buffAddress_1_1
   07B7 FA                 2260 	mov	r2,a
                           2261 ;	Peephole 236.g	used r7 instead of ar7
   07B8 EF                 2262 	mov	a,r7
   07B9 34s18              2263 	addc	a,#(_main_buffAddress_1_1 >> 8)
   07BB FB                 2264 	mov	r3,a
                           2265 ;	genPointerGet
                           2266 ;	genFarPointerGet
   07BC 8A 82              2267 	mov	dpl,r2
   07BE 8B 83              2268 	mov	dph,r3
   07C0 E0                 2269 	movx	a,@dptr
   07C1 FC                 2270 	mov	r4,a
   07C2 A3                 2271 	inc	dptr
   07C3 E0                 2272 	movx	a,@dptr
   07C4 FD                 2273 	mov	r5,a
   07C5 A3                 2274 	inc	dptr
   07C6 E0                 2275 	movx	a,@dptr
   07C7 F8                 2276 	mov	r0,a
                           2277 ;	genCall
   07C8 8C 82              2278 	mov	dpl,r4
   07CA 8D 83              2279 	mov	dph,r5
   07CC 88 F0              2280 	mov	b,r0
   07CE C0 02              2281 	push	ar2
   07D0 C0 03              2282 	push	ar3
   07D2 C0 06              2283 	push	ar6
   07D4 C0 07              2284 	push	ar7
   07D6 12s00r00           2285 	lcall	_free
   07D9 D0 07              2286 	pop	ar7
   07DB D0 06              2287 	pop	ar6
   07DD D0 03              2288 	pop	ar3
   07DF D0 02              2289 	pop	ar2
                           2290 ;	main1.c:241: buffAddress[buffNo]=0;
                           2291 ;	genPointerSet
                           2292 ;     genFarPointerSet
   07E1 8A 82              2293 	mov	dpl,r2
   07E3 8B 83              2294 	mov	dph,r3
                           2295 ;	Peephole 181	changed mov to clr
                           2296 ;	Peephole 101	removed redundant mov
                           2297 ;	Peephole 181	changed mov to clr
   07E5 E4                 2298 	clr	a
   07E6 F0                 2299 	movx	@dptr,a
   07E7 A3                 2300 	inc	dptr
   07E8 F0                 2301 	movx	@dptr,a
   07E9 A3                 2302 	inc	dptr
                           2303 ;	Peephole 226.b	removed unnecessary clr
   07EA F0                 2304 	movx	@dptr,a
                           2305 ;	main1.c:242: buffsize[buffNo]=0;
                           2306 ;	genLeftShift
                           2307 ;	genLeftShiftLiteral
                           2308 ;	genlshTwo
                           2309 ;	Peephole 252	optimized left shift
   07EB E5*0B              2310 	mov	a,_main_sloc4_1_0
   07ED 25 E0              2311 	add	a,acc
   07EF FE                 2312 	mov	r6,a
   07F0 E5*0C              2313 	mov	a,(_main_sloc4_1_0 + 1)
   07F2 33                 2314 	rlc	a
   07F3 FF                 2315 	mov	r7,a
                           2316 ;	genPlus
                           2317 ;	Peephole 236.g	used r6 instead of ar6
   07F4 EE                 2318 	mov	a,r6
   07F5 24r75              2319 	add	a,#_main_buffsize_1_1
   07F7 F5 82              2320 	mov	dpl,a
                           2321 ;	Peephole 236.g	used r7 instead of ar7
   07F9 EF                 2322 	mov	a,r7
   07FA 34s17              2323 	addc	a,#(_main_buffsize_1_1 >> 8)
   07FC F5 83              2324 	mov	dph,a
                           2325 ;	genPointerSet
                           2326 ;     genFarPointerSet
                           2327 ;	Peephole 181	changed mov to clr
   07FE E4                 2328 	clr	a
   07FF F0                 2329 	movx	@dptr,a
   0800 A3                 2330 	inc	dptr
                           2331 ;	Peephole 101	removed redundant mov
   0801 F0                 2332 	movx	@dptr,a
                           2333 ;	main1.c:238: for(buffNo=0;buffNo<buffCnt;buffNo++)//free all buffers that are allocated
                           2334 ;	genPlus
                           2335 ;     genPlusIncr
   0802 05*0B              2336 	inc	_main_sloc4_1_0
   0804 E4                 2337 	clr	a
   0805 B5*0B 02           2338 	cjne	a,_main_sloc4_1_0,00287$
   0808 05*0C              2339 	inc	(_main_sloc4_1_0 + 1)
   080A                    2340 00287$:
                           2341 ;	genIpop
   080A D0 07              2342 	pop	ar7
   080C D0 06              2343 	pop	ar6
   080E 02s07r8E           2344 	ljmp	00195$
   0811                    2345 00198$:
                           2346 ;	main1.c:244: buffCnt= 0;//after freeing make number of buffers to 0
                           2347 ;	genAssign
   0811 90s19r6F           2348 	mov	dptr,#_main_buffCnt_1_1
   0814 E4                 2349 	clr	a
   0815 F0                 2350 	movx	@dptr,a
   0816 A3                 2351 	inc	dptr
   0817 F0                 2352 	movx	@dptr,a
                           2353 ;	main1.c:247: x1=0;
                           2354 ;	genAssign
   0818 90s17r71           2355 	mov	dptr,#_main_x1_1_1
   081B E4                 2356 	clr	a
   081C F0                 2357 	movx	@dptr,a
   081D A3                 2358 	inc	dptr
   081E F0                 2359 	movx	@dptr,a
                           2360 ;	main1.c:248: x2=0;
                           2361 ;	genAssign
   081F 90s17r73           2362 	mov	dptr,#_main_x2_1_1
   0822 E4                 2363 	clr	a
   0823 F0                 2364 	movx	@dptr,a
   0824 A3                 2365 	inc	dptr
   0825 F0                 2366 	movx	@dptr,a
                           2367 ;	main1.c:249: goto label1;//Go to the start
   0826 02s00rA5           2368 	ljmp	00101$
   0829                    2369 00180$:
                           2370 ;	main1.c:251: else if(c=='=')
                           2371 ;	genCmpEq
                           2372 ;	gencjneshort
   0829 BD 3D 02           2373 	cjne	r5,#0x3D,00288$
   082C 80 03              2374 	sjmp	00289$
   082E                    2375 00288$:
   082E 02s0Ar08           2376 	ljmp	00177$
   0831                    2377 00289$:
                           2378 ;	main1.c:252: {              if(b0chr!=0) // if the number of characters are not 0.
                           2379 ;	genAssign
   0831 90s19r74           2380 	mov	dptr,#_main_b0chr_1_1
   0834 E0                 2381 	movx	a,@dptr
   0835 FE                 2382 	mov	r6,a
   0836 A3                 2383 	inc	dptr
   0837 E0                 2384 	movx	a,@dptr
   0838 FF                 2385 	mov	r7,a
                           2386 ;	genCmpEq
                           2387 ;	gencjneshort
   0839 BE 00 06           2388 	cjne	r6,#0x00,00290$
   083C BF 00 03           2389 	cjne	r7,#0x00,00290$
   083F 02s09rEE           2390 	ljmp	00153$
   0842                    2391 00290$:
                           2392 ;	main1.c:256: printf_tiny("\r\t\t\tAddress in Hex\n");
                           2393 ;	genIpush
   0842 C0 06              2394 	push	ar6
   0844 C0 07              2395 	push	ar7
   0846 C0 00              2396 	push	ar0
   0848 C0 01              2397 	push	ar1
   084A 74r34              2398 	mov	a,#__str_27
   084C C0 E0              2399 	push	acc
   084E 74s04              2400 	mov	a,#(__str_27 >> 8)
   0850 C0 E0              2401 	push	acc
                           2402 ;	genCall
   0852 12s00r00           2403 	lcall	_printf_tiny
   0855 15 81              2404 	dec	sp
   0857 15 81              2405 	dec	sp
   0859 D0 01              2406 	pop	ar1
   085B D0 00              2407 	pop	ar0
   085D D0 07              2408 	pop	ar7
   085F D0 06              2409 	pop	ar6
                           2410 ;	main1.c:257: printf_tiny("\n\r--------------------------------------------------------------------\n");
                           2411 ;	genIpush
   0861 C0 06              2412 	push	ar6
   0863 C0 07              2413 	push	ar7
   0865 C0 00              2414 	push	ar0
   0867 C0 01              2415 	push	ar1
   0869 74r48              2416 	mov	a,#__str_28
   086B C0 E0              2417 	push	acc
   086D 74s04              2418 	mov	a,#(__str_28 >> 8)
   086F C0 E0              2419 	push	acc
                           2420 ;	genCall
   0871 12s00r00           2421 	lcall	_printf_tiny
   0874 15 81              2422 	dec	sp
   0876 15 81              2423 	dec	sp
   0878 D0 01              2424 	pop	ar1
   087A D0 00              2425 	pop	ar0
   087C D0 07              2426 	pop	ar7
   087E D0 06              2427 	pop	ar6
                           2428 ;	main1.c:259: bData=0;
                           2429 ;	genAssign
   0880 90s19r76           2430 	mov	dptr,#_main_bData_1_1
   0883 E4                 2431 	clr	a
   0884 F0                 2432 	movx	@dptr,a
   0885 A3                 2433 	inc	dptr
   0886 F0                 2434 	movx	@dptr,a
                           2435 ;	main1.c:262: while(((buffAdd*16)+bData)<b0chr )//checking if counters are less than number of characters
                           2436 ;	genAssign
   0887 8E*0E              2437 	mov	_main_sloc5_1_0,r6
   0889 8F*0F              2438 	mov	(_main_sloc5_1_0 + 1),r7
                           2439 ;	genAssign
   088B 8E 03              2440 	mov	ar3,r6
   088D 8F 04              2441 	mov	ar4,r7
                           2442 ;	genAssign
   088F E4                 2443 	clr	a
   0890 F5*0B              2444 	mov	_main_sloc4_1_0,a
   0892 F5*0C              2445 	mov	(_main_sloc4_1_0 + 1),a
   0894                    2446 00149$:
                           2447 ;	genIpush
   0894 C0 00              2448 	push	ar0
   0896 C0 01              2449 	push	ar1
                           2450 ;	genLeftShift
                           2451 ;	genLeftShiftLiteral
                           2452 ;	genlshTwo
   0898 A8*0B              2453 	mov	r0,_main_sloc4_1_0
   089A E5*0C              2454 	mov	a,(_main_sloc4_1_0 + 1)
   089C C4                 2455 	swap	a
   089D 54 F0              2456 	anl	a,#0xf0
   089F C8                 2457 	xch	a,r0
   08A0 C4                 2458 	swap	a
   08A1 C8                 2459 	xch	a,r0
   08A2 68                 2460 	xrl	a,r0
   08A3 C8                 2461 	xch	a,r0
   08A4 54 F0              2462 	anl	a,#0xf0
   08A6 C8                 2463 	xch	a,r0
   08A7 68                 2464 	xrl	a,r0
   08A8 F9                 2465 	mov	r1,a
                           2466 ;	genAssign
   08A9 90s19r76           2467 	mov	dptr,#_main_bData_1_1
   08AC E0                 2468 	movx	a,@dptr
   08AD FE                 2469 	mov	r6,a
   08AE A3                 2470 	inc	dptr
   08AF E0                 2471 	movx	a,@dptr
   08B0 FF                 2472 	mov	r7,a
                           2473 ;	genPlus
                           2474 ;	Peephole 236.g	used r6 instead of ar6
   08B1 EE                 2475 	mov	a,r6
                           2476 ;	Peephole 236.a	used r0 instead of ar0
   08B2 28                 2477 	add	a,r0
   08B3 F8                 2478 	mov	r0,a
                           2479 ;	Peephole 236.g	used r7 instead of ar7
   08B4 EF                 2480 	mov	a,r7
                           2481 ;	Peephole 236.b	used r1 instead of ar1
   08B5 39                 2482 	addc	a,r1
   08B6 F9                 2483 	mov	r1,a
                           2484 ;	genCmpLt
                           2485 ;	genCmp
   08B7 C3                 2486 	clr	c
   08B8 E8                 2487 	mov	a,r0
   08B9 9B                 2488 	subb	a,r3
   08BA E9                 2489 	mov	a,r1
   08BB 9C                 2490 	subb	a,r4
                           2491 ;	genIpop
                           2492 ;	genIfx
                           2493 ;	genIfxJump
                           2494 ;	Peephole 129.c	optimized condition
   08BC D0 01              2495 	pop	ar1
   08BE D0 00              2496 	pop	ar0
   08C0 40 03              2497 	jc	00291$
   08C2 02s02rEC           2498 	ljmp	00192$
   08C5                    2499 00291$:
                           2500 ;	main1.c:264: printf_tiny("\r\n%x : ",(uint16_t)(buffer0+buffAdd));// printing address in hex
                           2501 ;	genIpush
   08C5 C0 00              2502 	push	ar0
   08C7 C0 01              2503 	push	ar1
                           2504 ;	genLeftShift
                           2505 ;	genLeftShiftLiteral
                           2506 ;	genlshTwo
                           2507 ;	Peephole 252	optimized left shift
   08C9 E5*0B              2508 	mov	a,_main_sloc4_1_0
   08CB 25 E0              2509 	add	a,acc
   08CD FE                 2510 	mov	r6,a
   08CE E5*0C              2511 	mov	a,(_main_sloc4_1_0 + 1)
   08D0 33                 2512 	rlc	a
   08D1 FF                 2513 	mov	r7,a
                           2514 ;	genPlus
                           2515 ;	Peephole 236.g	used r6 instead of ar6
   08D2 EE                 2516 	mov	a,r6
   08D3 25*00              2517 	add	a,_main_sloc0_1_0
   08D5 FE                 2518 	mov	r6,a
                           2519 ;	Peephole 236.g	used r7 instead of ar7
   08D6 EF                 2520 	mov	a,r7
   08D7 35*01              2521 	addc	a,(_main_sloc0_1_0 + 1)
   08D9 FF                 2522 	mov	r7,a
   08DA A8*02              2523 	mov	r0,(_main_sloc0_1_0 + 2)
                           2524 ;	genCast
                           2525 ;	genIpush
   08DC C0 03              2526 	push	ar3
   08DE C0 04              2527 	push	ar4
   08E0 C0 00              2528 	push	ar0
   08E2 C0 01              2529 	push	ar1
   08E4 C0 06              2530 	push	ar6
   08E6 C0 07              2531 	push	ar7
                           2532 ;	genIpush
   08E8 74r90              2533 	mov	a,#__str_29
   08EA C0 E0              2534 	push	acc
   08EC 74s04              2535 	mov	a,#(__str_29 >> 8)
   08EE C0 E0              2536 	push	acc
                           2537 ;	genCall
   08F0 12s00r00           2538 	lcall	_printf_tiny
   08F3 E5 81              2539 	mov	a,sp
   08F5 24 FC              2540 	add	a,#0xfc
   08F7 F5 81              2541 	mov	sp,a
   08F9 D0 01              2542 	pop	ar1
   08FB D0 00              2543 	pop	ar0
   08FD D0 04              2544 	pop	ar4
   08FF D0 03              2545 	pop	ar3
                           2546 ;	main1.c:265: bData=0;
                           2547 ;	genAssign
   0901 90s19r76           2548 	mov	dptr,#_main_bData_1_1
   0904 E4                 2549 	clr	a
   0905 F0                 2550 	movx	@dptr,a
   0906 A3                 2551 	inc	dptr
   0907 F0                 2552 	movx	@dptr,a
                           2553 ;	main1.c:347: printf_tiny("\r\n not storing \n");//do not store characters other than storage characters
                           2554 ;	genIpop
   0908 D0 01              2555 	pop	ar1
   090A D0 00              2556 	pop	ar0
                           2557 ;	main1.c:266: while((bData<16)&&(((buffAdd*16)+bData)<b0chr))
   090C                    2558 00146$:
                           2559 ;	genAssign
   090C 90s19r76           2560 	mov	dptr,#_main_bData_1_1
   090F E0                 2561 	movx	a,@dptr
   0910 FE                 2562 	mov	r6,a
   0911 A3                 2563 	inc	dptr
   0912 E0                 2564 	movx	a,@dptr
   0913 FF                 2565 	mov	r7,a
                           2566 ;	genCmpLt
                           2567 ;	genCmp
   0914 C3                 2568 	clr	c
   0915 EE                 2569 	mov	a,r6
   0916 94 10              2570 	subb	a,#0x10
   0918 EF                 2571 	mov	a,r7
   0919 94 00              2572 	subb	a,#0x00
                           2573 ;	genIfxJump
   091B 40 03              2574 	jc	00292$
   091D 02s09rC4           2575 	ljmp	00148$
   0920                    2576 00292$:
                           2577 ;	genIpush
   0920 C0 00              2578 	push	ar0
   0922 C0 01              2579 	push	ar1
                           2580 ;	genLeftShift
                           2581 ;	genLeftShiftLiteral
                           2582 ;	genlshTwo
   0924 AE*0B              2583 	mov	r6,_main_sloc4_1_0
   0926 E5*0C              2584 	mov	a,(_main_sloc4_1_0 + 1)
   0928 C4                 2585 	swap	a
   0929 54 F0              2586 	anl	a,#0xf0
   092B CE                 2587 	xch	a,r6
   092C C4                 2588 	swap	a
   092D CE                 2589 	xch	a,r6
   092E 6E                 2590 	xrl	a,r6
   092F CE                 2591 	xch	a,r6
   0930 54 F0              2592 	anl	a,#0xf0
   0932 CE                 2593 	xch	a,r6
   0933 6E                 2594 	xrl	a,r6
   0934 FF                 2595 	mov	r7,a
                           2596 ;	genAssign
   0935 90s19r76           2597 	mov	dptr,#_main_bData_1_1
   0938 E0                 2598 	movx	a,@dptr
   0939 F8                 2599 	mov	r0,a
   093A A3                 2600 	inc	dptr
   093B E0                 2601 	movx	a,@dptr
   093C F9                 2602 	mov	r1,a
                           2603 ;	genPlus
                           2604 ;	Peephole 236.g	used r0 instead of ar0
   093D E8                 2605 	mov	a,r0
                           2606 ;	Peephole 236.a	used r6 instead of ar6
   093E 2E                 2607 	add	a,r6
   093F FE                 2608 	mov	r6,a
                           2609 ;	Peephole 236.g	used r1 instead of ar1
   0940 E9                 2610 	mov	a,r1
                           2611 ;	Peephole 236.b	used r7 instead of ar7
   0941 3F                 2612 	addc	a,r7
   0942 FF                 2613 	mov	r7,a
                           2614 ;	genCmpLt
                           2615 ;	genCmp
   0943 C3                 2616 	clr	c
   0944 EE                 2617 	mov	a,r6
   0945 95*0E              2618 	subb	a,_main_sloc5_1_0
   0947 EF                 2619 	mov	a,r7
   0948 95*0F              2620 	subb	a,(_main_sloc5_1_0 + 1)
   094A E4                 2621 	clr	a
   094B 33                 2622 	rlc	a
                           2623 ;	genIpop
   094C D0 01              2624 	pop	ar1
   094E D0 00              2625 	pop	ar0
                           2626 ;	genIfx
                           2627 ;	genIfxJump
                           2628 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0950 60 72              2629 	jz	00148$
                           2630 ;	Peephole 300	removed redundant label 00293$
                           2631 ;	main1.c:268: printf_tiny("%x ",(uint16_t)*(buffer0+buffAdd+bData)); // printing the data entered
                           2632 ;	genIpush
   0952 C0 00              2633 	push	ar0
   0954 C0 01              2634 	push	ar1
                           2635 ;	genLeftShift
                           2636 ;	genLeftShiftLiteral
                           2637 ;	genlshTwo
                           2638 ;	Peephole 252	optimized left shift
   0956 E5*0B              2639 	mov	a,_main_sloc4_1_0
   0958 25 E0              2640 	add	a,acc
   095A FE                 2641 	mov	r6,a
   095B E5*0C              2642 	mov	a,(_main_sloc4_1_0 + 1)
   095D 33                 2643 	rlc	a
   095E FF                 2644 	mov	r7,a
                           2645 ;	genPlus
                           2646 ;	Peephole 236.g	used r6 instead of ar6
   095F EE                 2647 	mov	a,r6
   0960 25*03              2648 	add	a,_main_sloc1_1_0
   0962 FE                 2649 	mov	r6,a
                           2650 ;	Peephole 236.g	used r7 instead of ar7
   0963 EF                 2651 	mov	a,r7
   0964 35*04              2652 	addc	a,(_main_sloc1_1_0 + 1)
   0966 FF                 2653 	mov	r7,a
   0967 A8*05              2654 	mov	r0,(_main_sloc1_1_0 + 2)
                           2655 ;	genAssign
   0969 90s19r76           2656 	mov	dptr,#_main_bData_1_1
   096C E0                 2657 	movx	a,@dptr
   096D F9                 2658 	mov	r1,a
   096E A3                 2659 	inc	dptr
   096F E0                 2660 	movx	a,@dptr
                           2661 ;	genLeftShift
                           2662 ;	genLeftShiftLiteral
                           2663 ;	genlshTwo
   0970 FA                 2664 	mov	r2,a
                           2665 ;	Peephole 105	removed redundant mov
   0971 C9                 2666 	xch	a,r1
   0972 25 E0              2667 	add	a,acc
   0974 C9                 2668 	xch	a,r1
   0975 33                 2669 	rlc	a
   0976 FA                 2670 	mov	r2,a
                           2671 ;	genPlus
                           2672 ;	Peephole 236.g	used r1 instead of ar1
   0977 E9                 2673 	mov	a,r1
                           2674 ;	Peephole 236.a	used r6 instead of ar6
   0978 2E                 2675 	add	a,r6
   0979 FE                 2676 	mov	r6,a
                           2677 ;	Peephole 236.g	used r2 instead of ar2
   097A EA                 2678 	mov	a,r2
                           2679 ;	Peephole 236.b	used r7 instead of ar7
   097B 3F                 2680 	addc	a,r7
   097C FF                 2681 	mov	r7,a
                           2682 ;	genPointerGet
                           2683 ;	genGenPointerGet
   097D 8E 82              2684 	mov	dpl,r6
   097F 8F 83              2685 	mov	dph,r7
   0981 88 F0              2686 	mov	b,r0
   0983 12s00r00           2687 	lcall	__gptrget
   0986 FE                 2688 	mov	r6,a
   0987 A3                 2689 	inc	dptr
   0988 12s00r00           2690 	lcall	__gptrget
   098B FF                 2691 	mov	r7,a
                           2692 ;	genIpush
   098C C0 03              2693 	push	ar3
   098E C0 04              2694 	push	ar4
   0990 C0 00              2695 	push	ar0
   0992 C0 01              2696 	push	ar1
   0994 C0 06              2697 	push	ar6
   0996 C0 07              2698 	push	ar7
                           2699 ;	genIpush
   0998 74r98              2700 	mov	a,#__str_30
   099A C0 E0              2701 	push	acc
   099C 74s04              2702 	mov	a,#(__str_30 >> 8)
   099E C0 E0              2703 	push	acc
                           2704 ;	genCall
   09A0 12s00r00           2705 	lcall	_printf_tiny
   09A3 E5 81              2706 	mov	a,sp
   09A5 24 FC              2707 	add	a,#0xfc
   09A7 F5 81              2708 	mov	sp,a
   09A9 D0 01              2709 	pop	ar1
   09AB D0 00              2710 	pop	ar0
   09AD D0 04              2711 	pop	ar4
   09AF D0 03              2712 	pop	ar3
                           2713 ;	main1.c:269: bData++;
                           2714 ;	genPlus
   09B1 90s19r76           2715 	mov	dptr,#_main_bData_1_1
   09B4 E0                 2716 	movx	a,@dptr
   09B5 24 01              2717 	add	a,#0x01
   09B7 F0                 2718 	movx	@dptr,a
   09B8 A3                 2719 	inc	dptr
   09B9 E0                 2720 	movx	a,@dptr
   09BA 34 00              2721 	addc	a,#0x00
   09BC F0                 2722 	movx	@dptr,a
                           2723 ;	genIpop
   09BD D0 01              2724 	pop	ar1
   09BF D0 00              2725 	pop	ar0
   09C1 02s09r0C           2726 	ljmp	00146$
   09C4                    2727 00148$:
                           2728 ;	main1.c:271: printf_tiny("\n\r");
                           2729 ;	genIpush
   09C4 C0 03              2730 	push	ar3
   09C6 C0 04              2731 	push	ar4
   09C8 C0 00              2732 	push	ar0
   09CA C0 01              2733 	push	ar1
   09CC 74r9C              2734 	mov	a,#__str_31
   09CE C0 E0              2735 	push	acc
   09D0 74s04              2736 	mov	a,#(__str_31 >> 8)
   09D2 C0 E0              2737 	push	acc
                           2738 ;	genCall
   09D4 12s00r00           2739 	lcall	_printf_tiny
   09D7 15 81              2740 	dec	sp
   09D9 15 81              2741 	dec	sp
   09DB D0 01              2742 	pop	ar1
   09DD D0 00              2743 	pop	ar0
   09DF D0 04              2744 	pop	ar4
   09E1 D0 03              2745 	pop	ar3
                           2746 ;	main1.c:272: buffAdd ++;
                           2747 ;	genPlus
                           2748 ;     genPlusIncr
   09E3 05*0B              2749 	inc	_main_sloc4_1_0
   09E5 E4                 2750 	clr	a
   09E6 B5*0B 02           2751 	cjne	a,_main_sloc4_1_0,00294$
   09E9 05*0C              2752 	inc	(_main_sloc4_1_0 + 1)
   09EB                    2753 00294$:
   09EB 02s08r94           2754 	ljmp	00149$
   09EE                    2755 00153$:
                           2756 ;	main1.c:277: printf_tiny("\r\nBuffer 0 is empty , enter data!\n");
                           2757 ;	genIpush
   09EE C0 00              2758 	push	ar0
   09F0 C0 01              2759 	push	ar1
   09F2 74r9F              2760 	mov	a,#__str_32
   09F4 C0 E0              2761 	push	acc
   09F6 74s04              2762 	mov	a,#(__str_32 >> 8)
   09F8 C0 E0              2763 	push	acc
                           2764 ;	genCall
   09FA 12s00r00           2765 	lcall	_printf_tiny
   09FD 15 81              2766 	dec	sp
   09FF 15 81              2767 	dec	sp
   0A01 D0 01              2768 	pop	ar1
   0A03 D0 00              2769 	pop	ar0
   0A05 02s02rEC           2770 	ljmp	00192$
   0A08                    2771 00177$:
                           2772 ;	main1.c:281: else if(c=='?')
                           2773 ;	genCmpEq
                           2774 ;	gencjneshort
   0A08 BD 3F 02           2775 	cjne	r5,#0x3F,00295$
   0A0B 80 03              2776 	sjmp	00296$
   0A0D                    2777 00295$:
   0A0D 02s0Er83           2778 	ljmp	00174$
   0A10                    2779 00296$:
                           2780 ;	main1.c:285: printf_tiny("\r----------------------------------------------------------------------------------\n");
                           2781 ;	genIpush
   0A10 C0 00              2782 	push	ar0
   0A12 C0 01              2783 	push	ar1
   0A14 74rC2              2784 	mov	a,#__str_33
   0A16 C0 E0              2785 	push	acc
   0A18 74s04              2786 	mov	a,#(__str_33 >> 8)
   0A1A C0 E0              2787 	push	acc
                           2788 ;	genCall
   0A1C 12s00r00           2789 	lcall	_printf_tiny
   0A1F 15 81              2790 	dec	sp
   0A21 15 81              2791 	dec	sp
   0A23 D0 01              2792 	pop	ar1
   0A25 D0 00              2793 	pop	ar0
                           2794 ;	main1.c:286: printf_tiny("\r\n\t\t\t       BUFFER REPORT                                                      \n");
                           2795 ;	genIpush
   0A27 C0 00              2796 	push	ar0
   0A29 C0 01              2797 	push	ar1
   0A2B 74r17              2798 	mov	a,#__str_34
   0A2D C0 E0              2799 	push	acc
   0A2F 74s05              2800 	mov	a,#(__str_34 >> 8)
   0A31 C0 E0              2801 	push	acc
                           2802 ;	genCall
   0A33 12s00r00           2803 	lcall	_printf_tiny
   0A36 15 81              2804 	dec	sp
   0A38 15 81              2805 	dec	sp
   0A3A D0 01              2806 	pop	ar1
   0A3C D0 00              2807 	pop	ar0
                           2808 ;	main1.c:287: printf_tiny("\n\r---------------------------------------------------------------------------------\n");
                           2809 ;	genIpush
   0A3E C0 00              2810 	push	ar0
   0A40 C0 01              2811 	push	ar1
   0A42 74r68              2812 	mov	a,#__str_35
   0A44 C0 E0              2813 	push	acc
   0A46 74s05              2814 	mov	a,#(__str_35 >> 8)
   0A48 C0 E0              2815 	push	acc
                           2816 ;	genCall
   0A4A 12s00r00           2817 	lcall	_printf_tiny
   0A4D 15 81              2818 	dec	sp
   0A4F 15 81              2819 	dec	sp
   0A51 D0 01              2820 	pop	ar1
   0A53 D0 00              2821 	pop	ar0
                           2822 ;	main1.c:290: while (buffAdd < 20)
                           2823 ;	genAssign
   0A55 90s19r74           2824 	mov	dptr,#_main_b0chr_1_1
   0A58 E0                 2825 	movx	a,@dptr
   0A59 F5*0E              2826 	mov	_main_sloc5_1_0,a
   0A5B A3                 2827 	inc	dptr
   0A5C E0                 2828 	movx	a,@dptr
   0A5D F5*0F              2829 	mov	(_main_sloc5_1_0 + 1),a
                           2830 ;	genAssign
   0A5F 7C 00              2831 	mov	r4,#0x00
   0A61 7D 00              2832 	mov	r5,#0x00
   0A63                    2833 00160$:
                           2834 ;	genCmpLt
                           2835 ;	genCmp
   0A63 C3                 2836 	clr	c
   0A64 EC                 2837 	mov	a,r4
   0A65 94 14              2838 	subb	a,#0x14
   0A67 ED                 2839 	mov	a,r5
   0A68 94 00              2840 	subb	a,#0x00
                           2841 ;	genIfxJump
   0A6A 40 03              2842 	jc	00297$
   0A6C 02s0CrAE           2843 	ljmp	00162$
   0A6F                    2844 00297$:
                           2845 ;	main1.c:292: if ((buffAddress[buffAdd]) != 0)
                           2846 ;	genIpush
   0A6F C0 00              2847 	push	ar0
   0A71 C0 01              2848 	push	ar1
                           2849 ;	genAssign
   0A73 90s00r00           2850 	mov	dptr,#__mulint_PARM_2
   0A76 74 03              2851 	mov	a,#0x03
   0A78 F0                 2852 	movx	@dptr,a
   0A79 E4                 2853 	clr	a
   0A7A A3                 2854 	inc	dptr
   0A7B F0                 2855 	movx	@dptr,a
                           2856 ;	genCall
   0A7C 8C 82              2857 	mov	dpl,r4
   0A7E 8D 83              2858 	mov	dph,r5
   0A80 C0 04              2859 	push	ar4
   0A82 C0 05              2860 	push	ar5
   0A84 C0 00              2861 	push	ar0
   0A86 C0 01              2862 	push	ar1
   0A88 12s00r00           2863 	lcall	__mulint
   0A8B AE 82              2864 	mov	r6,dpl
   0A8D AF 83              2865 	mov	r7,dph
   0A8F D0 01              2866 	pop	ar1
   0A91 D0 00              2867 	pop	ar0
   0A93 D0 05              2868 	pop	ar5
   0A95 D0 04              2869 	pop	ar4
                           2870 ;	genPlus
                           2871 ;	Peephole 236.g	used r6 instead of ar6
   0A97 EE                 2872 	mov	a,r6
   0A98 24r3D              2873 	add	a,#_main_buffAddress_1_1
   0A9A FE                 2874 	mov	r6,a
                           2875 ;	Peephole 236.g	used r7 instead of ar7
   0A9B EF                 2876 	mov	a,r7
   0A9C 34s18              2877 	addc	a,#(_main_buffAddress_1_1 >> 8)
   0A9E FF                 2878 	mov	r7,a
                           2879 ;	genPointerGet
                           2880 ;	genFarPointerGet
   0A9F 8E 82              2881 	mov	dpl,r6
   0AA1 8F 83              2882 	mov	dph,r7
   0AA3 E0                 2883 	movx	a,@dptr
   0AA4 F8                 2884 	mov	r0,a
   0AA5 A3                 2885 	inc	dptr
   0AA6 E0                 2886 	movx	a,@dptr
   0AA7 F9                 2887 	mov	r1,a
   0AA8 A3                 2888 	inc	dptr
   0AA9 E0                 2889 	movx	a,@dptr
   0AAA FA                 2890 	mov	r2,a
                           2891 ;	genCmpEq
                           2892 ;	gencjne
                           2893 ;	gencjneshort
                           2894 ;	Peephole 241.b	optimized compare
   0AAB E4                 2895 	clr	a
   0AAC B8 00 07           2896 	cjne	r0,#0x00,00298$
   0AAF B9 00 04           2897 	cjne	r1,#0x00,00298$
   0AB2 BA 00 01           2898 	cjne	r2,#0x00,00298$
   0AB5 04                 2899 	inc	a
   0AB6                    2900 00298$:
                           2901 ;	Peephole 300	removed redundant label 00299$
                           2902 ;	genIpop
   0AB6 D0 01              2903 	pop	ar1
   0AB8 D0 00              2904 	pop	ar0
                           2905 ;	genIfx
                           2906 ;	genIfxJump
   0ABA 60 03              2907 	jz	00300$
   0ABC 02s0CrA6           2908 	ljmp	00159$
   0ABF                    2909 00300$:
                           2910 ;	main1.c:294: printf_tiny("\r\n\t\t\tBuffer %d Details\t\t\t\n ",buffAdd);
                           2911 ;	genIpush
   0ABF C0 00              2912 	push	ar0
   0AC1 C0 01              2913 	push	ar1
                           2914 ;	genIpush
   0AC3 C0 04              2915 	push	ar4
   0AC5 C0 05              2916 	push	ar5
   0AC7 C0 06              2917 	push	ar6
   0AC9 C0 07              2918 	push	ar7
   0ACB C0 00              2919 	push	ar0
   0ACD C0 01              2920 	push	ar1
   0ACF C0 04              2921 	push	ar4
   0AD1 C0 05              2922 	push	ar5
                           2923 ;	genIpush
   0AD3 74rBD              2924 	mov	a,#__str_36
   0AD5 C0 E0              2925 	push	acc
   0AD7 74s05              2926 	mov	a,#(__str_36 >> 8)
   0AD9 C0 E0              2927 	push	acc
                           2928 ;	genCall
   0ADB 12s00r00           2929 	lcall	_printf_tiny
   0ADE E5 81              2930 	mov	a,sp
   0AE0 24 FC              2931 	add	a,#0xfc
   0AE2 F5 81              2932 	mov	sp,a
   0AE4 D0 01              2933 	pop	ar1
   0AE6 D0 00              2934 	pop	ar0
   0AE8 D0 07              2935 	pop	ar7
   0AEA D0 06              2936 	pop	ar6
   0AEC D0 05              2937 	pop	ar5
   0AEE D0 04              2938 	pop	ar4
                           2939 ;	main1.c:295: printf_tiny("\r\n\tBuffer %d start address                  :    %x",buffAdd,(uint16_t)buffAddress[buffAdd]);//print start adress
                           2940 ;	genPointerGet
                           2941 ;	genFarPointerGet
   0AF0 8E 82              2942 	mov	dpl,r6
   0AF2 8F 83              2943 	mov	dph,r7
   0AF4 E0                 2944 	movx	a,@dptr
   0AF5 FA                 2945 	mov	r2,a
   0AF6 A3                 2946 	inc	dptr
   0AF7 E0                 2947 	movx	a,@dptr
   0AF8 FB                 2948 	mov	r3,a
   0AF9 A3                 2949 	inc	dptr
   0AFA E0                 2950 	movx	a,@dptr
   0AFB F8                 2951 	mov	r0,a
                           2952 ;	genCast
                           2953 ;	genIpush
   0AFC C0 04              2954 	push	ar4
   0AFE C0 05              2955 	push	ar5
   0B00 C0 06              2956 	push	ar6
   0B02 C0 07              2957 	push	ar7
   0B04 C0 00              2958 	push	ar0
   0B06 C0 01              2959 	push	ar1
   0B08 C0 02              2960 	push	ar2
   0B0A C0 03              2961 	push	ar3
                           2962 ;	genIpush
   0B0C C0 04              2963 	push	ar4
   0B0E C0 05              2964 	push	ar5
                           2965 ;	genIpush
   0B10 74rD9              2966 	mov	a,#__str_37
   0B12 C0 E0              2967 	push	acc
   0B14 74s05              2968 	mov	a,#(__str_37 >> 8)
   0B16 C0 E0              2969 	push	acc
                           2970 ;	genCall
   0B18 12s00r00           2971 	lcall	_printf_tiny
   0B1B E5 81              2972 	mov	a,sp
   0B1D 24 FA              2973 	add	a,#0xfa
   0B1F F5 81              2974 	mov	sp,a
   0B21 D0 01              2975 	pop	ar1
   0B23 D0 00              2976 	pop	ar0
   0B25 D0 07              2977 	pop	ar7
   0B27 D0 06              2978 	pop	ar6
   0B29 D0 05              2979 	pop	ar5
   0B2B D0 04              2980 	pop	ar4
                           2981 ;	main1.c:296: printf_tiny("\r\n\tBuffer %d end Address                    :    %x",buffAdd,(uint16_t)(buffAddress[buffAdd]+buffsize[buffAdd]));//ending address
                           2982 ;	genPointerGet
                           2983 ;	genFarPointerGet
   0B2D 8E 82              2984 	mov	dpl,r6
   0B2F 8F 83              2985 	mov	dph,r7
   0B31 E0                 2986 	movx	a,@dptr
   0B32 FE                 2987 	mov	r6,a
   0B33 A3                 2988 	inc	dptr
   0B34 E0                 2989 	movx	a,@dptr
   0B35 FF                 2990 	mov	r7,a
   0B36 A3                 2991 	inc	dptr
   0B37 E0                 2992 	movx	a,@dptr
   0B38 FA                 2993 	mov	r2,a
                           2994 ;	genLeftShift
                           2995 ;	genLeftShiftLiteral
                           2996 ;	genlshTwo
   0B39 8C 03              2997 	mov	ar3,r4
   0B3B ED                 2998 	mov	a,r5
   0B3C CB                 2999 	xch	a,r3
   0B3D 25 E0              3000 	add	a,acc
   0B3F CB                 3001 	xch	a,r3
   0B40 33                 3002 	rlc	a
   0B41 F8                 3003 	mov	r0,a
                           3004 ;	genPlus
                           3005 ;	Peephole 236.g	used r3 instead of ar3
   0B42 EB                 3006 	mov	a,r3
   0B43 24r75              3007 	add	a,#_main_buffsize_1_1
   0B45 F5*0B              3008 	mov	_main_sloc4_1_0,a
                           3009 ;	Peephole 236.g	used r0 instead of ar0
   0B47 E8                 3010 	mov	a,r0
   0B48 34s17              3011 	addc	a,#(_main_buffsize_1_1 >> 8)
   0B4A F5*0C              3012 	mov	(_main_sloc4_1_0 + 1),a
                           3013 ;	genPointerGet
                           3014 ;	genFarPointerGet
   0B4C 85*0B 82           3015 	mov	dpl,_main_sloc4_1_0
   0B4F 85*0C 83           3016 	mov	dph,(_main_sloc4_1_0 + 1)
   0B52 E0                 3017 	movx	a,@dptr
   0B53 FB                 3018 	mov	r3,a
   0B54 A3                 3019 	inc	dptr
   0B55 E0                 3020 	movx	a,@dptr
   0B56 F8                 3021 	mov	r0,a
                           3022 ;	genPlus
                           3023 ;	Peephole 236.g	used r3 instead of ar3
   0B57 EB                 3024 	mov	a,r3
                           3025 ;	Peephole 236.a	used r6 instead of ar6
   0B58 2E                 3026 	add	a,r6
   0B59 FE                 3027 	mov	r6,a
                           3028 ;	Peephole 236.g	used r0 instead of ar0
   0B5A E8                 3029 	mov	a,r0
                           3030 ;	Peephole 236.b	used r7 instead of ar7
   0B5B 3F                 3031 	addc	a,r7
   0B5C FF                 3032 	mov	r7,a
                           3033 ;	genCast
                           3034 ;	genIpush
   0B5D C0 04              3035 	push	ar4
   0B5F C0 05              3036 	push	ar5
   0B61 C0 00              3037 	push	ar0
   0B63 C0 01              3038 	push	ar1
   0B65 C0 06              3039 	push	ar6
   0B67 C0 07              3040 	push	ar7
                           3041 ;	genIpush
   0B69 C0 04              3042 	push	ar4
   0B6B C0 05              3043 	push	ar5
                           3044 ;	genIpush
   0B6D 74r0D              3045 	mov	a,#__str_38
   0B6F C0 E0              3046 	push	acc
   0B71 74s06              3047 	mov	a,#(__str_38 >> 8)
   0B73 C0 E0              3048 	push	acc
                           3049 ;	genCall
   0B75 12s00r00           3050 	lcall	_printf_tiny
   0B78 E5 81              3051 	mov	a,sp
   0B7A 24 FA              3052 	add	a,#0xfa
   0B7C F5 81              3053 	mov	sp,a
   0B7E D0 01              3054 	pop	ar1
   0B80 D0 00              3055 	pop	ar0
   0B82 D0 05              3056 	pop	ar5
   0B84 D0 04              3057 	pop	ar4
                           3058 ;	main1.c:297: printf_tiny("\r\n\tSize of buffer %d                        :    %d",buffAdd,buffsize[buffAdd]);//Size
                           3059 ;	genPointerGet
                           3060 ;	genFarPointerGet
   0B86 85*0B 82           3061 	mov	dpl,_main_sloc4_1_0
   0B89 85*0C 83           3062 	mov	dph,(_main_sloc4_1_0 + 1)
   0B8C E0                 3063 	movx	a,@dptr
   0B8D FA                 3064 	mov	r2,a
   0B8E A3                 3065 	inc	dptr
   0B8F E0                 3066 	movx	a,@dptr
   0B90 FB                 3067 	mov	r3,a
                           3068 ;	genIpush
   0B91 C0 04              3069 	push	ar4
   0B93 C0 05              3070 	push	ar5
   0B95 C0 00              3071 	push	ar0
   0B97 C0 01              3072 	push	ar1
   0B99 C0 02              3073 	push	ar2
   0B9B C0 03              3074 	push	ar3
                           3075 ;	genIpush
   0B9D C0 04              3076 	push	ar4
   0B9F C0 05              3077 	push	ar5
                           3078 ;	genIpush
   0BA1 74r41              3079 	mov	a,#__str_39
   0BA3 C0 E0              3080 	push	acc
   0BA5 74s06              3081 	mov	a,#(__str_39 >> 8)
   0BA7 C0 E0              3082 	push	acc
                           3083 ;	genCall
   0BA9 12s00r00           3084 	lcall	_printf_tiny
   0BAC E5 81              3085 	mov	a,sp
   0BAE 24 FA              3086 	add	a,#0xfa
   0BB0 F5 81              3087 	mov	sp,a
   0BB2 D0 01              3088 	pop	ar1
   0BB4 D0 00              3089 	pop	ar0
   0BB6 D0 05              3090 	pop	ar5
   0BB8 D0 04              3091 	pop	ar4
                           3092 ;	main1.c:300: if(buffAdd == 0){
                           3093 ;	genIpop
   0BBA D0 01              3094 	pop	ar1
   0BBC D0 00              3095 	pop	ar0
                           3096 ;	genIfx
   0BBE EC                 3097 	mov	a,r4
   0BBF 4D                 3098 	orl	a,r5
                           3099 ;	genIfxJump
                           3100 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0BC0 70 0C              3101 	jnz	00156$
                           3102 ;	Peephole 300	removed redundant label 00301$
                           3103 ;	main1.c:301: counter = b0chr; // put number of characters in counter
                           3104 ;	genAssign
   0BC2 90s19r78           3105 	mov	dptr,#_main_counter_1_1
   0BC5 E5*0E              3106 	mov	a,_main_sloc5_1_0
   0BC7 F0                 3107 	movx	@dptr,a
   0BC8 A3                 3108 	inc	dptr
   0BC9 E5*0F              3109 	mov	a,(_main_sloc5_1_0 + 1)
   0BCB F0                 3110 	movx	@dptr,a
                           3111 ;	Peephole 112.b	changed ljmp to sjmp
   0BCC 80 07              3112 	sjmp	00157$
   0BCE                    3113 00156$:
                           3114 ;	main1.c:304: counter = 0;
                           3115 ;	genAssign
   0BCE 90s19r78           3116 	mov	dptr,#_main_counter_1_1
   0BD1 E4                 3117 	clr	a
   0BD2 F0                 3118 	movx	@dptr,a
   0BD3 A3                 3119 	inc	dptr
   0BD4 F0                 3120 	movx	@dptr,a
   0BD5                    3121 00157$:
                           3122 ;	main1.c:305: printf_tiny("\t\r\n");
                           3123 ;	genIpush
   0BD5 C0 04              3124 	push	ar4
   0BD7 C0 05              3125 	push	ar5
   0BD9 C0 00              3126 	push	ar0
   0BDB C0 01              3127 	push	ar1
   0BDD 74r75              3128 	mov	a,#__str_40
   0BDF C0 E0              3129 	push	acc
   0BE1 74s06              3130 	mov	a,#(__str_40 >> 8)
   0BE3 C0 E0              3131 	push	acc
                           3132 ;	genCall
   0BE5 12s00r00           3133 	lcall	_printf_tiny
   0BE8 15 81              3134 	dec	sp
   0BEA 15 81              3135 	dec	sp
   0BEC D0 01              3136 	pop	ar1
   0BEE D0 00              3137 	pop	ar0
   0BF0 D0 05              3138 	pop	ar5
   0BF2 D0 04              3139 	pop	ar4
                           3140 ;	main1.c:306: printf_tiny("\t\r\nnumber of characters in buffer %d                   :    %d", buffAdd,counter);//NUMBER OF CONTENTS
                           3141 ;	genAssign
   0BF4 90s19r78           3142 	mov	dptr,#_main_counter_1_1
   0BF7 E0                 3143 	movx	a,@dptr
   0BF8 FA                 3144 	mov	r2,a
   0BF9 A3                 3145 	inc	dptr
   0BFA E0                 3146 	movx	a,@dptr
   0BFB FB                 3147 	mov	r3,a
                           3148 ;	genIpush
   0BFC C0 02              3149 	push	ar2
   0BFE C0 03              3150 	push	ar3
   0C00 C0 04              3151 	push	ar4
   0C02 C0 05              3152 	push	ar5
   0C04 C0 00              3153 	push	ar0
   0C06 C0 01              3154 	push	ar1
   0C08 C0 02              3155 	push	ar2
   0C0A C0 03              3156 	push	ar3
                           3157 ;	genIpush
   0C0C C0 04              3158 	push	ar4
   0C0E C0 05              3159 	push	ar5
                           3160 ;	genIpush
   0C10 74r79              3161 	mov	a,#__str_41
   0C12 C0 E0              3162 	push	acc
   0C14 74s06              3163 	mov	a,#(__str_41 >> 8)
   0C16 C0 E0              3164 	push	acc
                           3165 ;	genCall
   0C18 12s00r00           3166 	lcall	_printf_tiny
   0C1B E5 81              3167 	mov	a,sp
   0C1D 24 FA              3168 	add	a,#0xfa
   0C1F F5 81              3169 	mov	sp,a
   0C21 D0 01              3170 	pop	ar1
   0C23 D0 00              3171 	pop	ar0
   0C25 D0 05              3172 	pop	ar5
   0C27 D0 04              3173 	pop	ar4
   0C29 D0 03              3174 	pop	ar3
   0C2B D0 02              3175 	pop	ar2
                           3176 ;	main1.c:307: printf_tiny("\t\r\nFree space in buffer %d                             :    %d",buffAdd,(buffsize[buffAdd] - counter));printf_tiny("\r\n");//FREE SPACE IN BUFFER
                           3177 ;	genPointerGet
                           3178 ;	genFarPointerGet
   0C2D 85*0B 82           3179 	mov	dpl,_main_sloc4_1_0
   0C30 85*0C 83           3180 	mov	dph,(_main_sloc4_1_0 + 1)
   0C33 E0                 3181 	movx	a,@dptr
   0C34 FE                 3182 	mov	r6,a
   0C35 A3                 3183 	inc	dptr
   0C36 E0                 3184 	movx	a,@dptr
   0C37 FF                 3185 	mov	r7,a
                           3186 ;	genMinus
   0C38 EE                 3187 	mov	a,r6
   0C39 C3                 3188 	clr	c
                           3189 ;	Peephole 236.l	used r2 instead of ar2
   0C3A 9A                 3190 	subb	a,r2
   0C3B FA                 3191 	mov	r2,a
   0C3C EF                 3192 	mov	a,r7
                           3193 ;	Peephole 236.l	used r3 instead of ar3
   0C3D 9B                 3194 	subb	a,r3
   0C3E FB                 3195 	mov	r3,a
                           3196 ;	genIpush
   0C3F C0 04              3197 	push	ar4
   0C41 C0 05              3198 	push	ar5
   0C43 C0 00              3199 	push	ar0
   0C45 C0 01              3200 	push	ar1
   0C47 C0 02              3201 	push	ar2
   0C49 C0 03              3202 	push	ar3
                           3203 ;	genIpush
   0C4B C0 04              3204 	push	ar4
   0C4D C0 05              3205 	push	ar5
                           3206 ;	genIpush
   0C4F 74rB8              3207 	mov	a,#__str_42
   0C51 C0 E0              3208 	push	acc
   0C53 74s06              3209 	mov	a,#(__str_42 >> 8)
   0C55 C0 E0              3210 	push	acc
                           3211 ;	genCall
   0C57 12s00r00           3212 	lcall	_printf_tiny
   0C5A E5 81              3213 	mov	a,sp
   0C5C 24 FA              3214 	add	a,#0xfa
   0C5E F5 81              3215 	mov	sp,a
   0C60 D0 01              3216 	pop	ar1
   0C62 D0 00              3217 	pop	ar0
   0C64 D0 05              3218 	pop	ar5
   0C66 D0 04              3219 	pop	ar4
                           3220 ;	genIpush
   0C68 C0 04              3221 	push	ar4
   0C6A C0 05              3222 	push	ar5
   0C6C C0 00              3223 	push	ar0
   0C6E C0 01              3224 	push	ar1
   0C70 74rF7              3225 	mov	a,#__str_43
   0C72 C0 E0              3226 	push	acc
   0C74 74s06              3227 	mov	a,#(__str_43 >> 8)
   0C76 C0 E0              3228 	push	acc
                           3229 ;	genCall
   0C78 12s00r00           3230 	lcall	_printf_tiny
   0C7B 15 81              3231 	dec	sp
   0C7D 15 81              3232 	dec	sp
   0C7F D0 01              3233 	pop	ar1
   0C81 D0 00              3234 	pop	ar0
   0C83 D0 05              3235 	pop	ar5
   0C85 D0 04              3236 	pop	ar4
                           3237 ;	main1.c:308: printf_tiny("\r\n");
                           3238 ;	genIpush
   0C87 C0 04              3239 	push	ar4
   0C89 C0 05              3240 	push	ar5
   0C8B C0 00              3241 	push	ar0
   0C8D C0 01              3242 	push	ar1
   0C8F 74rF7              3243 	mov	a,#__str_43
   0C91 C0 E0              3244 	push	acc
   0C93 74s06              3245 	mov	a,#(__str_43 >> 8)
   0C95 C0 E0              3246 	push	acc
                           3247 ;	genCall
   0C97 12s00r00           3248 	lcall	_printf_tiny
   0C9A 15 81              3249 	dec	sp
   0C9C 15 81              3250 	dec	sp
   0C9E D0 01              3251 	pop	ar1
   0CA0 D0 00              3252 	pop	ar0
   0CA2 D0 05              3253 	pop	ar5
   0CA4 D0 04              3254 	pop	ar4
   0CA6                    3255 00159$:
                           3256 ;	main1.c:310: buffAdd++;
                           3257 ;	genPlus
                           3258 ;     genPlusIncr
   0CA6 0C                 3259 	inc	r4
   0CA7 BC 00 01           3260 	cjne	r4,#0x00,00302$
   0CAA 0D                 3261 	inc	r5
   0CAB                    3262 00302$:
   0CAB 02s0Ar63           3263 	ljmp	00160$
   0CAE                    3264 00162$:
                           3265 ;	main1.c:312: printf_tiny("\r\n");
                           3266 ;	genIpush
   0CAE C0 00              3267 	push	ar0
   0CB0 C0 01              3268 	push	ar1
   0CB2 74rF7              3269 	mov	a,#__str_43
   0CB4 C0 E0              3270 	push	acc
   0CB6 74s06              3271 	mov	a,#(__str_43 >> 8)
   0CB8 C0 E0              3272 	push	acc
                           3273 ;	genCall
   0CBA 12s00r00           3274 	lcall	_printf_tiny
   0CBD 15 81              3275 	dec	sp
   0CBF 15 81              3276 	dec	sp
   0CC1 D0 01              3277 	pop	ar1
   0CC3 D0 00              3278 	pop	ar0
                           3279 ;	main1.c:313: ncnt=b0chr;
                           3280 ;	genAssign
   0CC5 90s19r74           3281 	mov	dptr,#_main_b0chr_1_1
   0CC8 E0                 3282 	movx	a,@dptr
   0CC9 FA                 3283 	mov	r2,a
   0CCA A3                 3284 	inc	dptr
   0CCB E0                 3285 	movx	a,@dptr
   0CCC FB                 3286 	mov	r3,a
                           3287 ;	main1.c:314: printf_tiny("\r\n\tNumber of characters received till last'?'   : %d\n", ncnt);
                           3288 ;	genIpush
   0CCD C0 02              3289 	push	ar2
   0CCF C0 03              3290 	push	ar3
   0CD1 C0 00              3291 	push	ar0
   0CD3 C0 01              3292 	push	ar1
   0CD5 C0 02              3293 	push	ar2
   0CD7 C0 03              3294 	push	ar3
                           3295 ;	genIpush
   0CD9 74rFA              3296 	mov	a,#__str_44
   0CDB C0 E0              3297 	push	acc
   0CDD 74s06              3298 	mov	a,#(__str_44 >> 8)
   0CDF C0 E0              3299 	push	acc
                           3300 ;	genCall
   0CE1 12s00r00           3301 	lcall	_printf_tiny
   0CE4 E5 81              3302 	mov	a,sp
   0CE6 24 FC              3303 	add	a,#0xfc
   0CE8 F5 81              3304 	mov	sp,a
   0CEA D0 01              3305 	pop	ar1
   0CEC D0 00              3306 	pop	ar0
   0CEE D0 03              3307 	pop	ar3
   0CF0 D0 02              3308 	pop	ar2
                           3309 ;	main1.c:315: printf_tiny("\r--------------------------------------------------------------------------------\n");
                           3310 ;	genIpush
   0CF2 C0 02              3311 	push	ar2
   0CF4 C0 03              3312 	push	ar3
   0CF6 C0 00              3313 	push	ar0
   0CF8 C0 01              3314 	push	ar1
   0CFA 74r30              3315 	mov	a,#__str_45
   0CFC C0 E0              3316 	push	acc
   0CFE 74s07              3317 	mov	a,#(__str_45 >> 8)
   0D00 C0 E0              3318 	push	acc
                           3319 ;	genCall
   0D02 12s00r00           3320 	lcall	_printf_tiny
   0D05 15 81              3321 	dec	sp
   0D07 15 81              3322 	dec	sp
   0D09 D0 01              3323 	pop	ar1
   0D0B D0 00              3324 	pop	ar0
   0D0D D0 03              3325 	pop	ar3
   0D0F D0 02              3326 	pop	ar2
                           3327 ;	main1.c:318: if(b0chr!=0)
                           3328 ;	genCmpEq
                           3329 ;	gencjneshort
   0D11 BA 00 06           3330 	cjne	r2,#0x00,00303$
   0D14 BB 00 03           3331 	cjne	r3,#0x00,00303$
   0D17 02s0Er69           3332 	ljmp	00171$
   0D1A                    3333 00303$:
                           3334 ;	main1.c:320: printf_tiny("\r\n\tcontents of buffer 0:\n   ");
                           3335 ;	genIpush
   0D1A C0 02              3336 	push	ar2
   0D1C C0 03              3337 	push	ar3
   0D1E C0 00              3338 	push	ar0
   0D20 C0 01              3339 	push	ar1
   0D22 74r83              3340 	mov	a,#__str_46
   0D24 C0 E0              3341 	push	acc
   0D26 74s07              3342 	mov	a,#(__str_46 >> 8)
   0D28 C0 E0              3343 	push	acc
                           3344 ;	genCall
   0D2A 12s00r00           3345 	lcall	_printf_tiny
   0D2D 15 81              3346 	dec	sp
   0D2F 15 81              3347 	dec	sp
   0D31 D0 01              3348 	pop	ar1
   0D33 D0 00              3349 	pop	ar0
   0D35 D0 03              3350 	pop	ar3
   0D37 D0 02              3351 	pop	ar2
                           3352 ;	main1.c:322: bData=0;
                           3353 ;	genAssign
   0D39 90s19r76           3354 	mov	dptr,#_main_bData_1_1
   0D3C E4                 3355 	clr	a
   0D3D F0                 3356 	movx	@dptr,a
   0D3E A3                 3357 	inc	dptr
   0D3F F0                 3358 	movx	@dptr,a
                           3359 ;	main1.c:324: while( ((buffAdd*64)+bData) < b0chr)// for printing 64 characters
                           3360 ;	genAssign
   0D40 8A*0B              3361 	mov	_main_sloc4_1_0,r2
   0D42 8B*0C              3362 	mov	(_main_sloc4_1_0 + 1),r3
                           3363 ;	genAssign
   0D44 8A*0E              3364 	mov	_main_sloc5_1_0,r2
   0D46 8B*0F              3365 	mov	(_main_sloc5_1_0 + 1),r3
                           3366 ;	genAssign
   0D48 7E 00              3367 	mov	r6,#0x00
   0D4A 7F 00              3368 	mov	r7,#0x00
   0D4C                    3369 00167$:
                           3370 ;	genIpush
   0D4C C0 00              3371 	push	ar0
   0D4E C0 01              3372 	push	ar1
                           3373 ;	genLeftShift
                           3374 ;	genLeftShiftLiteral
                           3375 ;	genlshTwo
   0D50 8E 00              3376 	mov	ar0,r6
   0D52 EF                 3377 	mov	a,r7
   0D53 54 03              3378 	anl	a,#0x03
   0D55 A2 E0              3379 	mov	c,acc.0
   0D57 C8                 3380 	xch	a,r0
   0D58 13                 3381 	rrc	a
   0D59 C8                 3382 	xch	a,r0
   0D5A 13                 3383 	rrc	a
   0D5B A2 E0              3384 	mov	c,acc.0
   0D5D C8                 3385 	xch	a,r0
   0D5E 13                 3386 	rrc	a
   0D5F C8                 3387 	xch	a,r0
   0D60 13                 3388 	rrc	a
   0D61 C8                 3389 	xch	a,r0
   0D62 F9                 3390 	mov	r1,a
                           3391 ;	genAssign
   0D63 90s19r76           3392 	mov	dptr,#_main_bData_1_1
   0D66 E0                 3393 	movx	a,@dptr
   0D67 FA                 3394 	mov	r2,a
   0D68 A3                 3395 	inc	dptr
   0D69 E0                 3396 	movx	a,@dptr
   0D6A FB                 3397 	mov	r3,a
                           3398 ;	genPlus
                           3399 ;	Peephole 236.g	used r2 instead of ar2
   0D6B EA                 3400 	mov	a,r2
                           3401 ;	Peephole 236.a	used r0 instead of ar0
   0D6C 28                 3402 	add	a,r0
   0D6D F8                 3403 	mov	r0,a
                           3404 ;	Peephole 236.g	used r3 instead of ar3
   0D6E EB                 3405 	mov	a,r3
                           3406 ;	Peephole 236.b	used r1 instead of ar1
   0D6F 39                 3407 	addc	a,r1
   0D70 F9                 3408 	mov	r1,a
                           3409 ;	genCmpLt
                           3410 ;	genCmp
   0D71 C3                 3411 	clr	c
   0D72 E8                 3412 	mov	a,r0
   0D73 95*0E              3413 	subb	a,_main_sloc5_1_0
   0D75 E9                 3414 	mov	a,r1
   0D76 95*0F              3415 	subb	a,(_main_sloc5_1_0 + 1)
                           3416 ;	genIpop
                           3417 ;	genIfx
                           3418 ;	genIfxJump
                           3419 ;	Peephole 129.c	optimized condition
   0D78 D0 01              3420 	pop	ar1
   0D7A D0 00              3421 	pop	ar0
   0D7C 40 03              3422 	jc	00304$
   0D7E 02s0Er5F           3423 	ljmp	00169$
   0D81                    3424 00304$:
                           3425 ;	main1.c:326: bData=0;
                           3426 ;	genAssign
   0D81 90s19r76           3427 	mov	dptr,#_main_bData_1_1
   0D84 E4                 3428 	clr	a
   0D85 F0                 3429 	movx	@dptr,a
   0D86 A3                 3430 	inc	dptr
   0D87 F0                 3431 	movx	@dptr,a
                           3432 ;	main1.c:327: while((bData<64)&&(((buffAdd*64)+bData)<b0chr))
   0D88                    3433 00164$:
                           3434 ;	genAssign
   0D88 90s19r76           3435 	mov	dptr,#_main_bData_1_1
   0D8B E0                 3436 	movx	a,@dptr
   0D8C FA                 3437 	mov	r2,a
   0D8D A3                 3438 	inc	dptr
   0D8E E0                 3439 	movx	a,@dptr
   0D8F FB                 3440 	mov	r3,a
                           3441 ;	genCmpLt
                           3442 ;	genCmp
   0D90 C3                 3443 	clr	c
   0D91 EA                 3444 	mov	a,r2
   0D92 94 40              3445 	subb	a,#0x40
   0D94 EB                 3446 	mov	a,r3
   0D95 94 00              3447 	subb	a,#0x00
                           3448 ;	genIfxJump
   0D97 40 03              3449 	jc	00305$
   0D99 02s0Er38           3450 	ljmp	00166$
   0D9C                    3451 00305$:
                           3452 ;	genIpush
   0D9C C0 00              3453 	push	ar0
   0D9E C0 01              3454 	push	ar1
                           3455 ;	genLeftShift
                           3456 ;	genLeftShiftLiteral
                           3457 ;	genlshTwo
   0DA0 8E 02              3458 	mov	ar2,r6
   0DA2 EF                 3459 	mov	a,r7
   0DA3 54 03              3460 	anl	a,#0x03
   0DA5 A2 E0              3461 	mov	c,acc.0
   0DA7 CA                 3462 	xch	a,r2
   0DA8 13                 3463 	rrc	a
   0DA9 CA                 3464 	xch	a,r2
   0DAA 13                 3465 	rrc	a
   0DAB A2 E0              3466 	mov	c,acc.0
   0DAD CA                 3467 	xch	a,r2
   0DAE 13                 3468 	rrc	a
   0DAF CA                 3469 	xch	a,r2
   0DB0 13                 3470 	rrc	a
   0DB1 CA                 3471 	xch	a,r2
   0DB2 FB                 3472 	mov	r3,a
                           3473 ;	genAssign
   0DB3 90s19r76           3474 	mov	dptr,#_main_bData_1_1
   0DB6 E0                 3475 	movx	a,@dptr
   0DB7 F8                 3476 	mov	r0,a
   0DB8 A3                 3477 	inc	dptr
   0DB9 E0                 3478 	movx	a,@dptr
   0DBA F9                 3479 	mov	r1,a
                           3480 ;	genPlus
                           3481 ;	Peephole 236.g	used r0 instead of ar0
   0DBB E8                 3482 	mov	a,r0
                           3483 ;	Peephole 236.a	used r2 instead of ar2
   0DBC 2A                 3484 	add	a,r2
   0DBD FA                 3485 	mov	r2,a
                           3486 ;	Peephole 236.g	used r1 instead of ar1
   0DBE E9                 3487 	mov	a,r1
                           3488 ;	Peephole 236.b	used r3 instead of ar3
   0DBF 3B                 3489 	addc	a,r3
   0DC0 FB                 3490 	mov	r3,a
                           3491 ;	genCmpLt
                           3492 ;	genCmp
   0DC1 C3                 3493 	clr	c
   0DC2 EA                 3494 	mov	a,r2
   0DC3 95*0B              3495 	subb	a,_main_sloc4_1_0
   0DC5 EB                 3496 	mov	a,r3
   0DC6 95*0C              3497 	subb	a,(_main_sloc4_1_0 + 1)
   0DC8 E4                 3498 	clr	a
   0DC9 33                 3499 	rlc	a
                           3500 ;	genIpop
   0DCA D0 01              3501 	pop	ar1
   0DCC D0 00              3502 	pop	ar0
                           3503 ;	genIfx
                           3504 ;	genIfxJump
                           3505 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0DCE 60 68              3506 	jz	00166$
                           3507 ;	Peephole 300	removed redundant label 00306$
                           3508 ;	main1.c:330: putchar(*(buffer0 + (buffAdd*64) + bData));
                           3509 ;	genIpush
   0DD0 C0 00              3510 	push	ar0
   0DD2 C0 01              3511 	push	ar1
                           3512 ;	genCast
   0DD4 8E 02              3513 	mov	ar2,r6
                           3514 ;	genLeftShift
                           3515 ;	genLeftShiftLiteral
                           3516 ;	genlshOne
   0DD6 EA                 3517 	mov	a,r2
   0DD7 03                 3518 	rr	a
   0DD8 03                 3519 	rr	a
   0DD9 54 C0              3520 	anl	a,#0xc0
   0DDB FA                 3521 	mov	r2,a
                           3522 ;	genLeftShift
                           3523 ;	genLeftShiftLiteral
                           3524 ;	genlshTwo
                           3525 ;	Peephole 181	changed mov to clr
   0DDC E4                 3526 	clr	a
   0DDD CA                 3527 	xch	a,r2
   0DDE 25 E0              3528 	add	a,acc
   0DE0 CA                 3529 	xch	a,r2
   0DE1 33                 3530 	rlc	a
   0DE2 FB                 3531 	mov	r3,a
                           3532 ;	genPlus
                           3533 ;	Peephole 236.g	used r2 instead of ar2
   0DE3 EA                 3534 	mov	a,r2
   0DE4 25*11              3535 	add	a,_main_sloc6_1_0
   0DE6 FA                 3536 	mov	r2,a
                           3537 ;	Peephole 236.g	used r3 instead of ar3
   0DE7 EB                 3538 	mov	a,r3
   0DE8 35*12              3539 	addc	a,(_main_sloc6_1_0 + 1)
   0DEA FB                 3540 	mov	r3,a
   0DEB A8*13              3541 	mov	r0,(_main_sloc6_1_0 + 2)
                           3542 ;	genAssign
   0DED 90s19r76           3543 	mov	dptr,#_main_bData_1_1
   0DF0 E0                 3544 	movx	a,@dptr
   0DF1 F9                 3545 	mov	r1,a
   0DF2 A3                 3546 	inc	dptr
   0DF3 E0                 3547 	movx	a,@dptr
                           3548 ;	genLeftShift
                           3549 ;	genLeftShiftLiteral
                           3550 ;	genlshTwo
   0DF4 FC                 3551 	mov	r4,a
                           3552 ;	Peephole 105	removed redundant mov
   0DF5 C9                 3553 	xch	a,r1
   0DF6 25 E0              3554 	add	a,acc
   0DF8 C9                 3555 	xch	a,r1
   0DF9 33                 3556 	rlc	a
   0DFA FC                 3557 	mov	r4,a
                           3558 ;	genPlus
                           3559 ;	Peephole 236.g	used r1 instead of ar1
   0DFB E9                 3560 	mov	a,r1
                           3561 ;	Peephole 236.a	used r2 instead of ar2
   0DFC 2A                 3562 	add	a,r2
   0DFD FA                 3563 	mov	r2,a
                           3564 ;	Peephole 236.g	used r4 instead of ar4
   0DFE EC                 3565 	mov	a,r4
                           3566 ;	Peephole 236.b	used r3 instead of ar3
   0DFF 3B                 3567 	addc	a,r3
   0E00 FB                 3568 	mov	r3,a
                           3569 ;	genPointerGet
                           3570 ;	genGenPointerGet
   0E01 8A 82              3571 	mov	dpl,r2
   0E03 8B 83              3572 	mov	dph,r3
   0E05 88 F0              3573 	mov	b,r0
   0E07 12s00r00           3574 	lcall	__gptrget
   0E0A FA                 3575 	mov	r2,a
   0E0B A3                 3576 	inc	dptr
   0E0C 12s00r00           3577 	lcall	__gptrget
   0E0F FB                 3578 	mov	r3,a
                           3579 ;	genCast
                           3580 ;	genCall
   0E10 8A 82              3581 	mov	dpl,r2
   0E12 C0 06              3582 	push	ar6
   0E14 C0 07              3583 	push	ar7
   0E16 C0 00              3584 	push	ar0
   0E18 C0 01              3585 	push	ar1
   0E1A 12s0Er9D           3586 	lcall	_putchar
   0E1D D0 01              3587 	pop	ar1
   0E1F D0 00              3588 	pop	ar0
   0E21 D0 07              3589 	pop	ar7
   0E23 D0 06              3590 	pop	ar6
                           3591 ;	main1.c:331: bData++;//Incrementing data counter
                           3592 ;	genPlus
   0E25 90s19r76           3593 	mov	dptr,#_main_bData_1_1
   0E28 E0                 3594 	movx	a,@dptr
   0E29 24 01              3595 	add	a,#0x01
   0E2B F0                 3596 	movx	@dptr,a
   0E2C A3                 3597 	inc	dptr
   0E2D E0                 3598 	movx	a,@dptr
   0E2E 34 00              3599 	addc	a,#0x00
   0E30 F0                 3600 	movx	@dptr,a
                           3601 ;	genIpop
   0E31 D0 01              3602 	pop	ar1
   0E33 D0 00              3603 	pop	ar0
   0E35 02s0Dr88           3604 	ljmp	00164$
   0E38                    3605 00166$:
                           3606 ;	main1.c:333: printf_tiny("\n\r");
                           3607 ;	genIpush
   0E38 C0 06              3608 	push	ar6
   0E3A C0 07              3609 	push	ar7
   0E3C C0 00              3610 	push	ar0
   0E3E C0 01              3611 	push	ar1
   0E40 74r9C              3612 	mov	a,#__str_31
   0E42 C0 E0              3613 	push	acc
   0E44 74s04              3614 	mov	a,#(__str_31 >> 8)
   0E46 C0 E0              3615 	push	acc
                           3616 ;	genCall
   0E48 12s00r00           3617 	lcall	_printf_tiny
   0E4B 15 81              3618 	dec	sp
   0E4D 15 81              3619 	dec	sp
   0E4F D0 01              3620 	pop	ar1
   0E51 D0 00              3621 	pop	ar0
   0E53 D0 07              3622 	pop	ar7
   0E55 D0 06              3623 	pop	ar6
                           3624 ;	main1.c:334: buffAdd++;
                           3625 ;	genPlus
                           3626 ;     genPlusIncr
   0E57 0E                 3627 	inc	r6
   0E58 BE 00 01           3628 	cjne	r6,#0x00,00307$
   0E5B 0F                 3629 	inc	r7
   0E5C                    3630 00307$:
   0E5C 02s0Dr4C           3631 	ljmp	00167$
   0E5F                    3632 00169$:
                           3633 ;	main1.c:337: b0chr = 0;
                           3634 ;	genAssign
   0E5F 90s19r74           3635 	mov	dptr,#_main_b0chr_1_1
   0E62 E4                 3636 	clr	a
   0E63 F0                 3637 	movx	@dptr,a
   0E64 A3                 3638 	inc	dptr
   0E65 F0                 3639 	movx	@dptr,a
   0E66 02s02rEC           3640 	ljmp	00192$
   0E69                    3641 00171$:
                           3642 ;	main1.c:341: printf_tiny("\r\nAS Indicated buffer 0 is empty!\n");
                           3643 ;	genIpush
   0E69 C0 00              3644 	push	ar0
   0E6B C0 01              3645 	push	ar1
   0E6D 74rA0              3646 	mov	a,#__str_47
   0E6F C0 E0              3647 	push	acc
   0E71 74s07              3648 	mov	a,#(__str_47 >> 8)
   0E73 C0 E0              3649 	push	acc
                           3650 ;	genCall
   0E75 12s00r00           3651 	lcall	_printf_tiny
   0E78 15 81              3652 	dec	sp
   0E7A 15 81              3653 	dec	sp
   0E7C D0 01              3654 	pop	ar1
   0E7E D0 00              3655 	pop	ar0
   0E80 02s02rEC           3656 	ljmp	00192$
   0E83                    3657 00174$:
                           3658 ;	main1.c:347: printf_tiny("\r\n not storing \n");//do not store characters other than storage characters
                           3659 ;	genIpush
   0E83 C0 00              3660 	push	ar0
   0E85 C0 01              3661 	push	ar1
   0E87 74rC3              3662 	mov	a,#__str_48
   0E89 C0 E0              3663 	push	acc
   0E8B 74s07              3664 	mov	a,#(__str_48 >> 8)
   0E8D C0 E0              3665 	push	acc
                           3666 ;	genCall
   0E8F 12s00r00           3667 	lcall	_printf_tiny
   0E92 15 81              3668 	dec	sp
   0E94 15 81              3669 	dec	sp
   0E96 D0 01              3670 	pop	ar1
   0E98 D0 00              3671 	pop	ar0
   0E9A 02s02rEC           3672 	ljmp	00192$
                           3673 ;	Peephole 259.b	removed redundant label 00199$ and ret
                           3674 ;
                           3675 ;------------------------------------------------------------
                           3676 ;Allocation info for local variables in function 'putchar'
                           3677 ;------------------------------------------------------------
                           3678 ;c                         Allocated with name '_putchar_c_1_1'
                           3679 ;------------------------------------------------------------
                           3680 ;	main1.c:355: void putchar (char c)
                           3681 ;	-----------------------------------------
                           3682 ;	 function putchar
                           3683 ;	-----------------------------------------
   0E9D                    3684 _putchar:
                           3685 ;	genReceive
   0E9D E5 82              3686 	mov	a,dpl
   0E9F 90s19r7A           3687 	mov	dptr,#_putchar_c_1_1
   0EA2 F0                 3688 	movx	@dptr,a
                           3689 ;	main1.c:357: SBUF = c;  	// load serial port with  transmit value
                           3690 ;	genAssign
   0EA3 90s19r7A           3691 	mov	dptr,#_putchar_c_1_1
   0EA6 E0                 3692 	movx	a,@dptr
   0EA7 F5 99              3693 	mov	_SBUF,a
                           3694 ;	main1.c:358: while (!TI);
   0EA9                    3695 00101$:
                           3696 ;	genIfx
                           3697 ;	genIfxJump
                           3698 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3699 ;	main1.c:359: TI = 0;  	// clear TI flag
                           3700 ;	genAssign
                           3701 ;	Peephole 250.a	using atomic test and clear
   0EA9 10 99 02           3702 	jbc	_TI,00108$
   0EAC 80 FB              3703 	sjmp	00101$
   0EAE                    3704 00108$:
                           3705 ;	Peephole 300	removed redundant label 00104$
   0EAE 22                 3706 	ret
                           3707 ;------------------------------------------------------------
                           3708 ;Allocation info for local variables in function 'getchar'
                           3709 ;------------------------------------------------------------
                           3710 ;r                         Allocated with name '_getchar_r_1_1'
                           3711 ;------------------------------------------------------------
                           3712 ;	main1.c:361: char getchar ()
                           3713 ;	-----------------------------------------
                           3714 ;	 function getchar
                           3715 ;	-----------------------------------------
   0EAF                    3716 _getchar:
                           3717 ;	main1.c:364: while (!RI);
   0EAF                    3718 00101$:
                           3719 ;	genIfx
                           3720 ;	genIfxJump
                           3721 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3722 ;	main1.c:368: RI = 0;
                           3723 ;	genAssign
                           3724 ;	Peephole 250.a	using atomic test and clear
   0EAF 10 98 02           3725 	jbc	_RI,00108$
   0EB2 80 FB              3726 	sjmp	00101$
   0EB4                    3727 00108$:
                           3728 ;	main1.c:369: r = SBUF;	// clear RI flag
                           3729 ;	genAssign
   0EB4 AA 99              3730 	mov	r2,_SBUF
                           3731 ;	main1.c:370: return r;  	// return character from SBUF
                           3732 ;	genRet
   0EB6 8A 82              3733 	mov	dpl,r2
                           3734 ;	Peephole 300	removed redundant label 00104$
   0EB8 22                 3735 	ret
                           3736 ;------------------------------------------------------------
                           3737 ;Allocation info for local variables in function 'get_num'
                           3738 ;------------------------------------------------------------
                           3739 ;str                       Allocated with name '_get_num_str_1_1'
                           3740 ;i                         Allocated with name '_get_num_i_1_1'
                           3741 ;------------------------------------------------------------
                           3742 ;	main1.c:374: int get_num()
                           3743 ;	-----------------------------------------
                           3744 ;	 function get_num
                           3745 ;	-----------------------------------------
   0EB9                    3746 _get_num:
                           3747 ;	main1.c:377: unsigned int i=0;
                           3748 ;	genAssign
   0EB9 90s19r85           3749 	mov	dptr,#_get_num_i_1_1
   0EBC E4                 3750 	clr	a
   0EBD F0                 3751 	movx	@dptr,a
   0EBE A3                 3752 	inc	dptr
   0EBF F0                 3753 	movx	@dptr,a
                           3754 ;	main1.c:378: while(1)
   0EC0                    3755 00112$:
                           3756 ;	main1.c:380: str[i]=getchar();
                           3757 ;	genAssign
   0EC0 90s19r85           3758 	mov	dptr,#_get_num_i_1_1
   0EC3 E0                 3759 	movx	a,@dptr
   0EC4 FA                 3760 	mov	r2,a
   0EC5 A3                 3761 	inc	dptr
   0EC6 E0                 3762 	movx	a,@dptr
   0EC7 FB                 3763 	mov	r3,a
                           3764 ;	genPlus
                           3765 ;	Peephole 236.g	used r2 instead of ar2
   0EC8 EA                 3766 	mov	a,r2
   0EC9 24r7B              3767 	add	a,#_get_num_str_1_1
   0ECB FC                 3768 	mov	r4,a
                           3769 ;	Peephole 236.g	used r3 instead of ar3
   0ECC EB                 3770 	mov	a,r3
   0ECD 34s19              3771 	addc	a,#(_get_num_str_1_1 >> 8)
   0ECF FD                 3772 	mov	r5,a
                           3773 ;	genCall
   0ED0 C0 02              3774 	push	ar2
   0ED2 C0 03              3775 	push	ar3
   0ED4 C0 04              3776 	push	ar4
   0ED6 C0 05              3777 	push	ar5
   0ED8 12s0ErAF           3778 	lcall	_getchar
   0EDB AE 82              3779 	mov	r6,dpl
   0EDD D0 05              3780 	pop	ar5
   0EDF D0 04              3781 	pop	ar4
   0EE1 D0 03              3782 	pop	ar3
   0EE3 D0 02              3783 	pop	ar2
                           3784 ;	genPointerSet
                           3785 ;     genFarPointerSet
   0EE5 8C 82              3786 	mov	dpl,r4
   0EE7 8D 83              3787 	mov	dph,r5
   0EE9 EE                 3788 	mov	a,r6
   0EEA F0                 3789 	movx	@dptr,a
                           3790 ;	main1.c:381: if(str[i]=='\r')
                           3791 ;	genCmpEq
                           3792 ;	gencjneshort
                           3793 ;	Peephole 112.b	changed ljmp to sjmp
                           3794 ;	Peephole 198.b	optimized misc jump sequence
   0EEB BE 0D 15           3795 	cjne	r6,#0x0D,00109$
                           3796 ;	Peephole 200.b	removed redundant sjmp
                           3797 ;	Peephole 300	removed redundant label 00121$
                           3798 ;	Peephole 300	removed redundant label 00122$
                           3799 ;	main1.c:383: str[i]='\0';
                           3800 ;	genPointerSet
                           3801 ;     genFarPointerSet
   0EEE 8C 82              3802 	mov	dpl,r4
   0EF0 8D 83              3803 	mov	dph,r5
                           3804 ;	Peephole 181	changed mov to clr
   0EF2 E4                 3805 	clr	a
   0EF3 F0                 3806 	movx	@dptr,a
                           3807 ;	main1.c:384: putchar('\n');
                           3808 ;	genCall
   0EF4 75 82 0A           3809 	mov	dpl,#0x0A
   0EF7 12s0Er9D           3810 	lcall	_putchar
                           3811 ;	main1.c:385: putchar('\r');
                           3812 ;	genCall
   0EFA 75 82 0D           3813 	mov	dpl,#0x0D
   0EFD 12s0Er9D           3814 	lcall	_putchar
                           3815 ;	main1.c:386: break;
   0F00 02s0Fr9D           3816 	ljmp	00113$
   0F03                    3817 00109$:
                           3818 ;	main1.c:388: else if(str[i]==0x7f)
                           3819 ;	genPointerGet
                           3820 ;	genFarPointerGet
   0F03 8C 82              3821 	mov	dpl,r4
   0F05 8D 83              3822 	mov	dph,r5
   0F07 E0                 3823 	movx	a,@dptr
   0F08 FE                 3824 	mov	r6,a
                           3825 ;	genCmpEq
                           3826 ;	gencjneshort
                           3827 ;	Peephole 112.b	changed ljmp to sjmp
                           3828 ;	Peephole 198.b	optimized misc jump sequence
   0F09 BE 7F 20           3829 	cjne	r6,#0x7F,00106$
                           3830 ;	Peephole 200.b	removed redundant sjmp
                           3831 ;	Peephole 300	removed redundant label 00123$
                           3832 ;	Peephole 300	removed redundant label 00124$
                           3833 ;	main1.c:390: putchar(0x7f);
                           3834 ;	genCall
   0F0C 75 82 7F           3835 	mov	dpl,#0x7F
   0F0F C0 02              3836 	push	ar2
   0F11 C0 03              3837 	push	ar3
   0F13 12s0Er9D           3838 	lcall	_putchar
   0F16 D0 03              3839 	pop	ar3
   0F18 D0 02              3840 	pop	ar2
                           3841 ;	main1.c:391: i--;
                           3842 ;	genMinus
                           3843 ;	genMinusDec
   0F1A EA                 3844 	mov	a,r2
   0F1B 24 FF              3845 	add	a,#0xff
   0F1D FE                 3846 	mov	r6,a
   0F1E EB                 3847 	mov	a,r3
   0F1F 34 FF              3848 	addc	a,#0xff
   0F21 FF                 3849 	mov	r7,a
                           3850 ;	genAssign
   0F22 90s19r85           3851 	mov	dptr,#_get_num_i_1_1
   0F25 EE                 3852 	mov	a,r6
   0F26 F0                 3853 	movx	@dptr,a
   0F27 A3                 3854 	inc	dptr
   0F28 EF                 3855 	mov	a,r7
   0F29 F0                 3856 	movx	@dptr,a
                           3857 ;	Peephole 112.b	changed ljmp to sjmp
   0F2A 80 94              3858 	sjmp	00112$
   0F2C                    3859 00106$:
                           3860 ;	main1.c:393: else if(str[i]>='0'&&str[1]<='9')
                           3861 ;	genPointerGet
                           3862 ;	genFarPointerGet
   0F2C 8C 82              3863 	mov	dpl,r4
   0F2E 8D 83              3864 	mov	dph,r5
   0F30 E0                 3865 	movx	a,@dptr
                           3866 ;	genCmpLt
                           3867 ;	genCmp
   0F31 FE                 3868 	mov	r6,a
   0F32 C3                 3869 	clr	c
                           3870 ;	Peephole 106	removed redundant mov
   0F33 64 80              3871 	xrl	a,#0x80
   0F35 94 B0              3872 	subb	a,#0xb0
                           3873 ;	genIfxJump
                           3874 ;	Peephole 112.b	changed ljmp to sjmp
                           3875 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0F37 40 32              3876 	jc	00102$
                           3877 ;	Peephole 300	removed redundant label 00125$
                           3878 ;	genPointerGet
                           3879 ;	genFarPointerGet
   0F39 90s19r7C           3880 	mov	dptr,#(_get_num_str_1_1 + 0x0001)
   0F3C E0                 3881 	movx	a,@dptr
   0F3D FE                 3882 	mov	r6,a
                           3883 ;	genCmpGt
                           3884 ;	genCmp
   0F3E C3                 3885 	clr	c
                           3886 ;	Peephole 159	avoided xrl during execution
   0F3F 74 B9              3887 	mov	a,#(0x39 ^ 0x80)
   0F41 8E F0              3888 	mov	b,r6
   0F43 63 F0 80           3889 	xrl	b,#0x80
   0F46 95 F0              3890 	subb	a,b
                           3891 ;	genIfxJump
                           3892 ;	Peephole 112.b	changed ljmp to sjmp
                           3893 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0F48 40 21              3894 	jc	00102$
                           3895 ;	Peephole 300	removed redundant label 00126$
                           3896 ;	main1.c:395: putchar(str[i]);
                           3897 ;	genPointerGet
                           3898 ;	genFarPointerGet
   0F4A 8C 82              3899 	mov	dpl,r4
   0F4C 8D 83              3900 	mov	dph,r5
   0F4E E0                 3901 	movx	a,@dptr
                           3902 ;	genCall
   0F4F FC                 3903 	mov	r4,a
                           3904 ;	Peephole 244.c	loading dpl from a instead of r4
   0F50 F5 82              3905 	mov	dpl,a
   0F52 C0 02              3906 	push	ar2
   0F54 C0 03              3907 	push	ar3
   0F56 12s0Er9D           3908 	lcall	_putchar
   0F59 D0 03              3909 	pop	ar3
   0F5B D0 02              3910 	pop	ar2
                           3911 ;	main1.c:396: i+=1;
                           3912 ;	genPlus
   0F5D 90s19r85           3913 	mov	dptr,#_get_num_i_1_1
                           3914 ;     genPlusIncr
   0F60 74 01              3915 	mov	a,#0x01
                           3916 ;	Peephole 236.a	used r2 instead of ar2
   0F62 2A                 3917 	add	a,r2
   0F63 F0                 3918 	movx	@dptr,a
                           3919 ;	Peephole 181	changed mov to clr
   0F64 E4                 3920 	clr	a
                           3921 ;	Peephole 236.b	used r3 instead of ar3
   0F65 3B                 3922 	addc	a,r3
   0F66 A3                 3923 	inc	dptr
   0F67 F0                 3924 	movx	@dptr,a
   0F68 02s0ErC0           3925 	ljmp	00112$
   0F6B                    3926 00102$:
                           3927 ;	main1.c:399: putchar(str[i]);
                           3928 ;	genAssign
   0F6B 90s19r85           3929 	mov	dptr,#_get_num_i_1_1
   0F6E E0                 3930 	movx	a,@dptr
   0F6F FA                 3931 	mov	r2,a
   0F70 A3                 3932 	inc	dptr
   0F71 E0                 3933 	movx	a,@dptr
   0F72 FB                 3934 	mov	r3,a
                           3935 ;	genPlus
                           3936 ;	Peephole 236.g	used r2 instead of ar2
   0F73 EA                 3937 	mov	a,r2
   0F74 24r7B              3938 	add	a,#_get_num_str_1_1
   0F76 F5 82              3939 	mov	dpl,a
                           3940 ;	Peephole 236.g	used r3 instead of ar3
   0F78 EB                 3941 	mov	a,r3
   0F79 34s19              3942 	addc	a,#(_get_num_str_1_1 >> 8)
   0F7B F5 83              3943 	mov	dph,a
                           3944 ;	genPointerGet
                           3945 ;	genFarPointerGet
   0F7D E0                 3946 	movx	a,@dptr
                           3947 ;	genCall
   0F7E FA                 3948 	mov	r2,a
                           3949 ;	Peephole 244.c	loading dpl from a instead of r2
   0F7F F5 82              3950 	mov	dpl,a
   0F81 12s0Er9D           3951 	lcall	_putchar
                           3952 ;	main1.c:400: printf_tiny("not valid enter again \n\r");
                           3953 ;	genIpush
   0F84 74rD4              3954 	mov	a,#__str_49
   0F86 C0 E0              3955 	push	acc
   0F88 74s07              3956 	mov	a,#(__str_49 >> 8)
   0F8A C0 E0              3957 	push	acc
                           3958 ;	genCall
   0F8C 12s00r00           3959 	lcall	_printf_tiny
   0F8F 15 81              3960 	dec	sp
   0F91 15 81              3961 	dec	sp
                           3962 ;	main1.c:401: i=0;
                           3963 ;	genAssign
   0F93 90s19r85           3964 	mov	dptr,#_get_num_i_1_1
   0F96 E4                 3965 	clr	a
   0F97 F0                 3966 	movx	@dptr,a
   0F98 A3                 3967 	inc	dptr
   0F99 F0                 3968 	movx	@dptr,a
   0F9A 02s0ErC0           3969 	ljmp	00112$
   0F9D                    3970 00113$:
                           3971 ;	main1.c:404: return atoi(str);
                           3972 ;	genCall
                           3973 ;	Peephole 182.a	used 16 bit load of DPTR
   0F9D 90s19r7B           3974 	mov	dptr,#_get_num_str_1_1
   0FA0 75 F0 00           3975 	mov	b,#0x00
                           3976 ;	genRet
                           3977 ;	Peephole 150.b	removed misc moves via dph, dpl before return
                           3978 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0FA3 02s00r00           3979 	ljmp	_atoi
                           3980 ;
                           3981 ;------------------------------------------------------------
                           3982 ;Allocation info for local variables in function 'serial_init'
                           3983 ;------------------------------------------------------------
                           3984 ;------------------------------------------------------------
                           3985 ;	main1.c:409: void serial_init()
                           3986 ;	-----------------------------------------
                           3987 ;	 function serial_init
                           3988 ;	-----------------------------------------
   0FA6                    3989 _serial_init:
                           3990 ;	main1.c:411: TMOD = 0X20;
                           3991 ;	genAssign
   0FA6 75 89 20           3992 	mov	_TMOD,#0x20
                           3993 ;	main1.c:412: SCON = 0X50;
                           3994 ;	genAssign
   0FA9 75 98 50           3995 	mov	_SCON,#0x50
                           3996 ;	main1.c:413: TH1 = 0XFD;
                           3997 ;	genAssign
   0FAC 75 8D FD           3998 	mov	_TH1,#0xFD
                           3999 ;	main1.c:414: TR1 = 1;
                           4000 ;	genAssign
   0FAF D2 8E              4001 	setb	_TR1
                           4002 ;	Peephole 300	removed redundant label 00101$
   0FB1 22                 4003 	ret
                           4004 	.area CSEG    (CODE)
                           4005 	.area CONST   (CODE)
   0000                    4006 __str_0:
   0000 0D                 4007 	.db 0x0D
   0001 0A                 4008 	.db 0x0A
   0002 45 6E 74 65 72 20  4009 	.ascii "Enter the Buffer0 and Buffer1 size between 16 and 3200,div"
        74 68 65 20 42 75
        66 66 65 72 30 20
        61 6E 64 20 42 75
        66 66 65 72 31 20
        73 69 7A 65 20 62
        65 74 77 65 65 6E
        20 31 36 20 61 6E
        64 20 33 32 30 30
        2C 64 69 76
   003C 69 73 69 62 6C 65  4010 	.ascii "isible by 16:"
        20 62 79 20 31 36
        3A
   0049 0A                 4011 	.db 0x0A
   004A 00                 4012 	.db 0x00
   004B                    4013 __str_1:
   004B 0D                 4014 	.db 0x0D
   004C 0A                 4015 	.db 0x0A
   004D 53 69 7A 65 20 45  4016 	.ascii "Size Error! "
        72 72 6F 72 21 20
   0059 0A                 4017 	.db 0x0A
   005A 00                 4018 	.db 0x00
   005B                    4019 __str_2:
   005B 0D                 4020 	.db 0x0D
   005C 0A                 4021 	.db 0x0A
   005D 45 6E 74 65 72 20  4022 	.ascii "Enter the Buffer0 and Buffer1 size between 16 and 3200,div"
        74 68 65 20 42 75
        66 66 65 72 30 20
        61 6E 64 20 42 75
        66 66 65 72 31 20
        73 69 7A 65 20 62
        65 74 77 65 65 6E
        20 31 36 20 61 6E
        64 20 33 32 30 30
        2C 64 69 76
   0097 69 73 69 62 6C 65  4023 	.ascii "isible by 16 less than %d:"
        20 62 79 20 31 36
        20 6C 65 73 73 20
        74 68 61 6E 20 25
        64 3A
   00B1 0A                 4024 	.db 0x0A
   00B2 00                 4025 	.db 0x00
   00B3                    4026 __str_3:
   00B3 0D                 4027 	.db 0x0D
   00B4 45 6E 74 65 72 65  4028 	.ascii "Entered size out of range!"
        64 20 73 69 7A 65
        20 6F 75 74 20 6F
        66 20 72 61 6E 67
        65 21
   00CE 0A                 4029 	.db 0x0A
   00CF 00                 4030 	.db 0x00
   00D0                    4031 __str_4:
   00D0 0D                 4032 	.db 0x0D
   00D1 0A                 4033 	.db 0x0A
   00D2 20 42 75 66 66 65  4034 	.ascii " Buffer 0 Allocated!"
        72 20 30 20 41 6C
        6C 6F 63 61 74 65
        64 21
   00E6 00                 4035 	.db 0x00
   00E7                    4036 __str_5:
   00E7 0D                 4037 	.db 0x0D
   00E8 0A                 4038 	.db 0x0A
   00E9 20 42 75 66 66 65  4039 	.ascii " Buffer 1 Allocated!"
        72 20 31 20 41 6C
        6C 6F 63 61 74 65
        64 21
   00FD 00                 4040 	.db 0x00
   00FE                    4041 __str_6:
   00FE 0A                 4042 	.db 0x0A
   00FF 0D                 4043 	.db 0x0D
   0100 61 64 64 72 65 73  4044 	.ascii "address of b0 = 0x%x"
        73 20 6F 66 20 62
        30 20 3D 20 30 78
        25 78
   0114 00                 4045 	.db 0x00
   0115                    4046 __str_7:
   0115 0A                 4047 	.db 0x0A
   0116 0D                 4048 	.db 0x0D
   0117 61 64 64 72 65 73  4049 	.ascii "address of b1 = 0x%x"
        73 20 6F 66 20 62
        31 20 3D 20 30 78
        25 78
   012B 00                 4050 	.db 0x00
   012C                    4051 __str_8:
   012C 0D                 4052 	.db 0x0D
   012D 0A                 4053 	.db 0x0A
   012E 45 6E 74 65 72 20  4054 	.ascii "Enter a character: "
        61 20 63 68 61 72
        61 63 74 65 72 3A
        20
   0141 00                 4055 	.db 0x00
   0142                    4056 __str_9:
   0142 0A                 4057 	.db 0x0A
   0143 73 74 6F 72 69 6E  4058 	.ascii "storing charcters in  buffer '0'"
        67 20 63 68 61 72
        63 74 65 72 73 20
        69 6E 20 20 62 75
        66 66 65 72 20 27
        30 27
   0163 00                 4059 	.db 0x00
   0164                    4060 __str_10:
   0164 09                 4061 	.db 0x09
   0165 42 75 66 66 65 72  4062 	.ascii "Buffer '0' Full!"
        20 27 30 27 20 46
        75 6C 6C 21
   0175 00                 4063 	.db 0x00
   0176                    4064 __str_11:
   0176 0D                 4065 	.db 0x0D
   0177 2D 2D 2D 2D 2D 2D  4066 	.ascii "-----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   01B2 2D 2D 2D 2D 2D 2D  4067 	.ascii "------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   01C4 0A                 4068 	.db 0x0A
   01C5 00                 4069 	.db 0x00
   01C6                    4070 __str_12:
   01C6 0D                 4071 	.db 0x0D
   01C7 09                 4072 	.db 0x09
   01C8 09                 4073 	.db 0x09
   01C9 09                 4074 	.db 0x09
   01CA 41 64 64 69 6E 67  4075 	.ascii "Adding the Buffers                                      "
        20 74 68 65 20 42
        75 66 66 65 72 73
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20
   0202 20 20 20 20 20 20  4076 	.ascii "                       "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0219 00                 4077 	.db 0x00
   021A                    4078 __str_13:
   021A 0A                 4079 	.db 0x0A
   021B 0D                 4080 	.db 0x0D
   021C 2D 2D 2D 2D 2D 2D  4081 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0256 2D 2D 2D 2D 2D 2D  4082 	.ascii "------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   0268 0A                 4083 	.db 0x0A
   0269 00                 4084 	.db 0x00
   026A                    4085 __str_14:
   026A 0D                 4086 	.db 0x0D
   026B 0A                 4087 	.db 0x0A
   026C 20 45 6E 74 65 72  4088 	.ascii " Enter buffer size between 30 and 300:  n"
        20 62 75 66 66 65
        72 20 73 69 7A 65
        20 62 65 74 77 65
        65 6E 20 33 30 20
        61 6E 64 20 33 30
        30 3A 20 20 6E
   0295 00                 4089 	.db 0x00
   0296                    4090 __str_15:
   0296 0D                 4091 	.db 0x0D
   0297 0A                 4092 	.db 0x0A
   0298 53 69 7A 65 20 65  4093 	.ascii "Size error , enter a size within the range  n"
        72 72 6F 72 20 2C
        20 65 6E 74 65 72
        20 61 20 73 69 7A
        65 20 77 69 74 68
        69 6E 20 74 68 65
        20 72 61 6E 67 65
        20 20 6E
   02C5 00                 4094 	.db 0x00
   02C6                    4095 __str_16:
   02C6 0D                 4096 	.db 0x0D
   02C7 0A                 4097 	.db 0x0A
   02C8 45 6E 74 65 72 20  4098 	.ascii "Enter a buffer size between 30 and 300"
        61 20 62 75 66 66
        65 72 20 73 69 7A
        65 20 62 65 74 77
        65 65 6E 20 33 30
        20 61 6E 64 20 33
        30 30
   02EE 0A                 4099 	.db 0x0A
   02EF 00                 4100 	.db 0x00
   02F0                    4101 __str_17:
   02F0 0D                 4102 	.db 0x0D
   02F1 0A                 4103 	.db 0x0A
   02F2 20 20 42 75 66 66  4104 	.ascii "  Buffer Allocated"
        65 72 20 41 6C 6C
        6F 63 61 74 65 64
   0304 00                 4105 	.db 0x00
   0305                    4106 __str_18:
   0305 0D                 4107 	.db 0x0D
   0306 0A                 4108 	.db 0x0A
   0307 20 41 6C 6C 6F 63  4109 	.ascii " Allocation failed"
        61 74 69 6F 6E 20
        66 61 69 6C 65 64
   0319 00                 4110 	.db 0x00
   031A                    4111 __str_19:
   031A 0D                 4112 	.db 0x0D
   031B 09                 4113 	.db 0x09
   031C 09                 4114 	.db 0x09
   031D 09                 4115 	.db 0x09
   031E 44 65 6C 65 74 69  4116 	.ascii "Deleting buffer"
        6E 67 20 62 75 66
        66 65 72
   032D 0A                 4117 	.db 0x0A
   032E 00                 4118 	.db 0x00
   032F                    4119 __str_20:
   032F 0D                 4120 	.db 0x0D
   0330 0A                 4121 	.db 0x0A
   0331 45 6E 74 65 72 20  4122 	.ascii "Enter the number of the buffer to deleted "
        74 68 65 20 6E 75
        6D 62 65 72 20 6F
        66 20 74 68 65 20
        62 75 66 66 65 72
        20 74 6F 20 64 65
        6C 65 74 65 64 20
   035B 00                 4123 	.db 0x00
   035C                    4124 __str_21:
   035C 0D                 4125 	.db 0x0D
   035D 0A                 4126 	.db 0x0A
   035E 45 6E 74 65 72 20  4127 	.ascii "Enter  a valid number decimal number"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 64 65
        63 69 6D 61 6C 20
        6E 75 6D 62 65 72
   0382 00                 4128 	.db 0x00
   0383                    4129 __str_22:
   0383 63 61 6E 6E 6F 74  4130 	.ascii "cannot delete buffer '0' "
        20 64 65 6C 65 74
        65 20 62 75 66 66
        65 72 20 27 30 27
        20
   039C 00                 4131 	.db 0x00
   039D                    4132 __str_23:
   039D 0D                 4133 	.db 0x0D
   039E 0A                 4134 	.db 0x0A
   039F 20 42 75 66 66 65  4135 	.ascii " Buffer %d deleted"
        72 20 25 64 20 64
        65 6C 65 74 65 64
   03B1 00                 4136 	.db 0x00
   03B2                    4137 __str_24:
   03B2 0D                 4138 	.db 0x0D
   03B3 0A                 4139 	.db 0x0A
   03B4 20 69 6E 76 61 6C  4140 	.ascii " invalid input try again"
        69 64 20 69 6E 70
        75 74 20 74 72 79
        20 61 67 61 69 6E
   03CC 00                 4141 	.db 0x00
   03CD                    4142 __str_25:
   03CD 0A                 4143 	.db 0x0A
   03CE 0D                 4144 	.db 0x0D
   03CF 2D 2D 2D 2D 2D 2D  4145 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0409 2D 2D 2D 2D 2D 2D  4146 	.ascii "-----------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   041A 0A                 4147 	.db 0x0A
   041B 00                 4148 	.db 0x00
   041C                    4149 __str_26:
   041C 0D                 4150 	.db 0x0D
   041D 0A                 4151 	.db 0x0A
   041E 09                 4152 	.db 0x09
   041F 46 72 65 65 69 6E  4153 	.ascii "Freeing all Buffers"
        67 20 61 6C 6C 20
        42 75 66 66 65 72
        73
   0432 0A                 4154 	.db 0x0A
   0433 00                 4155 	.db 0x00
   0434                    4156 __str_27:
   0434 0D                 4157 	.db 0x0D
   0435 09                 4158 	.db 0x09
   0436 09                 4159 	.db 0x09
   0437 09                 4160 	.db 0x09
   0438 41 64 64 72 65 73  4161 	.ascii "Address in Hex"
        73 20 69 6E 20 48
        65 78
   0446 0A                 4162 	.db 0x0A
   0447 00                 4163 	.db 0x00
   0448                    4164 __str_28:
   0448 0A                 4165 	.db 0x0A
   0449 0D                 4166 	.db 0x0D
   044A 2D 2D 2D 2D 2D 2D  4167 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0484 2D 2D 2D 2D 2D 2D  4168 	.ascii "----------"
        2D 2D 2D 2D
   048E 0A                 4169 	.db 0x0A
   048F 00                 4170 	.db 0x00
   0490                    4171 __str_29:
   0490 0D                 4172 	.db 0x0D
   0491 0A                 4173 	.db 0x0A
   0492 25 78 20 3A 20     4174 	.ascii "%x : "
   0497 00                 4175 	.db 0x00
   0498                    4176 __str_30:
   0498 25 78 20           4177 	.ascii "%x "
   049B 00                 4178 	.db 0x00
   049C                    4179 __str_31:
   049C 0A                 4180 	.db 0x0A
   049D 0D                 4181 	.db 0x0D
   049E 00                 4182 	.db 0x00
   049F                    4183 __str_32:
   049F 0D                 4184 	.db 0x0D
   04A0 0A                 4185 	.db 0x0A
   04A1 42 75 66 66 65 72  4186 	.ascii "Buffer 0 is empty , enter data!"
        20 30 20 69 73 20
        65 6D 70 74 79 20
        2C 20 65 6E 74 65
        72 20 64 61 74 61
        21
   04C0 0A                 4187 	.db 0x0A
   04C1 00                 4188 	.db 0x00
   04C2                    4189 __str_33:
   04C2 0D                 4190 	.db 0x0D
   04C3 2D 2D 2D 2D 2D 2D  4191 	.ascii "-----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   04FE 2D 2D 2D 2D 2D 2D  4192 	.ascii "-----------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   0515 0A                 4193 	.db 0x0A
   0516 00                 4194 	.db 0x00
   0517                    4195 __str_34:
   0517 0D                 4196 	.db 0x0D
   0518 0A                 4197 	.db 0x0A
   0519 09                 4198 	.db 0x09
   051A 09                 4199 	.db 0x09
   051B 09                 4200 	.db 0x09
   051C 20 20 20 20 20 20  4201 	.ascii "       BUFFER REPORT                                   "
        20 42 55 46 46 45
        52 20 52 45 50 4F
        52 54 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0553 20 20 20 20 20 20  4202 	.ascii "                   "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0566 0A                 4203 	.db 0x0A
   0567 00                 4204 	.db 0x00
   0568                    4205 __str_35:
   0568 0A                 4206 	.db 0x0A
   0569 0D                 4207 	.db 0x0D
   056A 2D 2D 2D 2D 2D 2D  4208 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   05A4 2D 2D 2D 2D 2D 2D  4209 	.ascii "-----------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   05BB 0A                 4210 	.db 0x0A
   05BC 00                 4211 	.db 0x00
   05BD                    4212 __str_36:
   05BD 0D                 4213 	.db 0x0D
   05BE 0A                 4214 	.db 0x0A
   05BF 09                 4215 	.db 0x09
   05C0 09                 4216 	.db 0x09
   05C1 09                 4217 	.db 0x09
   05C2 42 75 66 66 65 72  4218 	.ascii "Buffer %d Details"
        20 25 64 20 44 65
        74 61 69 6C 73
   05D3 09                 4219 	.db 0x09
   05D4 09                 4220 	.db 0x09
   05D5 09                 4221 	.db 0x09
   05D6 0A                 4222 	.db 0x0A
   05D7 20                 4223 	.ascii " "
   05D8 00                 4224 	.db 0x00
   05D9                    4225 __str_37:
   05D9 0D                 4226 	.db 0x0D
   05DA 0A                 4227 	.db 0x0A
   05DB 09                 4228 	.db 0x09
   05DC 42 75 66 66 65 72  4229 	.ascii "Buffer %d start address                  :    %x"
        20 25 64 20 73 74
        61 72 74 20 61 64
        64 72 65 73 73 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 3A
        20 20 20 20 25 78
   060C 00                 4230 	.db 0x00
   060D                    4231 __str_38:
   060D 0D                 4232 	.db 0x0D
   060E 0A                 4233 	.db 0x0A
   060F 09                 4234 	.db 0x09
   0610 42 75 66 66 65 72  4235 	.ascii "Buffer %d end Address                    :    %x"
        20 25 64 20 65 6E
        64 20 41 64 64 72
        65 73 73 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 3A
        20 20 20 20 25 78
   0640 00                 4236 	.db 0x00
   0641                    4237 __str_39:
   0641 0D                 4238 	.db 0x0D
   0642 0A                 4239 	.db 0x0A
   0643 09                 4240 	.db 0x09
   0644 53 69 7A 65 20 6F  4241 	.ascii "Size of buffer %d                        :    %d"
        66 20 62 75 66 66
        65 72 20 25 64 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 3A
        20 20 20 20 25 64
   0674 00                 4242 	.db 0x00
   0675                    4243 __str_40:
   0675 09                 4244 	.db 0x09
   0676 0D                 4245 	.db 0x0D
   0677 0A                 4246 	.db 0x0A
   0678 00                 4247 	.db 0x00
   0679                    4248 __str_41:
   0679 09                 4249 	.db 0x09
   067A 0D                 4250 	.db 0x0D
   067B 0A                 4251 	.db 0x0A
   067C 6E 75 6D 62 65 72  4252 	.ascii "number of characters in buffer %d                   :    "
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 69 6E 20
        62 75 66 66 65 72
        20 25 64 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 3A 20
        20 20 20
   06B5 25 64              4253 	.ascii "%d"
   06B7 00                 4254 	.db 0x00
   06B8                    4255 __str_42:
   06B8 09                 4256 	.db 0x09
   06B9 0D                 4257 	.db 0x0D
   06BA 0A                 4258 	.db 0x0A
   06BB 46 72 65 65 20 73  4259 	.ascii "Free space in buffer %d                             :    "
        70 61 63 65 20 69
        6E 20 62 75 66 66
        65 72 20 25 64 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 3A 20
        20 20 20
   06F4 25 64              4260 	.ascii "%d"
   06F6 00                 4261 	.db 0x00
   06F7                    4262 __str_43:
   06F7 0D                 4263 	.db 0x0D
   06F8 0A                 4264 	.db 0x0A
   06F9 00                 4265 	.db 0x00
   06FA                    4266 __str_44:
   06FA 0D                 4267 	.db 0x0D
   06FB 0A                 4268 	.db 0x0A
   06FC 09                 4269 	.db 0x09
   06FD 4E 75 6D 62 65 72  4270 	.ascii "Number of characters received till last'?'   : %d"
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 72 65 63
        65 69 76 65 64 20
        74 69 6C 6C 20 6C
        61 73 74 27 3F 27
        20 20 20 3A 20 25
        64
   072E 0A                 4271 	.db 0x0A
   072F 00                 4272 	.db 0x00
   0730                    4273 __str_45:
   0730 0D                 4274 	.db 0x0D
   0731 2D 2D 2D 2D 2D 2D  4275 	.ascii "-----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   076C 2D 2D 2D 2D 2D 2D  4276 	.ascii "---------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D
   0781 0A                 4277 	.db 0x0A
   0782 00                 4278 	.db 0x00
   0783                    4279 __str_46:
   0783 0D                 4280 	.db 0x0D
   0784 0A                 4281 	.db 0x0A
   0785 09                 4282 	.db 0x09
   0786 63 6F 6E 74 65 6E  4283 	.ascii "contents of buffer 0:"
        74 73 20 6F 66 20
        62 75 66 66 65 72
        20 30 3A
   079B 0A                 4284 	.db 0x0A
   079C 20 20 20           4285 	.ascii "   "
   079F 00                 4286 	.db 0x00
   07A0                    4287 __str_47:
   07A0 0D                 4288 	.db 0x0D
   07A1 0A                 4289 	.db 0x0A
   07A2 41 53 20 49 6E 64  4290 	.ascii "AS Indicated buffer 0 is empty!"
        69 63 61 74 65 64
        20 62 75 66 66 65
        72 20 30 20 69 73
        20 65 6D 70 74 79
        21
   07C1 0A                 4291 	.db 0x0A
   07C2 00                 4292 	.db 0x00
   07C3                    4293 __str_48:
   07C3 0D                 4294 	.db 0x0D
   07C4 0A                 4295 	.db 0x0A
   07C5 20 6E 6F 74 20 73  4296 	.ascii " not storing "
        74 6F 72 69 6E 67
        20
   07D2 0A                 4297 	.db 0x0A
   07D3 00                 4298 	.db 0x00
   07D4                    4299 __str_49:
   07D4 6E 6F 74 20 76 61  4300 	.ascii "not valid enter again "
        6C 69 64 20 65 6E
        74 65 72 20 61 67
        61 69 6E 20
   07EA 0A                 4301 	.db 0x0A
   07EB 0D                 4302 	.db 0x0D
   07EC 00                 4303 	.db 0x00
                           4304 	.area XINIT   (CODE)
